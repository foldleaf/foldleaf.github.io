<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于本站</title>
      <link href="/2023/01/30/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/"/>
      <url>/2023/01/30/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>经过多方面的尝试，把 hexo、vuepress、hugo、docusaurus 等静态博客都搭了一遍，hugo 是用 go 模板语法来写的，但是有点问题就是有些主题的依赖下载有问题，能用的主题又感觉不好看，docusaurus 除了默认主题外唯一找到个不错的主题但似乎又因为 npm 依赖问题而放弃…… 最终方案是 <code>hexo-butterfly</code> + <code>vuepress-theme-hope</code></p><p>使用 hexo 作为主博客，在 butterfly、sakura、shoka 中最后选择了 butterfly 主题，主要原因是其生态比较好，diy 教程比较齐全，花样多，缺点是系列文章不太方便查看</p><p>使用 vuepress 作为副博客 / 文档站，最后在默认、reco、hope、gungnir、aurora 中选择了 hope 主题，主要原因是它的侧边栏能够根据文件层级自动生成树状目录，方便查看，缺点是不够花哨</p><p>如果你对本博客花哨的界面有所不适，可以移步到 <code>我的文档站</code>  (https//foldleaf.github.io/leaf-hope)<br> hexo 这链接似乎有点问题，可以访问 <code>友链</code> 中 <code>我的文档站</code></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gin框架初识</title>
      <link href="/2023/01/30/gin%E6%A1%86%E6%9E%B6%E5%88%9D%E8%AF%86/"/>
      <url>/2023/01/30/gin%E6%A1%86%E6%9E%B6%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="gin-简单使用"><a class="markdownIt-Anchor" href="#gin-简单使用">#</a> Gin 简单使用</h1><p>在这之前我们需要初始化项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go mod init ginstudy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用 goland 应该在项目创建时就会初始化并创建 go.mod 文件，我使用的 vs code 需要自己初始化项目</p><p>下载与安装 gin 框架<br><a href="https://gin-gonic.com/zh-cn/docs/">请查阅官方文档</a><br>下载并安装 gin：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/gin-gonic/gin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然用了代理但有时候下载依赖还是很慢，不知道为什么，多试几次</p><p>项目引入 gin</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"github.com/gin-gonic/gin"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码 + 极其详细的注释就是最好的学习文档</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//返回和json格式的数据，状态码为200</span><span class="token comment">/* gin.H//H is a shortcut for map[string]interface&#123;&#125;   key为string类型，value为任意类型type H map[string]any*/</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"hello golang"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建一个默认的路由引擎 *gin.Engine</span>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// GET：GET请求方式；  /hello：请求的路径</span><span class="token comment">// 当客户端以GET方式请求/hello路径时，会执行后面的函数sayHello</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> sayHello<span class="token punctuation">)</span><span class="token comment">//启动服务,在指定端口监听</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9090"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//运行</span><span class="token comment">//访问localhost:9090/hello，显示&#123;"message":"hello golang"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RESTfulAPI<br> 在 main () 中加入以下请求方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">   r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过浏览器访问只能使用 GET 和 POST 请求，我们使用 api 测试工具进行测试<br> api 工具有 postman、apipost、apifox 等，我这里使用 apipost 测试</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go与前端的json数据交互笔记</title>
      <link href="/2023/01/30/go%E4%B8%8E%E5%89%8D%E7%AB%AF%E7%9A%84json%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
      <url>/2023/01/30/go%E4%B8%8E%E5%89%8D%E7%AB%AF%E7%9A%84json%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h1 id="go-与前端的-json-数据交互"><a class="markdownIt-Anchor" href="#go-与前端的-json-数据交互">#</a> Go 与前端的 JSON 数据交互</h1><p>golang 处理 json 数据<br> <code>encoding/json</code>  包中的 <code>json.Unmarshal</code>  与 <code>json.Marshal</code> <br> <code>json.Unmarshal</code> : 解析 json 的 byte 类型数据，转换成结构体对象<br> <code>json.Marshal</code> : 将结构体对象转换成 json 的 byte 类型数据</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Message <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token comment">//后面的json字段与需要对应的json格式的字段一致,不一致则json与结构体对象无法互相转换</span><span class="token comment">//例：&#123;"address":"127.0.0.1:40000"，"body":"1234"&#125;</span>Address <span class="token builtin">string</span> <span class="token string">`json:"address"`</span>Body    <span class="token builtin">string</span> <span class="token string">`json:"body"`</span><span class="token punctuation">&#125;</span><span class="token comment">//（a *App）是使用wails的要求，可以无视</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>App<span class="token punctuation">)</span> <span class="token function">NewConnection</span><span class="token punctuation">(</span>Msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token comment">//接收前端json字符串Msg</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">,</span> Msg<span class="token punctuation">)</span><span class="token comment">//结构体对象 mes</span><span class="token keyword">var</span> mes Message<span class="token comment">//将json字符串解析，Unmarshal解析需要先将json数据转为[]byte类型，返回值是错误类型</span><span class="token comment">//解析后转换成结构体对象mes</span>err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>Msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mes<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ERROR:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ERROR"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"接收json"</span><span class="token punctuation">,</span> mes<span class="token punctuation">.</span>Address<span class="token punctuation">)</span>mes<span class="token punctuation">.</span>Address <span class="token operator">=</span> <span class="token string">"111"</span>mes<span class="token punctuation">.</span>Body <span class="token operator">=</span> <span class="token string">"222"</span>    <span class="token comment">//Marshal将对象转换成json，返回[]byte和error</span>mesJson<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>mes<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"转换json"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>mesJson<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//返回json字符串</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>mesJson<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端处理 json 数据<br> <code>JSON.stringify</code> : 将 json 对象转换成 json 字符串<br> <code>JSON.parse</code> : 将 json 字符串转换成 json 对象</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;import &#123; reactive &#125; from &#39;vue&#39;&#x2F;&#x2F;使用wails的要求，就是直接引用go的NewConnection函数import &#123; NewConnection &#125; from &#39;..&#x2F;..&#x2F;wailsjs&#x2F;go&#x2F;main&#x2F;App&#39;&#x2F;&#x2F;消息json对象const msg &#x3D; reactive(&#123;    address: &quot;&quot;,    body: &quot;&quot;&#125;)&#x2F;&#x2F;使用const后不能改变对象，但可以改变对象的属性&#x2F;&#x2F;例msg&#x3D;JSON.parse(result),msg不会发生变化，但可以使其属性发生变化 msg.body&#x3D;222&#x2F;&#x2F;如要使对象能够改变，请使用let定义对象let reply&#x3D;reactive(&#123;    address:&quot;1&quot;,    body:&quot;1&quot;&#125;)function newConnection() &#123;    &#x2F;&#x2F;后端不能识别json对象，使用JSON.stringify将json对象转换成json字符串    NewConnection(JSON.stringify(msg)).then(result &#x3D;&gt; &#123;        msg.body&#x3D;result        &#x2F;&#x2F;使用JSON.parse将json字符串转换成json对象        reply&#x3D;JSON.parse(result)        alert(JSON.stringify(reply))            &#125;)&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;div id&#x3D;&quot;input&quot; class&#x3D;&quot;input-box&quot;&gt;        &lt;input id&#x3D;&quot;address&quot; v-model&#x3D;&quot;msg.address&quot; autocomplete&#x3D;&quot;off&quot; class&#x3D;&quot;input&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;        &lt;button class&#x3D;&quot;btn&quot; @click&#x3D;&quot;newConnection&quot;&gt;连接&lt;&#x2F;button&gt;    &lt;&#x2F;div&gt;    &lt;textarea id&#x3D;&quot;text&quot; v-model&#x3D;&quot;msg.body&quot; class&#x3D;&quot;text&quot;&gt;&lt;&#x2F;textarea&gt;    &lt;textarea id&#x3D;&quot;text&quot; v-model&#x3D;&quot;reply.body&quot; class&#x3D;&quot;text&quot;&gt;&lt;&#x2F;textarea&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;style scoped&gt;.result &#123;    height: 20px;    line-height: 20px;    margin: 1.5rem auto;&#125;.input-box .btn &#123;    width: 60px;    height: 30px;    line-height: 30px;    border-radius: 3px;    border: none;    margin: 0 0 0 20px;    padding: 0 8px;    cursor: pointer;&#125;.text &#123;    width: 200px;    height: 200px;    line-height: 30px;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入 127.0.0.6666，点击连接按钮，运行结果：<br>前端显示</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 速成指南</title>
      <link href="/2023/01/30/vue3%20%E9%80%9F%E6%88%90%E6%8C%87%E5%8D%97/"/>
      <url>/2023/01/30/vue3%20%E9%80%9F%E6%88%90%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="vue3-组合式-api"><a class="markdownIt-Anchor" href="#vue3-组合式-api">#</a> Vue3 组合式 API</h1><p>创建 vue 应用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">初始化vue项目   <span class="token function">npm</span> init vue@latest进入项目文件夹  <span class="token builtin class-name">cd</span> 项目安装依赖        <span class="token function">npm</span> install<span class="token punctuation">(</span>简写：npm i<span class="token punctuation">)</span>运行项目        <span class="token function">npm</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一、基础文件<br><strong> App.vue</strong><br> 创建组件 App<br><strong>main.js</strong><br>import 引入组件 App，将 App 挂载到 <code>#app</code> <br><strong>index.html</strong><br> <code>#app</code>  即为此处的 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code></p><p>通过 main.js 将 vue 代码转换为 html 代码<br>二、基础语法<br> vue3 与 vue2 的区别在于 script 模块，抛弃难看的 vue2 选项式，使用 <code>setup</code> ，拥抱最新最潮的组合式 api 吧</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">&#123;</span>            <span class="token comment">//return上面setup()中的变量、方法等</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再进一步改用最新最潮的 setup 语法糖吧，使用后会自动 return</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1定义对象与变量响应式"><a class="markdownIt-Anchor" href="#1定义对象与变量响应式">#</a> 1. 定义对象与变量（响应式）</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>reactive<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">const</span> person <span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"小明"</span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">"18"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>reactive 绑定一个 person 对象。对于只学过后端的同学需要注意 js 中的对象与后端语言的对象有一定的不同，js 是没有后端类的概念的，由于对象并不和类关联， 于是可以随意地给这个对象增加属性<br><a href="https://blog.csdn.net/fhjdzkp/article/details/79707749">关于 js 对象，有、东西的解释</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">const</span> person<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ref 底层的本质其实还是 reactive，系统会自动根据我们给 ref 传入的值将它转换成</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">ref</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span>xx<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以上面的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token comment">//等价于</span><span class="token keyword">const</span> person<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">"小明"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般使用 ref 定义基础数据类型的值，用 reactive 定义对象或数组</p><h2 id="2定义方法"><a class="markdownIt-Anchor" href="#2定义方法">#</a> 2. 定义方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> money<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//写法1</span><span class="token keyword">function</span> <span class="token function">moneyUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    money<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token comment">//写法2</span><span class="token keyword">let</span> <span class="token function-variable function">moneyUp</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    money<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token comment">//写法3,箭头函数</span><span class="token keyword">let</span> <span class="token function-variable function">moneyUp</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    money<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>箭头函数写法似乎在某些情况下不推荐使用，那么就干脆以前两种为准</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">let</span> money<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">moneyUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    money<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>现在有<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>money<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>元<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"moneyUp"</span><span class="token operator">></span>加钱<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://cloud.tencent.com/developer/article/1495550">JS 箭头函数之：为何用？怎么用？何时用？</a></p><h2 id="3计算属性computed"><a class="markdownIt-Anchor" href="#3计算属性computed">#</a> 3. 计算属性 computed</h2><p>“若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的，然而，不同之处在于计算属性值会基于其响应式依赖被缓存。一个计算属性仅会在其响应式依赖更新时才重新计算。”（也就是计算属性依赖的数据改变缓存才会改变，而方法没有，需要缓存的话就用计算属性）<br><a href="https://www.cnblogs.com/Renyi-Fan/p/12735661.html">VUE 疑难问题 —2、方法和计算属性的区别</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">,</span>computed<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">const</span> money<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">const</span> moneyUp <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> money<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://cn.vuejs.org/guide/essentials/computed.html">看官网吧</a><br>计算属性默认是只读的。当你尝试修改一个计算属性时，你会收到一个运行时警告。只在某些特殊场景中你可能才需要用到 “可写” 的属性，你可以通过同时提供 getter 和 setter 来创建：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// getter</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> firstName<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">.</span>value  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// setter</span>  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 注意：我们这里使用的是解构赋值语法</span>    <span class="token punctuation">[</span>firstName<span class="token punctuation">.</span>value<span class="token punctuation">,</span> lastName<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4监听watch"><a class="markdownIt-Anchor" href="#4监听watch">#</a> 4. 监听 watch</h2><p><a href="https://blog.csdn.net/qq_36995521/article/details/122576076">https://blog.csdn.net/qq_36995521/article/details/122576076</a><br> 这个可以，简洁明了👍<br><a href="https://www.yisu.com/zixun/614924.html">https://www.yisu.com/zixun/614924.html</a></p><p>5. 路由<br>这个不戳👍<br><a href="https://kalacloud.com/blog/vue-router-tutorial-for-vue-3/">https://kalacloud.com/blog/vue-router-tutorial-for-vue-3/</a></p><p>1) 在 views 文件夹下创建不同的页面组件<br>组件的名称需使用驼峰命名。且如果只有一个单词时会报错，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Component name  should always be multi-word <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是正常的，你问我怎么办？虽然也可以关掉 eslint 语法检查，但还是改名字吧😅</p><p>2) 在路由 js 文件下引入页面组件，定义这些组件的名称 name 与路径 path<br>3) 路由 js 文件引入创建路由的方法，根据这些页面组件创建路由<br> 4) App.vue 使用路由 js 的路径 path 引入页面组件，关于使用的标签 <code>router-link</code> 、 <code>&lt;router-view/&gt;</code></p><blockquote><p>通过 <code>router-link</code>  可以使 <code>&lt;router-view/&gt;</code>  中的显示内容路由（跳转）到 src/router/index.js 文件中配置的组件中去</p></blockquote><p>5) main.js 使用 router</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6) 路由进阶 - 导航栏<br><a href="https://www.jianshu.com/p/c964a988b143"> https://www.jianshu.com/p/c964a988b143</a><br> 看了好多都是用框架，不利于理解<br>这个简单易懂👇👍<br><a href="https://blog.csdn.net/weixin_40400161/article/details/96711757">https://blog.csdn.net/weixin_40400161/article/details/96711757</a><br>1 - 创建需要跳转的页面组件<br> 2 - 配置路由跳转 js 文件<br> 3 - 创建导航栏组件，设定样式， <code>router-link</code>  写在这里<br> 4 - 在 App.vue 中使用，可以自定义显示布局</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>导航栏组件<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5. 自定义布局<br><a href="https://www.cnblogs.com/zouzou-busy/p/13080665.html"> https://www.cnblogs.com/zouzou-busy/p/13080665.html</a></p><p>插播一条<br><a href="https://www.cnblogs.com/Renyi-Fan/p/12319825.html">单双引号的使用似乎并不严格区分 - 某博客</a><br><a href="https://www.zhihu.com/question/21168673">单双引号的使用似乎并不严格区 - 知乎</a><br>总结:<br>1. 使用单引号，每次能少按 shift 键，每天要用 100 个引号那么一年就能少按 3 万 6 个键<br> 2. 与</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端交互</title>
      <link href="/2023/01/30/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
      <url>/2023/01/30/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h1 id="前后端交互"><a class="markdownIt-Anchor" href="#前后端交互">#</a> 前后端交互</h1><h2 id="一-后端写好需要调用的函数"><a class="markdownIt-Anchor" href="#一-后端写好需要调用的函数">#</a> 一、后端写好需要调用的函数</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token comment">//定义函数NewConnection</span><span class="token comment">//http.Response：后端返回给前端的响应</span><span class="token comment">// *http.Request：前端传给后端的请求</span><span class="token keyword">func</span> <span class="token function">NewConnection</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span>request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str<span class="token operator">:=</span><span class="token string">"asdfghjkl"</span><span class="token comment">//写入需要返回响应的内容，[]byte类型</span>response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//注册路由，即定义访问的路径及其调用的函数</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/connect"</span><span class="token punctuation">,</span>NewConnection<span class="token punctuation">)</span>    <span class="token comment">//启动服务并指定监听端口</span>err<span class="token operator">:=</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":9090"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"启动服务失败:"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//执行 go run main.go 启动服务</span><span class="token comment">//在浏览器访问localhost:9090/connect</span><span class="token comment">//可以看到 asdfghjkl字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-前端使用axios进行调用"><a class="markdownIt-Anchor" href="#二-前端使用axios进行调用">#</a> 二、前端使用 axios 进行调用</h2><p>下载 axios</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>import 导入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 axios</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    msg<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">"2"</span><span class="token punctuation">,</span>    reply<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">"2"</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"1111111"</span><span class="token punctuation">)</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:9090/connect"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"222222"</span><span class="token punctuation">)</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"000000"</span><span class="token punctuation">)</span>        reply<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token function">string</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击连接按钮，newConnection 没有弹窗，F12 查看控制台发现报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http://127.0.0.1:9090/connect net::ERR_FAILED <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是后端控制台成功打印</p><pre class="line-numbers language-none"><code class="language-none">请求：&amp;&#123;GET &#x2F;connect HTTP&#x2F;1.1 1 1 map[Accept:[application&#x2F;json, text&#x2F;plain, *&#x2F;*] Accept-Encoding:[gzip, deflate, br] Accept-Language:[zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6] Cache-Control:[no-cache] Connection:[keep-alive] Origin:[http:&#x2F;&#x2F;127.0.0.1:5173] Pragma:[no-cache] Referer:[http:&#x2F;&#x2F;127.0.0.1:5173&#x2F;] Sec-Ch-Ua:[&quot;Not?A_Brand&quot;;v&#x3D;&quot;8&quot;, &quot;Chromium&quot;;v&#x3D;&quot;108&quot;, &quot;Microsoft Edge&quot;;v&#x3D;&quot;108&quot;] Sec-Ch-Ua-Mobile:[?0] Sec-Ch-Ua-Platform:[&quot;Windows&quot;] Sec-Fetch-Dest:[empty] Sec-Fetch-Mode:[cors] Sec-Fetch-Site:[same-site] User-Agent:[Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;108.0.0.0 Safari&#x2F;537.36 Edg&#x2F;108.0.1462.76]] &#123;&#125; &lt;nil&gt; 0 [] false 127.0.0.1:9090 map[] map[] &lt;nil&gt; map[] 127.0.0.1:52006 &#x2F;connect &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; 0xc0001042c0&#125;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过对代码以及报错信息分析，问题出现在跨域请求上，<br>（跨域请求：跨域是指浏览器不允许当前所在的源请求去访问另一个不一样的源请求，源是指请求协议、域名、端口号，这三个如果有一个不一致就是跨域请求）请自行了解，关键词：跨域请求，同源策略</p><p>使用 spring boot 的时候应该是加注解后自动处理了，但无法知晓原理，不过现在遇到这个问题可以深入了解一下</p><p>首先将发送请求的前端作为客户端，接收请求的作为服务端，<br>而从我们上面的测试已经可以看出，跨域是客户端单方面拒绝响应，服务端是接收请求并处理了的。</p><p>spring boot 后端处理：<br>在 每个 Controller 类上加入 @CrossOrigin 注解<br>或者在 Controller 的基类中加上 @CrossOrigin 注解然后其他 Controller 类就有了这个 @Controller<br> 此时跨域访问就不会报错了。</p><h2 id="三-跨域问题与同源策略"><a class="markdownIt-Anchor" href="#三-跨域问题与同源策略">#</a> 三、跨域问题与同源策略</h2><p>三种方法：JSONP、cors、代理，本文使用代理方法解决</p><h3 id="1jsonp"><a class="markdownIt-Anchor" href="#1jsonp">#</a> 1.JSONP</h3><p>JSONP 是一种非官方的跨域数据交互协议<br>原理：利用 <code>&lt;script&gt;</code>   <code>&lt;img&gt;</code>   <code>&lt;iframe&gt; </code> 等标签可以引入不同域资源的特性，将需要发送的请求的路径作为 src 参数，告知服务端回调函数的函数名<br>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://example.com/data.php?callback=dosomething"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求，现在一般不用，不需要浪费时间去学</p><h3 id="2cors"><a class="markdownIt-Anchor" href="#2cors">#</a> 2.cors</h3><p>Cross-origin resource sharing 跨域资源共享。<br>它是一个新的 W3C 标准，它新增的一组 HTTP 首部字段，允许服务端其声明哪些源站有权限访问哪些资源</p><p>后端允许跨域：<br>配合例子说明：<br><a href="https://blog.csdn.net/guoer9973/article/details/54341637">https://blog.csdn.net/guoer9973/article/details/54341637</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">LDNS</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> origin <span class="token operator">:=</span> req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> origin <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>        w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span>        w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"POST, GET, OPTIONS, PUT, DELETE"</span><span class="token punctuation">)</span>        w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span>            <span class="token string">"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> req<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"OPTIONS"</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 响应http code</span>    w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    query <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Host<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span>    value<span class="token punctuation">,</span> err <span class="token operator">:=</span> ldns<span class="token punctuation">.</span>RAMDBMgr<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">`&#123;"message": ""&#125;`</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//本人没测试过，只是拿来了解原理用的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.ASYNC_SUPPORTED"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> res<span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"POST, GET, OPTIONS, DELETE,PUT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Max-Age"</span><span class="token punctuation">,</span> <span class="token string">"3600"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Content-Disposition,Origin, X-Requested-With, Content-Type, Accept,Authorization,id_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Security-Policy"</span><span class="token punctuation">,</span> <span class="token string">"default-src 'self' 'unsafe-inline'; script-src 'self'; frame-ancestors 'self'; object-src 'none'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"X-Content-Type-Options"</span><span class="token punctuation">,</span> <span class="token string">"nosniff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"X-XSS-Protection"</span><span class="token punctuation">,</span> <span class="token string">"1; mode=block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//本人没测试过，只是拿来了解原理用的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请参考<a href="https://www.jianshu.com/p/26d88431dc1b">这篇文章</a></p><p>需要设置请求返回的响应头 Header,<br> 详细设置内容讲解可以见<a href="https://www.jianshu.com/p/f880878c1398">这篇文章</a></p><p>前端设置跨域并允许携带 cookie：<br>前端请求库一般有两种：流行框架下 react 或者 vue 使用 axios、fetch 这两者都可以，设置允许跨域的方式有点不一样。<br>原生 fetch</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'localhost:3000'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token comment">/*允许携带cookies，默认情况没写这个是不会携带的*/</span>      <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">'include'</span><span class="token punctuation">,</span>      <span class="token comment">/*允许跨域**/</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'cors'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>axios</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token comment">// 对所有 axios 请求允许携带cookie</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 对单独的 axios 请求允许携带cookie</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'localhost:3000'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3使用代理本文使用的方法"><a class="markdownIt-Anchor" href="#3使用代理本文使用的方法">#</a> 3. 使用代理 (本文使用的方法)</h3><p><a href="https://juejin.cn/post/7112373669594136612">https://juejin.cn/post/7112373669594136612</a><br> 已知：</p><blockquote><ol><li>同源策略</li><li>跨域是请求方单方面拒绝响应，接收方是接收请求并处理了。</li><li>代理服务器不是浏览器，它没有同源策略的限制</li></ol></blockquote><p>所以使用代理的解决方法是：<br>1）请求方发送请求给代理服务器，代理成功接收请求<br> 2）代理将请求做了一点修改，把请求方的域名换装成与接收方同源的域名，然后再发送请求给接收方<br> 3）接收方成功接收并处理数据，返回响应给代理，代理成功接收响应<br> 4）代理将响应做了一点修改，把接收方的域名换装成与请求方同源的域名，然后再发送给请求方<br> 5）请求方成功接收响应</p><p>vue 配置代理的方法：<br><a href="https://blog.csdn.net/qq_45787691/article/details/128074655">https://blog.csdn.net/qq_45787691/article/details/128074655</a></p><p>这里我使用 vite 构建的项目，故使用 vite 配置代理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token comment">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//以上为其他配置</span>  <span class="token comment">//代理配置</span>  <span class="token literal-property property">server</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token string-property property">'/api'</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">//https: true, // 默认是false, 默认就是http协议，true将http协议转换为https协议</span>            <span class="token comment">// 配置需要代理的路径 --> 这里的意思是代理 http://localhost:默认端口/api/后的所有路由</span>            <span class="token literal-property property">target</span><span class="token operator">:</span><span class="token string">'http://127.0.0.1:9090'</span><span class="token punctuation">,</span><span class="token comment">//目标服务器地址</span>            <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//允许跨域</span>            <span class="token literal-property property">ws</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//允许websocket跨域</span>            <span class="token comment">// 把路径中的 /api都替换为空的字符串</span>            <span class="token comment">// 因为服务端地址里面是没有api字段的，api只是为了区别需要代理的路径，如果服务端有api字段则不需要替换</span>            <span class="token function-variable function">rewrite</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span><span class="token operator">=></span>path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用代理与 axios</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    msg<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">,</span>        reply<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"2"</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"1111111"</span><span class="token punctuation">)</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/connect"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//console.log("222222")</span>        <span class="token comment">//alert("000000")</span>        reply<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终于成功了，注意 res 是一个对象，我们将它转换为字符串</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"data"</span><span class="token operator">:</span><span class="token string">"asdfghjkl"</span><span class="token punctuation">,</span><span class="token property">"status"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token property">"statusText"</span><span class="token operator">:</span><span class="token string">"OK"</span><span class="token punctuation">,</span><span class="token property">"headers"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"access-control-allow-origin"</span><span class="token operator">:</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token property">"connection"</span><span class="token operator">:</span><span class="token string">"close"</span><span class="token punctuation">,</span><span class="token property">"content-length"</span><span class="token operator">:</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token property">"content-type"</span><span class="token operator">:</span><span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">,</span><span class="token property">"date"</span><span class="token operator">:</span><span class="token string">"Mon, 09 Jan 2023 08:41:30 GMT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"config"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"transitional"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"silentJSONParsing"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"forcedJSONParsing"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"clarifyTimeoutError"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"adapter"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"xhr"</span><span class="token punctuation">,</span><span class="token string">"http"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"transformRequest"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token null keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"transformResponse"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token null keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"timeout"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"xsrfCookieName"</span><span class="token operator">:</span><span class="token string">"XSRF-TOKEN"</span><span class="token punctuation">,</span><span class="token property">"xsrfHeaderName"</span><span class="token operator">:</span><span class="token string">"X-XSRF-TOKEN"</span><span class="token punctuation">,</span><span class="token property">"maxContentLength"</span><span class="token operator">:</span><span class="token number">-1</span><span class="token punctuation">,</span><span class="token property">"maxBodyLength"</span><span class="token operator">:</span><span class="token number">-1</span><span class="token punctuation">,</span><span class="token property">"env"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"headers"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"Accept"</span><span class="token operator">:</span><span class="token string">"application/json, text/plain, */*"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"/api/connect"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"request"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个返回是完整的 http 响应，我们只需要响应的数据 data 即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">reply<span class="token punctuation">.</span>body <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样后端只需要请求的内容</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请求：%v"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然我们只是调用了方法，请求内容为空，控制台打印</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue初学笔记-单文件组件</title>
      <link href="/2022/12/19/vue%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0-%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/12/19/vue%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0-%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="参考项目结构"><a class="markdownIt-Anchor" href="#参考项目结构">#</a> 参考项目结构</h1><p><a href="http://doc.ruoyi.vip/ruoyi-vue/">royi 前后端分离的 vue 项目</a><br>在 vue 项目的 src 文件夹下</p><pre class="line-numbers language-none"><code class="language-none">|_src    |_api    |_assets    |_components    |_directive    |_icons    |_layout    |_plugins    |_router    |_store    |_styles    |_utils    |_views        app.vue    main.js    permission.js    setting.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>api</strong>：接口文件夹，存放对数据接口封装的方法（前后端交互的接口，此处需要声明前端需要使用的方法，该方法在后端的 URL 路径，请求方式（get、post 等），参数）。前端在处理业务需要调用后端方法时，import 此处 api 文件夹里相应 js 文件里的方法，这个方法通过 url，请求方式与参数与后端建立映射。<br><strong>assets</strong>：静态资源文件夹，存放图片，css 样式等资源<br><strong> components</strong>：组件库文件夹，存放组件（一些可复用，非独立的页面），也可以创建完整页面，但一般完整页面会在 views 文件夹编写<br><strong> directive</strong>：指令文件夹，可以在这里自定义像 v-for、v-if 之类的指令以供使用<br><a href="https://blog.csdn.net/wuj1935/article/details/120705144"> https://blog.csdn.net/wuj1935/article/details/120705144</a></p><p><strong>icons</strong>：图标文件夹<br><strong> layout</strong>：公共布局组件文件，如项目页面顶部栏区域、侧边导航栏 (大部分页面公共的布局)<br><strong>plugins</strong>: 插件文件夹，自定义插件<br><strong> router</strong>: 路由配置文件，存放路由跳转的配置信息，路由用于设定访问路径，并将路径和组件映射起来，访问对应的路径就会跳转到相应的页面（组件）<br><a href="https://blog.csdn.net/wulala_hei/article/details/80488727">vue 路由</a><br><strong> store</strong>：存放 vuex 为 vue 专门开发的状态管理器<br><strong> styles</strong>：全局样式文件<br><strong> utils</strong>: 工具包文件夹，存放工具函数<br><strong> views</strong>：视图文件夹，存放各个页面的 vue 文件<br><strong> app.vue</strong>：项目的主组件，页面入口文件 ，所有页面都在 app.vue 下进行切换，app.vue 负责构建定义及页面组件归集<br><strong> main.js</strong>: 实例化 Vue、放置项目中经常会用到的插件和 CSS 样式、存储全局变量<br><strong> permission.js</strong>: 权限管理<br><strong> setting.js</strong>: 配置<br><a href="https://juejin.cn/post/7041506596597432334">配置篇 (settings.js)</a></p><hr><p>一般来说，我们只需要了解 api、router、views 文件夹、app.vue、main.js 的内容</p><h2 id="xxxvue文件单文件组件sfc"><a class="markdownIt-Anchor" href="#xxxvue文件单文件组件sfc">#</a> xxx.vue 文件（单文件组件 / SFC）</h2><p><a href="https://cn.vuejs.org/api/sfc-spec.html">vue 官方文档 - 单文件组件语法定义</a><br><a href="https://cn.vuejs.org/guide/scaling-up/sfc.html"> vue 官方文档 - 应用规模化 - 单文件组件</a><br><a href="https://blog.csdn.net/XOIIUUZZ/article/details/103095298"> https://blog.csdn.net/XOIIUUZZ/article/details/103095298</a><br> 首先我们需要了解一下一个 vue 文件一般由哪些部分组成<br>单个 vue 文件被称为单文件组件（Single-File Component，缩写为 SFC），其内容为 html、css、js 的延伸<br> Vue SFC 是一个框架指定的文件格式，因此必须交由 @vue/compiler-sfc 编译为标准的 JavaScript 和 CSS，一个编译后的 SFC 是一个标准的  <code>JavaScript(ES) 模块</code></p><p>一个.vue 文件主要有 3 个部分<br> <code>&lt;template&gt;</code>  显示的内容 <code>&lt;/template&gt;</code> —— 模板（或称为视图）<br> <code>&lt;script&gt;</code>  执行的功能（业务逻辑） <code>&lt;/script&gt;</code> —— 逻辑<br> <code>&lt;style&gt;</code>  显示的样式 <code>&lt;/style&gt;</code> —— 样式<br><strong>官网示例</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"example"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'Hello world!'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token punctuation">.</span>example <span class="token punctuation">&#123;</span>  <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>custom1<span class="token operator">></span>  This could be e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> documentation <span class="token keyword">for</span> the component<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>custom1<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="template"><a class="markdownIt-Anchor" href="#template">#</a> template</h3><p><code>&lt;template&gt;&lt;/template&gt;</code>  语块包裹的内容将会被提取、传递给 @vue/compiler-dom，预编译为 JavaScript 渲染函数，并附在导出的组件上作为其 render 选项（vue 渲染页面的一种方式）。<br>我们来看一下示例中的简单的 template 视图层</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先是一组 <code>&lt;div&gt;</code>  标签，表示包含的内容是一个独立的部分，标签里的内容作为一个整体，有福同享，有难同当。</p><p><code>class</code>  是表示样式的类型，其在 <code>&lt;div&gt;</code>  的尖括号表明 <code>&lt;div&gt;</code>  里包含的内容都会应用到该样式，那么它所说的样式类型是 &quot;example&quot;, 这个样式来源里我们在 <code>&lt;style&gt;&lt;/style&gt;</code>  所定义的样式</p><p>最后让我们看看这个独立部分里面的内容 <code>&#123;&#123; msg &#125;&#125;</code> ，这里的 <code>&#123;&#123;&#125;&#125;</code>  叫做文本插值，使用 &quot;Mustache&quot; 语法，它与 <code>script</code>  标签里定义的 msg 的数据绑定， <code>&#123;&#123;msg&#125;&#125;</code>  会被替代为 msg 的值’Hello world!’，并且保持同步更新</p><p>在这基础之上，我们还可以给这个 <code>&lt;div&gt;</code>  块加上一个身份标识 id</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当需要用到该部分的内容时，即可通过 &quot;app&quot; 这个 id 来引用</p><h3 id="script"><a class="markdownIt-Anchor" href="#script">#</a> script</h3><p><code>&lt;script&gt;&lt;/script&gt;</code>  包裹的是脚本代码，会作为 es 模块执行，进行业务逻辑的处理</p><blockquote><p>ECMAScript 模块（简称 ES 模块）是 2015 年推出的 JavaScript 中代码重用的机制</p></blockquote><p>我们来看一下示例中的简单的 script 逻辑层</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'Hello world!'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>export 主要用于对外输出本模块变量的接口，一个文件就可以被理解为一个模块，首先是定义数据对象，使用对象来存放数据。js 中 {} 里的内容表示一个对象，在这里有两种写法，一种是直接定义一个对象，一种是通过一个函数返回一个 data 对象，基本都用后者，原因参考如下<br><a href="https://juejin.cn/post/7002584686232862734"> Vue 中的 data 是什么</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//直接定义</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数返回值</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除 data 之外，script 层里还可以写其他内容<br><a href="https://juejin.cn/post/6844903796481458183">参考:vue script 结构</a></p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 组件的方法</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// watch擅长处理的场景：一个数据影响多个数据</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// computed擅长处理的场景：一个数据受多个数据影响</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">beforeCreate</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">beforeMount</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在挂载开始之前被调用：相关的 render 函数首次被调用。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 编译好的HTML挂载到页面完成后执行的事件钩子</span>    <span class="token comment">// el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</span>    <span class="token comment">// 此钩子函数中一般会做一些ajax请求获取数据进行数据初始化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Home done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">beforeUpdate</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">updated</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</span>    <span class="token comment">// 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</span>    <span class="token comment">// 该钩子在服务器端渲染期间不被调用。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">beforeDestroy</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 实例销毁之前调用。在这一步，实例仍然完全可用。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">destroyed</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 script 中除了 export（导出）外，还有 import（导入），举个例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//从某路径下的show.vue文件导入showMsg()方法,该方法会显示括号里参数的内容</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> showMsg <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/api/show"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'Hello world!'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//实例已经创建完成之后被调用,即当你打开这个页面时就会使用</span>    <span class="token comment">//this.showHello()表示该组件方法method里的里的showHello()</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">showHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//调用import进来showMsg,参数this.Msg为该组件数据data里的Msg</span>      <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当打开一个页面时会创建一个 vue 实例，调用 created (), 里面又调用了 method 里的 showMsg 方法，里面又调用了导入进来的 showMsg 方法，其参数来源于 data 里的 Msg，而 Msg 又会与 template 里的内容绑定</p><p>除了导入方法，还可以导入组件，官网原话</p><blockquote><p>Vue SFC 是一个框架指定的文件格式，因此必须交由 @vue/compiler-sfc 编译为标准的 JavaScript 和 CSS，一个编译后的 SFC 是一个标准的 JavaScript (ES) 模块，这也意味着在构建配置正确的前提下，你可以像导入其他 ES 模块一样导入 SFC：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'./MyComponent.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    MyComponent  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如说我们已经写好了一个 MyComponent.vue 文件（单文件组件），并且在其他 vue 文件中想要复用这个组件，import 后在 template 层使用 <code>&lt;MyComponent&gt;&lt;/MyComponent&gt;</code>  即可</p><h3 id="style"><a class="markdownIt-Anchor" href="#style">#</a> style</h3><p><code>&lt;style&gt;&lt;/style&gt;</code>  包裹的是样式，可以使用 scoped 或 module attribute 来帮助封装当前组件的样式，在 template 层使用时 class=&quot;&quot; 即可使用样式<br>同样看官网示例中 <code>&lt;style&gt;</code>  标签里的内容</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.example</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>样式名为 example，在 template 中使用该样式时加上 class=&quot;example&quot; 即可<br>此外在标签中可以使用 scoped 等帮助封装当前组件的样式<br>例如 <code>&lt;style scoped&gt;&lt;/style&gt;</code>  表明该 CSS 样式只能作用于当前的组件<br><a href="https://cn.vuejs.org/api/sfc-css-features.html">单文件组件 CSS 功能</a></p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结">#</a> 小结</h2><p>一个 vue 文件基本上就由模板、逻辑与样式三部分组成，模板定义了一个个独立的模块与内容，样式决定了这些模块的外观，逻辑描述模板里的内容如何呈现。<br>至此单个 vue 文件的逻辑基本已理清， 但要写好一个界面，一个好看的界面还有很多细节需要慢慢地去熟悉，对于 vue 还要搞清 router 路由，各个页面之间的逻辑关系，且听下回分解</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot-mybatis开发速成指南</title>
      <link href="/2022/12/01/spring%20boot-mybatis%E5%BC%80%E5%8F%91%E9%80%9F%E6%88%90%E6%8C%87%E5%8D%97/"/>
      <url>/2022/12/01/spring%20boot-mybatis%E5%BC%80%E5%8F%91%E9%80%9F%E6%88%90%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h1><p><strong>本文的目的</strong>：了解一个 spring boot 项目结构的关系，知道我们应该在哪个部分做什么事</p><h2 id="参考项目结构"><a class="markdownIt-Anchor" href="#参考项目结构">#</a> 参考项目结构</h2><pre class="line-numbers language-none"><code class="language-none">|_java.com.cy.store    |_aop    |_config    |_controller    |_entity    |_interceptor    |_mapper    |_service        |_ex        |_impl    |_util    |_vo    XXXApplication|_resource    |_mapper    |_static    |_templates    application.yml&#x2F;application.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同项目项目结构不一样，但一般来讲，理清 controller 控制层、service 业务逻辑层、mapper（dao）数据访问层三层关系即可<br><a href="https://www.bilibili.com/video/BV1bf4y1V7Bx/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=195ead58c7d9bcfe9285069f7b6015eb">推荐项目学习</a>该视频下方有热心小伙伴的文档笔记整理<br>个人认为只看一个功能即可，其他大同小异，我只了解完用户注册剩下的大概看看就行了，主要是了解一个 spring boot 项目的整体思路</p><h2 id="三层关系"><a class="markdownIt-Anchor" href="#三层关系">#</a> 三层关系</h2><p><a href="https://blog.csdn.net/Mcdull__/article/details/117450764">controller、service、mapper 三层关系梳理 1</a><br><a href="https://blog.csdn.net/qq_41026669/article/details/107479927">controller、service、mapper 三层关系梳理 2</a><br><a href="https://blog.csdn.net/LL142857/article/details/89242816"> 适合理解的比喻</a></p><h1 id="数据库表设计"><a class="markdownIt-Anchor" href="#数据库表设计">#</a> 数据库（表）设计</h1><p><a href="https://www.bilibili.com/video/BV1w44y1576p/?spm_id_from=333.337.search-card.all.click&amp;vd_source=195ead58c7d9bcfe9285069f7b6015eb">快速学习数据库设计步骤</a></p><h1 id="实体层编写实体类"><a class="markdownIt-Anchor" href="#实体层编写实体类">#</a> 实体层（编写实体类）</h1><p>entity（或叫 model）实体，该层存放实体类，属性值与数据库中的属性值保持一致，实现 set 和 get 方法，可使用 @Data 注解自动生成</p><p>多个类拥有同一些属性，可以把这些属性抽取成一个公共基类这样方便我们管理。例如数据库许多实体类都需要有日志相关的四个属性：创建者和时间以及修改者和时间，则可先创建包含这些属性的基类，然后其他实体类再继承这个基类</p><h1 id="持久层-java对象与sql映射mapper接口与xml映射文件绑定"><a class="markdownIt-Anchor" href="#持久层-java对象与sql映射mapper接口与xml映射文件绑定">#</a> 持久层 （java 对象与 sql 映射）(Mapper 接口与 xml 映射文件绑定)</h1><p><a href="https://blog.csdn.net/meism5/article/details/108970550">sql 与 xml 绑定</a><br> mapper（或叫 dao），为 <code>映射</code> 的意思；dao（data access object），数据访问对象</p><hr><p><code>持久层</code> 的意思是使数据可以永久保持地存储，可以直接理解为对数据库的 CRUD 等操作<br>持久层就是把持久的动作封装成一个独立的层，这是为了降低功能代码之间的关联。创建一个更清晰的抽象，提高代码的内聚力，降低代码的耦合度，提高可维护性和复用性.</p><hr><p><code>Mybatis</code>  对 jdbc 的操作数据库的过程进行封装，通过 xml 或注解的方式将要执行的各种 statement（statement、preparedStatemnt）配置起来，并通过 java 对象和 statement 中的 sql 进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射成 java 对象并返回。</p><hr><p>总之：</p><blockquote><ol><li>确定好需要写的 sql;</li><li>在 java 文件夹下的 mapper 包编写持久层接口（Mapper 接口）： <code>XxxxMapper</code> , 在接口中定义需要实现的抽象方法；</li><li>在 resource 文件夹下的 mapper 包编写 xml 映射文件： <code>XxxxMapper.xml</code> ，编写对应 Mapper 接口的方法的 sql（抽象方法的映射配置），接口与 xml 文件绑定</li></ol></blockquote><p>1）Mapper 接口与 XML 文件的绑定是通过 XML 里 mapper 标签的 namespace 值与 Mapper 接口的 包路径。接口名 进行绑定<br> 2） Mapper 接口的方法名与 XML 文件中的 sql、select、insert、update、delete 标签的 id 参数值进行绑定</p><p>在配置文件中说明 xml 配置：mybatis.mapper-locations=classpath:mapper/*.xml</p><hr><h1 id="业务逻辑层"><a class="markdownIt-Anchor" href="#业务逻辑层">#</a> 业务逻辑层</h1><p><a href="https://blog.csdn.net/bookssea/article/details/107488749">DAO 层和 Service 层的理解</a></p><p>service 服务，此处翻译为业务比较合适，service 层处理业务逻辑<br> mapper 层是对数据库的操作，不涉及业务逻辑，具体是对某张表的增删查改</p><p>service 是业务逻辑，一个业务（功能）对应多项操作，需要有数据的处理流程和逻辑</p><pre><code>流程：先做什么，再做什么逻辑：能做什么，不能做什么</code></pre><hr><p><strong>例：用户注册</strong><br> mapper 层： <code>UserMapper</code>  中定义 <code>insert()</code>  方法（插入用户数据）、 <code>findByUsername()</code>  方法（根据用户名查询数据）<br>service 层： <code>UserService</code>  中定义的一个业务逻辑（功能）为 <code>reg()</code> （用户注册）， <code>reg()</code>  在数据库层面的理解其实就是 <code>insert()</code> ，但是 <code>insert（）</code> 不涉及数据处理流程和逻辑</p><p>reg () 的业务逻辑：先根据输入的用户名查询是否已存在用户数据（调用 <code>UserMapper</code>  的 <code>findByUsername()</code> ），如果不存在则插入用户数据（调用用 <code>UserMapper</code>  的 <code>insert()</code> ）, 如果存在则抛出用户已存在的异常。</p><p>在 service 包中，先在 <code>IUserService接口</code> 中定义 <code>reg()</code>  的抽象方法，然后在 <code>service.impl</code> （implement：实现）包中的 <code>UserServiceImpl</code>  实现类中实现 <code>reg()</code>  方法</p><hr><p>总之：</p><blockquote><ol><li>规划可能出现的异常，如用户名重复等，写在 Service.ex 包下</li><li>直接在在 Service 包下编写业务层接口（service 接口）： <code>IXxxxService</code> ，该命名方式开头的 I 表示接口，接口中定义要实现的抽象方法 —— 业务逻辑（功能）</li><li>在 service.impl 包下编写 service 接口的实现类： <code>XxxxServiceImpl</code> ，实现相应 service 接口中的抽象方法</li></ol></blockquote><p><a href="%E5%BD%93%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%B6%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%A0%E9%99%A4%E6%88%96%E4%BF%AE%E6%94%B9%E6%97%B6%EF%BC%8C%E6%96%B9%E6%B3%95%E4%B8%8A%E4%B8%80%E5%AE%9A%E8%A6%81%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3@Transactional%EF%BC%8C%E5%90%A6%E5%88%99%E4%BC%9A%E6%89%A7%E8%A1%8C%E4%B8%8D%E6%88%90%E5%8A%9F%E3%80%82"></a></p><h1 id="控制层"><a class="markdownIt-Anchor" href="#控制层">#</a> 控制层</h1><p><a href="https://blog.csdn.net/kicinio/article/details/110806977">controller 的注解 1</a><br><a href="https://blog.csdn.net/jiahao1186/article/details/90634764">controller 的注解 2</a><br><a href="https://www.zhihu.com/question/434640634">controller 请求与响应</a><br><a href="https://blog.csdn.net/qq_43291207/article/details/110789568"> controller 请求与响应生动讲解</a><br><a href="https://blog.csdn.net/qq_43291207/article/details/110790415?spm=1001.2014.3001.5502"> controller 请求与响应生动讲解（续）</a></p><p>Controller , 控制器，与  <code>前端和service层</code>  交互，<br>把用户提交来的请求通过对 URL 的匹配，分配不同的接收器，再进行处理，然后向用户返回结果。</p><p>从 HTTP 请求中获取信息，提取参数，并将其分发给不同的处理服务（service 层），根据实际需求调用不同的 service 定义的方法来处理不同业务，并向前端返回 service 层处理后的数据，他的重点就在于如何从 HTTP 请求中获得信息，提取参数，并分发给不同的处理服务。接收和响应请求，校验数据</p><p>controller 负责管理 service，service 负责实施</p><hr><p><strong>例：用户注册</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"reg"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JsonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">reg</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 调用业务对象执行注册</span>        userService<span class="token punctuation">.</span><span class="token function">reg</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//省略其他代码</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 UserController 中实例化 <code>IUserService</code>  对象 <code>userService</code></p><p><code>@RequestMapping(&quot;users&quot;)</code> 、 <code>@RequestMapping(&quot;reg&quot;)</code>  请求映射，将 http 请求路径映射到 Controller 方法上</p><p>当用户在前端点击注册后，前端请求通过…/users/reg 的路径发送给后端的 UserController，执行 <code>@RequestMapping(&quot;reg&quot;)</code>  下的 <code>reg()</code>  方法，注意这里的 reg () 是 Controller 层的，不负责 “用户注册” 这个业务的实现，它会调用 Service 层真正实现 “用户注册” 业务逻辑的 <code>userService.reg()</code> ;<br> 然后 <code>userService.reg()</code>  调用 mapper 层的数据库操作方法 <code>findByUsername()</code>  和 <code>insert()</code> ，根据映射的 xml 文件通过 Mybatis 执行 sql 连接操作数据库，把数据写入数据库，完成该业务逻辑，但还需要返回响应结果</p><blockquote><p><code>.../users</code>  请求路径是映射到 <code>@RequestMapping(&quot;users&quot;)</code>  下面的 UserController 类；<br> <code>.../users/reg</code>  请求路径映射到 <code>@RequestMapping(&quot;users&quot;)</code>  之下的 <code>@RequestMapping(&quot;reg&quot;)</code>  下面的 reg 方法</p></blockquote><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java">再看一下上面的<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>JsonResult</code>  是自定义的响应结果类，统一返回结果<br>上面的 <code>200</code>  表示正常，即注册成功，如果成功执行了 reg 方法，则会创建一个 JsonResult 类的对象，其中 state（状态码）属性值设置为 200</p><p>自定义的 JsonResult 类包含属性 state（状态码）、message（状态描述信息）、data（数据），这里注册只需要知道是否操作成功就只返回状态码，如查询等业务则会还需要返回数据等</p><p>下面看一下前端代码，这个例子的前端用的是 Thymeleaf 模板引擎</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn-reg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/users/reg"</span><span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form-reg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// location.href = "login.html";</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册失败！"</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四行的 url 即为上面提到前端的请求路径，该请求为 post 请求、提交数据，数据来源于 id 等于第六行 <code>&quot;#form-reg&quot;</code>  的表单（form），内容为用户注册所需要的信息，与 User 类属性一致，然后转化为 json 对象传给 Controller, 该对象（实参）在 Controller 中为 User 类的对象 user（形参）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">JsonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">reg</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后端的 Controller 接收该请求，当处理完请求后返回结果给前端<br>如上 <code>success: function(json)</code>  表示请求成功并返回信息（响应请求），这里括号里的 <code>json</code>  就是后端 Controller 返回的结果，即一个 JsonResult 类的对象（实参），其 state 属性值为 200，在前端中这个对象被命名为 json（形参），那么 Controller 返回结果成功则 json.state==200.</p><p>以上即为前后端交互的流程，Controller 负责接收请求和响应请求，调用 Service 处理业务，但自身不涉及业务逻辑</p><p>总之：</p><blockquote><ol><li>考虑要实现一个业务逻辑，用户在前端界面操作，该操作会从前端向后端传递什么，后端处理完该业务逻辑需要返回给前端什么</li><li>设计请求与响应，例：<br>请求路径：/users/reg<br> 请求参数：User user<br> 请求类型：POST<br> 响应结果：JsonResult<Void></li><li>在 Controller 包下编写控制器类： <code>XxxxController</code> ，在类中实例化需要调用的 service 对象：xxxxService</li><li><code>XxxxController</code>  中编写要实现业务的控制方法，包括请求参数与响应结果（返回值），调用 xxxxService 对象的 xxx () 方法</li><li>使用 <code>@RequestMapping</code>  等注解映射控制方法的请求路径，实现前后端的交互</li></ol></blockquote><h1 id="总结"><a class="markdownIt-Anchor" href="#总结">#</a> 总结</h1><p>用户操作前端界面，需要实现某种业务–前端发送请求给后端 controller–controller 接收请求，调用 service 处理该业务 --service 处理业务调用 mapper 的数据库操作方法 --mapper 方法与 mapper.xml 存在映射关系；–Mybatis 执行 sql–service 处理业完毕–controller 返回响应结果–前端返回反馈给用户</p><pre class="line-numbers language-none"><code class="language-none">用户操作前端界面，需要实现某种业务（&lt;?&gt; 操作内容）&#123;    &#x2F;&#x2F;前端api接口    &lt;操作反馈&gt; 前端发送请求给后端controller ()&#123;        &lt;?&gt; 请求路径        &lt;?&gt; 请求参数        &lt;?&gt; 请求类型        &lt;?&gt; 响应结果        &#x2F;&#x2F;controller层        &lt;响应结果&gt; controller接收请求，调用service处理该业务 (&lt;?&gt; 请求参数)&#123;            &#x2F;&#x2F;service层            service处理业务时，调用mapper的数据库操作方法 (&lt;?&gt; 请求参数)&#123;                &#x2F;&#x2F;mapper层                mapper方法与mapper.xml存在映射关系；                &#x2F;&#x2F;resource文件夹下的mapper的xml文件                执行sql；            &#125;        &#125;    &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>考虑的时候可以是前端 —controller—service—dao—database ；<br>写代码的时候则 database—dao—service—controller— 前端</p><p><strong>总而言之，言而总之</strong><br>在 mapper 层</p><blockquote><ol><li>确定好需要写的 sql;</li><li>在 java 文件夹下的 mapper 包编写持久层接口（Mapper 接口）： <code>XxxxMapper</code> , 在接口中定义需要实现的抽象方法；</li><li>在 resource 文件夹下的 mapper 包编写 xml 映射文件： <code>XxxxMapper.xml</code> ，编写对应 Mapper 接口的方法的 sql（抽象方法的映射配置），接口与 xml 文件绑定</li></ol></blockquote><p>在 service 层</p><blockquote><ol><li>规划可能出现的异常，如用户名重复等，写在 Service.ex 包下</li><li>直接在在 Service 包下编写业务层接口（service 接口）： <code>IXxxxService</code> ，该命名方式开头的 I 表示接口，接口中定义要实现的抽象方法 —— 业务逻辑（功能）</li><li>在 service.impl 包下编写 service 接口的实现类： <code>XxxxServiceImpl</code> ，实现相应 service 接口中的抽象方法</li></ol></blockquote><p>在 controller 层</p><blockquote><ol><li>考虑要实现一个业务逻辑，用户在前端界面操作，该操作会从前端向后端传递什么，后端处理完该业务逻辑需要返回给前端什么</li><li>设计请求与响应，例：<br>请求路径：/users/reg<br> 请求参数：User user<br> 请求类型：POST<br> 响应结果：JsonResult<Void></li><li>在 Controller 包下编写控制器类： <code>XxxxController</code> ，在类中实例化需要调用的 service 对象：xxxxService</li><li><code>XxxxController</code>  中编写要实现业务的控制方法，包括请求参数与响应结果（返回值），调用 xxxxService 对象的 xxx () 方法</li><li>使用 <code>@RequestMapping</code>  等注解映射控制方法的请求路径，实现前后端的交互</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/28/hello-world/"/>
      <url>/2022/11/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
