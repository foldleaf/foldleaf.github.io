{"_path":"/essay/5.go与前端的json数据交互笔记","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"go与前端的json数据交互笔记","description":"JSON 是存储和交换文本信息的语法，类似 XML。\nJSON 比 XML 更小、更快，更易解析。\nJSON 易于人阅读和编写。\nC、Python、C++、Java、PHP、Go 等编程语言都支持 JSON。","subtitle":"Json data interaction between Go and Frontend","index":5,"date":"2023-01-30 00:00:02","lunar_date":"正月初九","year":2023,"month":"01","month_en":"Jan","day":"30","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/005.jpg","categories":"golang","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"JSON 是存储和交换文本信息的语法，类似 XML。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nJSON 比 XML 更小、更快，更易解析。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nJSON 易于人阅读和编写。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nC、Python、C++、Java、PHP、Go 等编程语言都支持 JSON。"}]},{"type":"element","tag":"h1","props":{"id":"go-与前端的-json-数据交互"},"children":[{"type":"text","value":"Go 与前端的 JSON 数据交互"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"golang处理json数据"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"encoding/json"}]},{"type":"text","value":"包中的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"json.Unmarshal"}]},{"type":"text","value":"与"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"json.Marshal"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"json.Unmarshal"}]},{"type":"text","value":":解析json的byte类型数据，转换成结构体对象"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"json.Marshal"}]},{"type":"text","value":":将结构体对象转换成json的byte类型数据"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type Message struct {\n    //后面的json字段与需要对应的json格式的字段一致,不一致则json与结构体对象无法互相转换\n    //例：{\"address\":\"127.0.0.1:40000\"，\"body\":\"1234\"}\n    \n    Address string `json:\"address\"`\n    Body    string `json:\"body\"`\n}\n//（a *App）是使用wails的要求，可以无视\nfunc (a *App) NewConnection(Msg string) string {\n    //接收前端json字符串Msg\n    fmt.Println(\"字符串\", Msg)\n    //结构体对象 mes\n    var mes Message\n    //将json字符串解析，Unmarshal解析需要先将json数据转为[]byte类型，返回值是错误类型\n    //解析后转换成结构体对象mes\n    err := json.Unmarshal([]byte(Msg), &mes)\n    if err != nil {\n        println(\"ERROR:\", err)\n    }\n    fmt.Println(\"ERROR\", err)\n    fmt.Println(\"接收json\", mes.Address)\n    \n    mes.Address = \"111\"\n    mes.Body = \"222\"\n    //Marshal将对象转换成json，返回[]byte和error\n    mesJson, _ := json.Marshal(mes) \n    fmt.Println(\"转换json\", string(mesJson))\n    //返回json字符串\n    return string(mesJson)\n\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Message struct {\n    //后面的json字段与需要对应的json格式的字段一致,不一致则json与结构体对象无法互相转换\n    //例：{\"address\":\"127.0.0.1:40000\"，\"body\":\"1234\"}\n    \n    Address string `json:\"address\"`\n    Body    string `json:\"body\"`\n}\n//（a *App）是使用wails的要求，可以无视\nfunc (a *App) NewConnection(Msg string) string {\n    //接收前端json字符串Msg\n    fmt.Println(\"字符串\", Msg)\n    //结构体对象 mes\n    var mes Message\n    //将json字符串解析，Unmarshal解析需要先将json数据转为[]byte类型，返回值是错误类型\n    //解析后转换成结构体对象mes\n    err := json.Unmarshal([]byte(Msg), &mes)\n    if err != nil {\n        println(\"ERROR:\", err)\n    }\n    fmt.Println(\"ERROR\", err)\n    fmt.Println(\"接收json\", mes.Address)\n    \n    mes.Address = \"111\"\n    mes.Body = \"222\"\n    //Marshal将对象转换成json，返回[]byte和error\n    mesJson, _ := json.Marshal(mes) \n    fmt.Println(\"转换json\", string(mesJson))\n    //返回json字符串\n    return string(mesJson)\n\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前端处理json数据"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JSON.stringify"}]},{"type":"text","value":":将json对象转换成json字符串"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JSON.parse"}]},{"type":"text","value":":将json字符串转换成json对象"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"<script setup>\nimport { reactive } from 'vue'\n//使用wails的要求，就是直接引用go的NewConnection函数\nimport { NewConnection } from '../../wailsjs/go/main/App'\n//消息json对象\nconst msg = reactive({\n    address: \"\",\n    body: \"\"\n})\n//使用const后不能改变对象，但可以改变对象的属性\n//例msg=JSON.parse(result),msg不会发生变化，但可以使其属性发生变化 msg.body=222\n//如要使对象能够改变，请使用let定义对象\nlet reply=reactive({\n    address:\"1\",\n    body:\"1\"\n})\n\nfunction newConnection() {\n    //后端不能识别json对象，使用JSON.stringify将json对象转换成json字符串\n    NewConnection(JSON.stringify(msg)).then(result => {\n        msg.body=result\n        //使用JSON.parse将json字符串转换成json对象\n        reply=JSON.parse(result)\n        alert(JSON.stringify(reply))\n        \n    })\n\n}\n\n</script>\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script setup>\nimport { reactive } from 'vue'\n//使用wails的要求，就是直接引用go的NewConnection函数\nimport { NewConnection } from '../../wailsjs/go/main/App'\n//消息json对象\nconst msg = reactive({\n    address: \"\",\n    body: \"\"\n})\n//使用const后不能改变对象，但可以改变对象的属性\n//例msg=JSON.parse(result),msg不会发生变化，但可以使其属性发生变化 msg.body=222\n//如要使对象能够改变，请使用let定义对象\nlet reply=reactive({\n    address:\"1\",\n    body:\"1\"\n})\n\nfunction newConnection() {\n    //后端不能识别json对象，使用JSON.stringify将json对象转换成json字符串\n    NewConnection(JSON.stringify(msg)).then(result => {\n        msg.body=result\n        //使用JSON.parse将json字符串转换成json对象\n        reply=JSON.parse(result)\n        alert(JSON.stringify(reply))\n        \n    })\n\n}\n\n</script>\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-html"],"code":"<template>\n\n    <div id=\"input\" class=\"input-box\">\n        <input id=\"address\" v-model=\"msg.address\" autocomplete=\"off\" class=\"input\" type=\"text\" />\n        <button class=\"btn\" @click=\"newConnection\">连接</button>\n    </div>\n    <textarea id=\"text\" v-model=\"msg.body\" class=\"text\"></textarea>\n    <textarea id=\"text\" v-model=\"reply.body\" class=\"text\"></textarea>\n\n</template>\n","language":"html","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n\n    <div id=\"input\" class=\"input-box\">\n        <input id=\"address\" v-model=\"msg.address\" autocomplete=\"off\" class=\"input\" type=\"text\" />\n        <button class=\"btn\" @click=\"newConnection\">连接</button>\n    </div>\n    <textarea id=\"text\" v-model=\"msg.body\" class=\"text\"></textarea>\n    <textarea id=\"text\" v-model=\"reply.body\" class=\"text\"></textarea>\n\n</template>\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-css"],"code":"<style scoped>\n.result {\n    height: 20px;\n    line-height: 20px;\n    margin: 1.5rem auto;\n}\n\n.input-box .btn {\n    width: 60px;\n    height: 30px;\n    line-height: 30px;\n    border-radius: 3px;\n    border: none;\n    margin: 0 0 0 20px;\n    padding: 0 8px;\n    cursor: pointer;\n}\n\n.text {\n    width: 200px;\n    height: 200px;\n    line-height: 30px;\n\n}\n</style>\n","language":"css","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<style scoped>\n.result {\n    height: 20px;\n    line-height: 20px;\n    margin: 1.5rem auto;\n}\n\n.input-box .btn {\n    width: 60px;\n    height: 30px;\n    line-height: 30px;\n    border-radius: 3px;\n    border: none;\n    margin: 0 0 0 20px;\n    padding: 0 8px;\n    cursor: pointer;\n}\n\n.text {\n    width: 200px;\n    height: 200px;\n    line-height: 30px;\n\n}\n</style>\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[]}},"_type":"markdown","_id":"content:essay:5.go与前端的json数据交互.md","_source":"content","_file":"essay/5.go与前端的json数据交互.md","_stem":"essay/5.go与前端的json数据交互","_extension":"md"}