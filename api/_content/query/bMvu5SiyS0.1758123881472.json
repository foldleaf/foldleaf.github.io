{"_path":"/essay/6.gin框架","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"Gin框架","description":"Gin是一个使用Go语言开发的Web框架。 它提供类似Martini的API，但性能更佳，速度提升高达40倍。 如果你是性能和高效的追求者, 你会爱上 Gin。","subtitle":"Gin の使い方","index":6,"date":"2023-01-30 00:00:03","lunar_date":"正月初九","year":"2023","month":"01","month_en":"Jan","day":"30","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/006.jpg","categories":"golang","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Gin是一个使用Go语言开发的Web框架。 它提供类似Martini的API，但性能更佳，速度提升高达40倍。 如果你是性能和高效的追求者, 你会爱上 Gin。"}]},{"type":"element","tag":"h1","props":{"id":"gin-简单使用"},"children":[{"type":"text","value":"Gin 简单使用"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这之前我们需要初始化项目"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"go mod init ginstudy\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go mod init ginstudy\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果使用goland应该在项目创建时就会初始化并创建go.mod文件,我使用的vs code需要自己初始化项目"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"gin框架\n"},{"type":"element","tag":"a","props":{"href":"https://gin-gonic.com/zh-cn/docs/","rel":["nofollow"]},"children":[{"type":"text","value":"官方文档"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下载并安装 gin："}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"go get -u github.com/gin-gonic/gin\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go get -u github.com/gin-gonic/gin\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"项目引入gin"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"import \"github.com/gin-gonic/gin\"\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import \"github.com/gin-gonic/gin\"\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc sayHello(c *gin.Context) {\n    //返回和json格式的数据，状态码为200\n    /* gin.H\n    //H is a shortcut for map[string]interface{}   key为string类型，value为任意类型\n    type H map[string]any\n    */\n    c.JSON(200, gin.H{\n        \"message\": \"hello golang\",\n    })\n}\nfunc main() {\n    //创建一个默认的路由引擎 *gin.Engine\n    r := gin.Default()\n    // GET：GET请求方式；  /hello：请求的路径\n    // 当客户端以GET方式请求/hello路径时，会执行后面的函数sayHello\n    r.GET(\"/hello\", sayHello)\n\n    //启动服务,在指定端口监听\n    r.Run(\":9090\")\n}\n\n//运行\n//访问localhost:9090/hello，显示{\"message\":\"hello golang\"}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc sayHello(c *gin.Context) {\n    //返回和json格式的数据，状态码为200\n    /* gin.H\n    //H is a shortcut for map[string]interface{}   key为string类型，value为任意类型\n    type H map[string]any\n    */\n    c.JSON(200, gin.H{\n        \"message\": \"hello golang\",\n    })\n}\nfunc main() {\n    //创建一个默认的路由引擎 *gin.Engine\n    r := gin.Default()\n    // GET：GET请求方式；  /hello：请求的路径\n    // 当客户端以GET方式请求/hello路径时，会执行后面的函数sayHello\n    r.GET(\"/hello\", sayHello)\n\n    //启动服务,在指定端口监听\n    r.Run(\":9090\")\n}\n\n//运行\n//访问localhost:9090/hello，显示{\"message\":\"hello golang\"}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"RESTfulAPI"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在main()中加入以下请求方法"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"    r.GET(\"/book\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"GET\",\n        })\n    })\n\n    r.POST(\"/book\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"POST\",\n        })\n    })\n\n    r.PUT(\"/book\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"PUT\",\n        })\n    })\n\n    r.DELETE(\"/book\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"DELETE\",\n        })\n    })\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    r.GET(\"/book\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"GET\",\n        })\n    })\n\n    r.POST(\"/book\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"POST\",\n        })\n    })\n\n    r.PUT(\"/book\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"PUT\",\n        })\n    })\n\n    r.DELETE(\"/book\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"DELETE\",\n        })\n    })\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"通过浏览器访问只能使用GET和POST请求，使用api测试工具进行测试\napi工具有postman、apipost、apifox等，我这里使用apipost测试"}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[]}},"_type":"markdown","_id":"content:essay:6.gin框架.md","_source":"content","_file":"essay/6.gin框架.md","_stem":"essay/6.gin框架","_extension":"md"}