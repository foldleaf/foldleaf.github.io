{"_path":"/essay/1.spring boot-mybatis开发速成指南","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"spring boot-mybatis开发速成指南","description":"Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\".\nWe take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.","subtitle":"Spring quick guide","index":1,"tag":"技术","tag_en":"TECH","date":"2022-12-01 22:26:10","lunar_date":"霜月初八","year":"2022","month":"12","month_en":"Dec","day":"01","cover":"/img/rabbit/001.jpg","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\".\nWe take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"本文的目的"}]},{"type":"text","value":"：了解一个spring boot项目结构的关系，知道我们应该在哪个部分做什么事"}]},{"type":"element","tag":"h1","props":{"id":"参考项目结构"},"children":[{"type":"text","value":"参考项目结构"}]},{"type":"element","tag":"pre","props":{"code":"|_java.com.cy.store\n    |_aop\n    |_config\n    |_controller\n    |_entity\n    |_interceptor\n    |_mapper\n    |_service\n        |_ex\n        |_impl\n    |_util\n    |_vo\n\n    XXXApplication\n\n|_resource\n    |_mapper\n    |_static\n    |_templates\n\n    application.yml/application.properties\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"|_java.com.cy.store\n    |_aop\n    |_config\n    |_controller\n    |_entity\n    |_interceptor\n    |_mapper\n    |_service\n        |_ex\n        |_impl\n    |_util\n    |_vo\n\n    XXXApplication\n\n|_resource\n    |_mapper\n    |_static\n    |_templates\n\n    application.yml/application.properties\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不同项目项目结构不一样，但一般来讲，理清controller控制层、service业务逻辑层、mapper（dao）数据访问层三层关系即可"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.bilibili.com/video/BV1bf4y1V7Bx/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=195ead58c7d9bcfe9285069f7b6015eb","rel":["nofollow"]},"children":[{"type":"text","value":"推荐项目学习"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n该视频下方有热心小伙伴的文档笔记整理\n个人认为只看一个功能即可，其他大同小异，我只了解完用户注册剩下的大概看看就行了，主要是了解一个spring boot项目的整体思路"}]},{"type":"element","tag":"h1","props":{"id":"三层关系"},"children":[{"type":"text","value":"三层关系"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/Mcdull__/article/details/117450764","rel":["nofollow"]},"children":[{"type":"text","value":"controller、service、mapper三层关系梳理1"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/qq_41026669/article/details/107479927","rel":["nofollow"]},"children":[{"type":"text","value":"controller、service、mapper三层关系梳理2"}]}]},{"type":"element","tag":"h1","props":{"id":"数据库表设计"},"children":[{"type":"text","value":"数据库（表）设计"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.bilibili.com/video/BV1w44y1576p/?spm_id_from=333.337.search-card.all.click&vd_source=195ead58c7d9bcfe9285069f7b6015eb","rel":["nofollow"]},"children":[{"type":"text","value":"快速学习数据库设计步骤"}]}]},{"type":"element","tag":"h1","props":{"id":"实体层编写实体类"},"children":[{"type":"text","value":"实体层（编写实体类）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"entity（或叫model）实体，该层存放实体类，属性值与数据库中的属性值保持一致，实现set和get方法，可使用@Data注解自动生成"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"多个类拥有同一些属性，可以把这些属性抽取成一个公共基类这样方便我们管理。例如数据库许多实体类都需要有日志相关的四个属性：创建者和时间以及修改者和时间，则可先创建包含这些属性的基类，然后其他实体类再继承这个基类"}]},{"type":"element","tag":"h1","props":{"id":"持久层-java对象与sql映射mapper接口与xml映射文件绑定"},"children":[{"type":"text","value":"持久层 （java对象与sql映射）(Mapper接口与xml映射文件绑定)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/meism5/article/details/108970550","rel":["nofollow"]},"children":[{"type":"text","value":"sql与xml绑定"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"mapper（或叫dao），为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"映射"}]},{"type":"text","value":"的意思；"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\ndao（data access object），数据访问对象"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"持久层"}]},{"type":"text","value":"的意思是使数据可以永久保持地存储，可以直接理解为对数据库的CRUD等操作,就是把持久的动作封装成一个独立的层。这是为了降低功能代码之间的关联,创建一个更清晰的抽象,提高代码的内聚力,降低代码的耦合度,提高可维护性和复用性."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Mybatis"}]},{"type":"text","value":" 对jdbc 的操作数据库的过程进行封装,通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总之："}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"确定好需要写的sql;"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在java文件夹下的mapper包编写持久层接口（Mapper接口）："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxMapper"}]},{"type":"text","value":",在接口中定义需要实现的抽象方法;"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在resource文件夹下的mapper包编写xml映射文件："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxMapper.xml"}]},{"type":"text","value":"，编写对应Mapper接口的方法的sql（抽象方法的映射配置），接口与xml文件绑定"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"1）Mapper 接口与 XML 文件的绑定是通过 XML 里 mapper 标签的 namespace 值与 Mapper 接口的 包路径.接口名 进行绑定"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"2） Mapper 接口的方法名与 XML 文件中的 sql、select、insert、update、delete 标签的 id 参数值进行绑定"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在配置文件中说明xml配置：mybatis.mapper-locations=classpath:mapper/*.xml"}]},{"type":"element","tag":"h1","props":{"id":"业务逻辑层"},"children":[{"type":"text","value":"业务逻辑层"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/bookssea/article/details/107488749","rel":["nofollow"]},"children":[{"type":"text","value":"DAO层和Service层的理解"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"service 服务，此处翻译为业务比较合适，service层处理业务逻辑\nmapper层是对数据库的操作，不涉及业务逻辑，具体是对某张表的增删查改"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"service是业务逻辑，一个业务（功能）对应多项操作，需要有数据的处理流程和逻辑"}]},{"type":"element","tag":"pre","props":{"code":"流程：先做什么，再做什么\n逻辑：能做什么，不能做什么\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"流程：先做什么，再做什么\n逻辑：能做什么，不能做什么\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"例：用户注册"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"mapper层："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"UserMapper"}]},{"type":"text","value":"中定义"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"insert()"}]},{"type":"text","value":"方法（插入用户数据）、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"findByUsername()"}]},{"type":"text","value":"方法（根据用户名查询数据）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"service层："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"UserService"}]},{"type":"text","value":"中定义的一个业务逻辑（功能）为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"reg()"}]},{"type":"text","value":"（用户注册），"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"reg()"}]},{"type":"text","value":"在数据库层面的理解其实就是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"insert()"}]},{"type":"text","value":"，但是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"insert（）"}]},{"type":"text","value":"不涉及数据处理流程和逻辑"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"reg()的业务逻辑：先根据输入的用户名查询是否已存在用户数据（调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"UserMapper"}]},{"type":"text","value":"的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"findByUsername()"}]},{"type":"text","value":"），如果不存在则插入用户数据（调用用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"UserMapper"}]},{"type":"text","value":"的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"insert()"}]},{"type":"text","value":"）,如果存在则抛出用户已存在的异常。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在service包中，先在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IUserService接口"}]},{"type":"text","value":"中定义"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"reg()"}]},{"type":"text","value":"的抽象方法，然后在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"service.impl"}]},{"type":"text","value":"（implement：实现）包中的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"UserServiceImpl"}]},{"type":"text","value":"实现类中实现"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"reg()"}]},{"type":"text","value":"方法"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总之："}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"规划可能出现的异常，如用户名重复等，写在Service.ex包下"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"直接在在Service包下编写业务层接口（service接口）："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IXxxxService"}]},{"type":"text","value":"，该命名方式开头的I表示接口，接口中定义要实现的抽象方法——业务逻辑（功能）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在service.impl包下编写service接口的实现类："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxServiceImpl"}]},{"type":"text","value":"，实现相应service接口中的抽象方法"}]}]}]},{"type":"element","tag":"h1","props":{"id":"控制层"},"children":[{"type":"text","value":"控制层"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/kicinio/article/details/110806977","rel":["nofollow"]},"children":[{"type":"text","value":"controller的注解1"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/jiahao1186/article/details/90634764","rel":["nofollow"]},"children":[{"type":"text","value":"controller的注解2"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"a","props":{"href":"https://www.zhihu.com/question/434640634","rel":["nofollow"]},"children":[{"type":"text","value":"controller请求与响应"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/qq_43291207/article/details/110789568","rel":["nofollow"]},"children":[{"type":"text","value":"controller请求与响应生动讲解"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/qq_43291207/article/details/110790415?spm=1001.2014.3001.5502","rel":["nofollow"]},"children":[{"type":"text","value":"controller请求与响应生动讲解（续）"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Controller "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"控制器"}]},{"type":"text","value":"，与前端和service层交互，\n把用户提交来的请求通过对URL的匹配，分配不同的接收器，再进行处理，然后向用户返回结果。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从HTTP请求中获取信息，提取参数，并将其分发给不同的处理服务（service层），根据实际需求调用不同的service定义的方法来处理不同业务，并向前端返回service层处理后的数据,他的重点就在于如何从HTTP请求中获得信息，提取参数，并分发给不同的处理服务。接收和响应请求，校验数据"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"controller负责管理service，service负责实施"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"例：用户注册"}]}]},{"type":"element","tag":"pre","props":{"code":"@RestController\n@RequestMapping(\"users\")\npublic class UserController extends BaseController {\n    @Autowired\n    private IUserService userService;\n\n\n    @RequestMapping(\"reg\")\n    public JsonResult<Void> reg(User user) {\n        // 调用业务对象执行注册\n        userService.reg(user);\n        // 返回\n        return new JsonResult<Void>(200);\n    }\n//省略其他代码\n }\n","language":"java","meta":"","className":["language-java"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"@RestController\n@RequestMapping(\"users\")\npublic class UserController extends BaseController {\n    @Autowired\n    private IUserService userService;\n\n\n    @RequestMapping(\"reg\")\n    public JsonResult<Void> reg(User user) {\n        // 调用业务对象执行注册\n        userService.reg(user);\n        // 返回\n        return new JsonResult<Void>(200);\n    }\n//省略其他代码\n }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在UserController中实例化"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IUserService"}]},{"type":"text","value":"对象"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"userService"}]},{"type":"text","value":";"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@RequestMapping(\"users\")"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@RequestMapping(\"reg\")"}]},{"type":"text","value":"请求映射，将http请求路径映射到Controller方法上;"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当用户在前端点击注册后，前端请求通过.../users/reg的路径发送给后端的UserController，执行"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@RequestMapping(\"reg\")"}]},{"type":"text","value":"下的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"reg()"}]},{"type":"text","value":"方法;"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"注意这里的reg()是Controller层的，不负责“用户注册”这个业务的实现，它会调用Service层真正实现“用户注册”业务逻辑的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"userService.reg()"}]},{"type":"text","value":";"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"userService.reg()"}]},{"type":"text","value":"调用mapper层的数据库操作方法"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"findByUsername()"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"insert()"}]},{"type":"text","value":"，根据映射的xml文件通过Mybatis执行sql连接操作数据库，把数据写入数据库，完成该业务逻辑，但还需要返回响应结果"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".../users"}]},{"type":"text","value":"请求路径是映射到"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@RequestMapping(\"users\")"}]},{"type":"text","value":"下面的UserController类；\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".../users/reg"}]},{"type":"text","value":"请求路径映射到"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@RequestMapping(\"users\")"}]},{"type":"text","value":"之下的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@RequestMapping(\"reg\")"}]},{"type":"text","value":"下面的reg方法"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"pre","props":{"code":"再看一下上面的\nreturn new JsonResult<Void>(200);\n","language":"java","meta":"","className":["language-java"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"再看一下上面的\nreturn new JsonResult<Void>(200);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JsonResult"}]},{"type":"text","value":"是自定义的响应结果类，统一返回结果\n上面的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"200"}]},{"type":"text","value":"表示正常，即注册成功,如果成功执行了reg方法，则会创建一个JsonResult类的对象，其中state（状态码）属性值设置为200"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"自定义的JsonResult类包含属性state（状态码）、message（状态描述信息）、data（数据），这里注册只需要知道是否操作成功就只返回状态码，如查询等业务则会还需要返回数据等"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面看一下前端代码,这个例子的前端用的是Thymeleaf模板引擎"}]},{"type":"element","tag":"pre","props":{"code":"<script type=\"text/javascript\">\n    $(\"#btn-reg\").click(function() {\n        $.ajax({\n            url: \"/users/reg\",\n            type: \"POST\",\n            data: $(\"#form-reg\").serialize(),\n            dataType: \"json\",\n            success: function(json) {\n                if (json.state == 200) {\n                    alert(\"注册成功！\");\n                    // location.href = \"login.html\";\n                } else {\n                    alert(\"注册失败！\" + json.message);\n                }\n            }\n        });\n    });\n</script>\n","language":"javascript","meta":"","className":["language-javascript"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script type=\"text/javascript\">\n    $(\"#btn-reg\").click(function() {\n        $.ajax({\n            url: \"/users/reg\",\n            type: \"POST\",\n            data: $(\"#form-reg\").serialize(),\n            dataType: \"json\",\n            success: function(json) {\n                if (json.state == 200) {\n                    alert(\"注册成功！\");\n                    // location.href = \"login.html\";\n                } else {\n                    alert(\"注册失败！\" + json.message);\n                }\n            }\n        });\n    });\n</script>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"第四行的url即为上面提到前端的请求路径，该请求为post请求、提交数据，数据来源于id等于第六行"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"\"#form-reg\""}]},{"type":"text","value":"的表单（form），内容为用户注册所需要的信息，与User类属性一致，然后转化为json对象传给Controller,该对象（实参）在Controller中为User类的对象user（形参）"}]},{"type":"element","tag":"pre","props":{"code":"public JsonResult<Void> reg(User user)\n","language":"java","meta":"","className":["language-java"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public JsonResult<Void> reg(User user)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"后端的Controller接收该请求，当处理完请求后返回结果给前端\n如上"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"success: function(json)"}]},{"type":"text","value":"表示请求成功并返回信息（响应请求），这里括号里的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"json"}]},{"type":"text","value":"就是后端Controller返回的结果，即一个JsonResult类的对象（实参），其state属性值为200，在前端中这个对象被命名为json（形参），那么Controller返回结果成功则json.state==200."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以上即为前后端交互的流程，Controller负责接收请求和响应请求，调用Service处理业务，但自身不涉及业务逻辑"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总之："}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"考虑要实现一个业务逻辑，用户在前端界面操作，该操作会从前端向后端传递什么，后端处理完该业务逻辑需要返回给前端什么"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"设计请求与响应，例：\n请求路径：/users/reg\n请求参数：User user\n请求类型：POST\n响应结果：JsonResult"},{"type":"element","tag":"void","props":{},"children":[]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在Controller包下编写控制器类："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxController"}]},{"type":"text","value":"，在类中实例化需要调用的service对象：xxxxService"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxController"}]},{"type":"text","value":"中编写要实现业务的控制方法，包括请求参数与响应结果（返回值），调用xxxxService对象的xxx()方法"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@RequestMapping"}]},{"type":"text","value":"等注解映射控制方法的请求路径，实现前后端的交互"}]}]}]},{"type":"element","tag":"h1","props":{"id":"总结"},"children":[{"type":"text","value":"总结"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"用户操作前端界面，需要实现某种业务--前端发送请求给后端controller--controller接收请求，调用service处理该业务 --service处理业务调用mapper的数据库操作方法 --mapper方法与mapper.xml存在映射关系；--Mybatis执行sql--service处理业完毕--controller返回响应结果--前端返回反馈给用户"}]},{"type":"element","tag":"pre","props":{"code":"用户操作前端界面，需要实现某种业务（<?> 操作内容）{\n    //前端api接口\n    <操作反馈> 前端发送请求给后端controller (){\n        <?> 请求路径\n        <?> 请求参数\n        <?> 请求类型\n        <?> 响应结果\n        //controller层\n        <响应结果> controller接收请求，调用service处理该业务 (<?> 请求参数){\n            //service层\n            service处理业务时，调用mapper的数据库操作方法 (<?> 请求参数){\n                //mapper层\n                mapper方法与mapper.xml存在映射关系；\n                //resource文件夹下的mapper的xml文件\n                执行sql；\n            }\n        }\n    } \n}\n\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"用户操作前端界面，需要实现某种业务（<?> 操作内容）{\n    //前端api接口\n    <操作反馈> 前端发送请求给后端controller (){\n        <?> 请求路径\n        <?> 请求参数\n        <?> 请求类型\n        <?> 响应结果\n        //controller层\n        <响应结果> controller接收请求，调用service处理该业务 (<?> 请求参数){\n            //service层\n            service处理业务时，调用mapper的数据库操作方法 (<?> 请求参数){\n                //mapper层\n                mapper方法与mapper.xml存在映射关系；\n                //resource文件夹下的mapper的xml文件\n                执行sql；\n            }\n        }\n    } \n}\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"考虑的时候可以是前端---controller---service---dao---database ；\n写代码的时候则database---dao---service---controller---前端"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"总而言之，言而总之"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在mapper层"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"确定好需要写的sql;"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在java文件夹下的mapper包编写持久层接口（Mapper接口）："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxMapper"}]},{"type":"text","value":",在接口中定义需要实现的抽象方法;"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在resource文件夹下的mapper包编写xml映射文件："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxMapper.xml"}]},{"type":"text","value":"，编写对应Mapper接口的方法的sql（抽象方法的映射配置），接口与xml文件绑定"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在service层"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"规划可能出现的异常，如用户名重复等，写在Service.ex包下"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"直接在在Service包下编写业务层接口（service接口）："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IXxxxService"}]},{"type":"text","value":"，该命名方式开头的I表示接口，接口中定义要实现的抽象方法——业务逻辑（功能）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在service.impl包下编写service接口的实现类："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxServiceImpl"}]},{"type":"text","value":"，实现相应service接口中的抽象方法"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在controller层"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"考虑要实现一个业务逻辑，用户在前端界面操作，该操作会从前端向后端传递什么，后端处理完该业务逻辑需要返回给前端什么"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"设计请求与响应，例：\n请求路径：/users/reg\n请求参数：User user\n请求类型：POST\n响应结果：JsonResult"},{"type":"element","tag":"void","props":{},"children":[]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在Controller包下编写控制器类："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxController"}]},{"type":"text","value":"，在类中实例化需要调用的service对象：xxxxService"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"XxxxController"}]},{"type":"text","value":"中编写要实现业务的控制方法，包括请求参数与响应结果（返回值），调用xxxxService对象的xxx()方法"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@RequestMapping"}]},{"type":"text","value":"等注解映射控制方法的请求路径，实现前后端的交互"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[]}},"_type":"markdown","_id":"content:essay:1. spring boot-mybatis开发速成指南.md","_source":"content","_file":"essay/1. spring boot-mybatis开发速成指南.md","_stem":"essay/1. spring boot-mybatis开发速成指南","_extension":"md"}