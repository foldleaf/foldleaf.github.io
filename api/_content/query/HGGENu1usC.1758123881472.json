{"_path":"/essay/21.关于string、rune与byte","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"关于 string、rune 与 byte","description":"\"\":双引号，包裹的类型是string'':单引号，包裹的类型是rune,rune是int32的别名，只能是单个字符``:反引号，包裹的类型是string","subtitle":"String、rune and byte","index":21,"date":"2023-03-13 00:00:03","lunar_date":"二月廿二","year":"2023","month":"03","month_en":"Mar","day":"13","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/021.jpg","categories":"golang","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"关于引号"},"children":[{"type":"text","value":"关于引号"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"\"\""}]},{"type":"text","value":":双引号，包裹的类型是string"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"''"}]},{"type":"text","value":":单引号，包裹的类型是rune,rune是int32的别名，只能是单个字符"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"``"}]},{"type":"text","value":":反引号，包裹的类型是string"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"``"}]},{"type":"text","value":"不会解析转义符，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"\"\""}]},{"type":"text","value":"会解析转义符"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在编辑器里 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"``"}]},{"type":"text","value":" 中 可以回车换行"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"\"\""}]},{"type":"text","value":" 时不管有没有转义符都会遍历字符数组一遍寻找转义符，而使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"``"}]},{"type":"text","value":"则是直接输出，所以 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"``"}]},{"type":"text","value":" 性能好一点"}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"char1 := \"A\"\nchar2 := 'A'\nchar3 := `A`\nchar4 := \"asd\\nfghjkl\"\n//在编辑器里这串字符换行后有两个缩进\nchar5 := `asd\\nfg\n        nhjkl`\n// char4:='AB' 不行，只能单个字符\nfmt.Printf(\"char1:%v(类型:%T)\\n\", char1, char1)\nfmt.Printf(\"char2:%v(类型:%T)\\n\", char2, char2)\nfmt.Printf(\"char3:%v(类型:%T)\\n\", char3, char3)\nfmt.Printf(\"char4:%v(类型:%T)\\n\", char4, char4)\nfmt.Printf(\"char5:%v(类型:%T)\\n\", char5, char5)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"char1 := \"A\"\nchar2 := 'A'\nchar3 := `A`\nchar4 := \"asd\\nfghjkl\"\n//在编辑器里这串字符换行后有两个缩进\nchar5 := `asd\\nfg\n        nhjkl`\n// char4:='AB' 不行，只能单个字符\nfmt.Printf(\"char1:%v(类型:%T)\\n\", char1, char1)\nfmt.Printf(\"char2:%v(类型:%T)\\n\", char2, char2)\nfmt.Printf(\"char3:%v(类型:%T)\\n\", char3, char3)\nfmt.Printf(\"char4:%v(类型:%T)\\n\", char4, char4)\nfmt.Printf(\"char5:%v(类型:%T)\\n\", char5, char5)\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"char1:A(类型:string)\nchar2:65(类型:int32)\nchar3:A(类型:string)\nchar4:asd\nfghjkl(类型:string)\nchar5:asd\\nfg\n        nhjkl(类型:string)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"char1:A(类型:string)\nchar2:65(类型:int32)\nchar3:A(类型:string)\nchar4:asd\nfghjkl(类型:string)\nchar5:asd\\nfg\n        nhjkl(类型:string)\n"}]}]},{"type":"element","tag":"h1","props":{"id":"byte-与-rune"},"children":[{"type":"text","value":"byte 与 rune"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"byte: unit8的别名。代表 ASCII 码的一个字符（占一个字节）"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nrune: int32的别名。用于标识 Unicode 字符，代表一个 UTF-8 字符(占多个字节，例如英文字母占一个字节，中文汉字一般占三个字节)"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n因为识别的字节数不一样，所以使用不同的处理方式结果会有所不同，请看下一小节"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"var char1 byte = 'A'\nchar2 := 'A'    // 默认是 int32/rune\nvar char3 byte = 65\nvar char4 byte = '\\x41'\nvar char5 byte = '\\101'\n// %c:字符的unicode码值; %T：变量的类型; %v:值的默认格式; %U:表示为Unicode格式\nfmt.Printf(\"char1:%c(类型:%T)(%v)(%U)\\n\", char1, char1,char1,char1)\nfmt.Printf(\"char2:%c(类型:%T)(%v)\\n\", char2, char2,char2)\nfmt.Printf(\"char3:%c(类型:%T)(%v)\\n\", char3, char3,char3)\nfmt.Printf(\"char4:%c(类型:%T)(%v)\\n\", char4, char4,char4)\nfmt.Printf(\"char5:%c(类型:%T)(%v)\\n\", char5, char5,char5)\nvar char6 rune ='\\u0041'\nvar char7 int64='\\U00000041'\nfmt.Printf(\"char6:%c(类型:%T)(%v)(%U)\\n\", char6, char6,char6,char6)\nfmt.Printf(\"char7:%c(类型:%T)(%v)(%U)\\n\", char7, char7,char7,char7)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var char1 byte = 'A'\nchar2 := 'A'    // 默认是 int32/rune\nvar char3 byte = 65\nvar char4 byte = '\\x41'\nvar char5 byte = '\\101'\n// %c:字符的unicode码值; %T：变量的类型; %v:值的默认格式; %U:表示为Unicode格式\nfmt.Printf(\"char1:%c(类型:%T)(%v)(%U)\\n\", char1, char1,char1,char1)\nfmt.Printf(\"char2:%c(类型:%T)(%v)\\n\", char2, char2,char2)\nfmt.Printf(\"char3:%c(类型:%T)(%v)\\n\", char3, char3,char3)\nfmt.Printf(\"char4:%c(类型:%T)(%v)\\n\", char4, char4,char4)\nfmt.Printf(\"char5:%c(类型:%T)(%v)\\n\", char5, char5,char5)\nvar char6 rune ='\\u0041'\nvar char7 int64='\\U00000041'\nfmt.Printf(\"char6:%c(类型:%T)(%v)(%U)\\n\", char6, char6,char6,char6)\nfmt.Printf(\"char7:%c(类型:%T)(%v)(%U)\\n\", char7, char7,char7,char7)\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"char1:A(类型:uint8)(65)(U+0041)\nchar2:A(类型:int32)(65)\nchar3:A(类型:uint8)(65)\nchar4:A(类型:uint8)(65)\nchar5:A(类型:uint8)(65)\nchar6:A(类型:int32)(65)(U+0041)\nchar7:A(类型:int64)(65)(U+0041)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"char1:A(类型:uint8)(65)(U+0041)\nchar2:A(类型:int32)(65)\nchar3:A(类型:uint8)(65)\nchar4:A(类型:uint8)(65)\nchar5:A(类型:uint8)(65)\nchar6:A(类型:int32)(65)(U+0041)\nchar7:A(类型:int64)(65)(U+0041)\n"}]}]},{"type":"element","tag":"h1","props":{"id":"string"},"children":[{"type":"text","value":"string"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"string的底层是字符数组"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用传统的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"for-i++"}]},{"type":"text","value":"循环时会按ASCII处理，按unit8的格式进行解析,得到的是"},{"type":"element","tag":"span","props":{},"children":[]},{"type":"text","value":"byte;"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"for-range"}]},{"type":"text","value":"循环时则是按int32的格式进行解析，得到的是"},{"type":"element","tag":"span","props":{},"children":[]},{"type":"text","value":"rune;"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"str := \"goの世界\"\nfor i := 0; i < len(str); i++ {\n    // byte/unit8类型，按 ASCII 处理,会有乱码\n    // %c:字符的unicode码值; %T：变量的类型; %v:值的默认格式; %U:表示为Unicode格式\n    fmt.Printf(\"str[%v]:%c(类型:%T)(%U)\\n\", i, str[i], str[i], str[i])\n}\nfmt.Println(\"--------\")\nfor i, v := range str {\n    // rune/int32类型,按 UTF-8 处理\n    fmt.Printf(\"str[%v]:%c(类型:%T)(%U)\\n\", i, v, v, v)\n}\n\nstr1 := []byte(str)\nstr2 := []rune(str)\nfmt.Printf(\"str1:%c,%v,%U\\n\", str1, str1, str1)\nfmt.Printf(\"str2:%c,%v,%U\\n\", str2, str2, str2)\nfmt.Printf(\"str的ASCII长度:%v\\n\", len(str))\nfmt.Printf(\"str的UTF-8长度:%v\\n\", utf8.RuneCountInString(str))\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"str := \"goの世界\"\nfor i := 0; i < len(str); i++ {\n    // byte/unit8类型，按 ASCII 处理,会有乱码\n    // %c:字符的unicode码值; %T：变量的类型; %v:值的默认格式; %U:表示为Unicode格式\n    fmt.Printf(\"str[%v]:%c(类型:%T)(%U)\\n\", i, str[i], str[i], str[i])\n}\nfmt.Println(\"--------\")\nfor i, v := range str {\n    // rune/int32类型,按 UTF-8 处理\n    fmt.Printf(\"str[%v]:%c(类型:%T)(%U)\\n\", i, v, v, v)\n}\n\nstr1 := []byte(str)\nstr2 := []rune(str)\nfmt.Printf(\"str1:%c,%v,%U\\n\", str1, str1, str1)\nfmt.Printf(\"str2:%c,%v,%U\\n\", str2, str2, str2)\nfmt.Printf(\"str的ASCII长度:%v\\n\", len(str))\nfmt.Printf(\"str的UTF-8长度:%v\\n\", utf8.RuneCountInString(str))\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"str[0]:g(类型:uint8)(U+0067)\nstr[1]:o(类型:uint8)(U+006F)\nstr[2]:ã(类型:uint8)(U+00E3)\nstr[3]:(类型:uint8)(U+0081)\nstr[4]:®(类型:uint8)(U+00AE)\nstr[5]:ä(类型:uint8)(U+00E4)\nstr[6]:¸(类型:uint8)(U+00B8)\nstr[7]:(类型:uint8)(U+0096)\nstr[8]:ç(类型:uint8)(U+00E7)\nstr[9]:(类型:uint8)(U+0095)\nstr[10]:(类型:uint8)(U+008C)\n--------\nstr[0]:g(类型:int32)(U+0067)\nstr[1]:o(类型:int32)(U+006F)\nstr[2]:の(类型:int32)(U+306E)\nstr[5]:世(类型:int32)(U+4E16)\nstr[8]:界(类型:int32)(U+754C)\nstr1:[g o ã  ® ä ¸  ç  ],[103 111 227 129 174 228 184 150 231 149 140],[U+0067 U+006F U+00E3 U+0081 U+00AE U+00E4 U+00B8 U+0096 U+00E7 U+0095 U+008C]\nstr2:[g o の 世 界],[103 111 12398 19990 30028],[U+0067 U+006F U+306E U+4E16 U+754C]\nstr的ASCII长度:11\nstr的UTF-8长度:5\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"str[0]:g(类型:uint8)(U+0067)\nstr[1]:o(类型:uint8)(U+006F)\nstr[2]:ã(类型:uint8)(U+00E3)\nstr[3]:(类型:uint8)(U+0081)\nstr[4]:®(类型:uint8)(U+00AE)\nstr[5]:ä(类型:uint8)(U+00E4)\nstr[6]:¸(类型:uint8)(U+00B8)\nstr[7]:(类型:uint8)(U+0096)\nstr[8]:ç(类型:uint8)(U+00E7)\nstr[9]:(类型:uint8)(U+0095)\nstr[10]:(类型:uint8)(U+008C)\n--------\nstr[0]:g(类型:int32)(U+0067)\nstr[1]:o(类型:int32)(U+006F)\nstr[2]:の(类型:int32)(U+306E)\nstr[5]:世(类型:int32)(U+4E16)\nstr[8]:界(类型:int32)(U+754C)\nstr1:[g o ã  ® ä ¸  ç  ],[103 111 227 129 174 228 184 150 231 149 140],[U+0067 U+006F U+00E3 U+0081 U+00AE U+00E4 U+00B8 U+0096 U+00E7 U+0095 U+008C]\nstr2:[g o の 世 界],[103 111 12398 19990 30028],[U+0067 U+006F U+306E U+4E16 U+754C]\nstr的ASCII长度:11\nstr的UTF-8长度:5\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"分割为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"[]byte"}]},{"type":"text","value":"字符数组自然显示不了UTF-8编码的字符，就会出现乱码。分割为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"[]rune"}]},{"type":"text","value":"字符数组才是按UTF-8处理的"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"g"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"o"}]},{"type":"text","value":"分别由"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[0]"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[1]"}]},{"type":"text","value":"表示;"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"の"}]},{"type":"text","value":"由"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[2]"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[3]"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[4]"}]},{"type":"text","value":"表示;"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"世"}]},{"type":"text","value":"由"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[5]"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[6]"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[7]"}]},{"type":"text","value":"表示；"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"界"}]},{"type":"text","value":"由"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[8]"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[9]"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[10]"}]},{"type":"text","value":"表示。"}]},{"type":"element","tag":"h1","props":{"id":"修改string"},"children":[{"type":"text","value":"修改string"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对一个字符串str，要修改其中某个字符，类似"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"str[i]='A'"}]},{"type":"text","value":"这种修改方式是不行的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"虽说字符串可以当成字符数组来处理，但字符串的本质是有一个指针指向其底层的字符数组的，上述的修改方式并不会修改它的底层数组。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当然直接str=\"newString\"直接替换掉str指向的字符数组也是可以的，不过这里讨论一下只替换部分字符"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"// string --> []byte -->string\ns1:=\"wasd\"\ns2:=[]byte(s1)\ns2[0]='W'\nfmt.Println(string(s2)) //Wasd\n\n// string --> []rune -->string\ns3:=\"早上好\"\ns4:=[]rune(s3)\ns4[0]='晚'\nfmt.Println(string(s4)) //晚上好\n\n// strings中的方法\ns5 := \"abcdab\"\nold := \"ab\"\nnew :=\"AB\"\n// 把s5里old的字符换成new的字符，第四个参数是替换次数，-1是全部替换\ns6 := strings.Replace(s1, old, new, -1)\nfmt.Println(s4) //ABcdAB\n\n// 全部替换，将指针指向其他字符数组\nstr:=\"abcd\"\nstr=\"ABcd\"\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// string --> []byte -->string\ns1:=\"wasd\"\ns2:=[]byte(s1)\ns2[0]='W'\nfmt.Println(string(s2)) //Wasd\n\n// string --> []rune -->string\ns3:=\"早上好\"\ns4:=[]rune(s3)\ns4[0]='晚'\nfmt.Println(string(s4)) //晚上好\n\n// strings中的方法\ns5 := \"abcdab\"\nold := \"ab\"\nnew :=\"AB\"\n// 把s5里old的字符换成new的字符，第四个参数是替换次数，-1是全部替换\ns6 := strings.Replace(s1, old, new, -1)\nfmt.Println(s4) //ABcdAB\n\n// 全部替换，将指针指向其他字符数组\nstr:=\"abcd\"\nstr=\"ABcd\"\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[]}},"_type":"markdown","_id":"content:essay:21.关于string、rune与byte.md","_source":"content","_file":"essay/21.关于string、rune与byte.md","_stem":"essay/21.关于string、rune与byte","_extension":"md"}