{"_path":"/essay/40.nginx部署","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"nginx部署","description":"nginx (\"engine x\") is an HTTP web server, reverse proxy, content cache, load balancer, TCP/UDP proxy server, and mail proxy server. Originally written by Igor Sysoev and distributed under the 2-clause BSD License.","subtitle":"Nginx deployment","index":40,"date":"2023-06-15 20:15:00","lunar_date":"四月廿八","year":2023,"month":"06","month_en":"Jun","day":"15","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/040.jpg","categories":"部署","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"正向代理反向代理"},"children":[{"type":"text","value":"正向代理、反向代理"}]},{"type":"element","tag":"h2","props":{"id":"正向代理"},"children":[{"type":"text","value":"正向代理"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作为客户端的代理，服务端只与客户端的代理进行交互。服务端实际上不会知道与它交互的客户端是哪个，它只与代理接收或发送消息，代理则转发消息给客户端。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"例子"}]},{"type":"text","value":": 魔法上网，服务端不会知道客户端的 ip"}]},{"type":"element","tag":"h2","props":{"id":"反向代理"},"children":[{"type":"text","value":"反向代理"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作为服务端的代理，例如魔法上网，客户端只与服务端的代理进行交互。客户端只与代理接收或发送消息，代理则转发消息给服务端。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"例子"}]},{"type":"text","value":": 公司内网，服务端在局域网内，外网无法直接访问，需要通过网关这个代理来转发请求"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nginx 就属于反向代理"}]},{"type":"element","tag":"h1","props":{"id":"nginx-常见命令"},"children":[{"type":"text","value":"Nginx 常见命令"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"nginx -s stop    # 停止 Nginx 服务\nnginx -s reload  # 重新加载配置文件\nnginx -s quit    # 平滑停止 Nginx 服务\nnginx -t         # 测试配置文件是否正确\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nginx -s stop    # 停止 Nginx 服务\nnginx -s reload  # 重新加载配置文件\nnginx -s quit    # 平滑停止 Nginx 服务\nnginx -t         # 测试配置文件是否正确\n"}]}]},{"type":"element","tag":"h1","props":{"id":"nginx-部署"},"children":[{"type":"text","value":"Nginx 部署"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nginx 相关配置文件目录: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/etc/nginx/"}]},{"type":"text","value":"\n主配置文件为: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/etc/nginx/nginx.conf"}]}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"# 进程\nworker_processes  1;\n\n# 连接数\nevents {\n    worker_connections  1024;\n}\n\n# http 服务\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        location / {\n            proxy_pass                 http://127.0.0.1:8084;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# 进程\nworker_processes  1;\n\n# 连接数\nevents {\n    worker_connections  1024;\n}\n\n# http 服务\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        location / {\n            proxy_pass                 http://127.0.0.1:8084;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行下面的命令检查配置文件语法："}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"nginx -t\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nginx -t\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行下面的命令重新加载配置文件："}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"nginx -s reload\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nginx -s reload\n"}]}]},{"type":"element","tag":"h1","props":{"id":"负载均衡"},"children":[{"type":"text","value":"负载均衡"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"各种地方都说得高大上，但使用起来并不复杂，其中一种就是一套后端代码的服务部署到多个地址"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用 nginx 的 upstream 配置来添加多个服务器地址实现负载均衡。"}]},{"type":"element","tag":"h1","props":{"id":"轮询默认"},"children":[{"type":"text","value":"轮询(默认)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"即按时间顺序逐一分配到不同的后端服务器"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"worker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n    \n    upstream backend {\n      server 127.0.0.1:9000;\n      # 这里需要填真实可用的地址，默认轮询\n      #server backend1.example.com;\n      #server backend2.example.com;\n    }\n\n    server {\n        # nginx 的端口\n        listen       80;\n        server_name  localhost;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        location / {\n            proxy_pass                 http://backend/;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"worker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n    \n    upstream backend {\n      server 127.0.0.1:9000;\n      # 这里需要填真实可用的地址，默认轮询\n      #server backend1.example.com;\n      #server backend2.example.com;\n    }\n\n    server {\n        # nginx 的端口\n        listen       80;\n        server_name  localhost;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        location / {\n            proxy_pass                 http://backend/;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"权重"},"children":[{"type":"text","value":"权重"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"weight 代表权重，默认为1,权重越高被分配的客户端越多"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"weight和访问比率成正比，用于后端服务器性能不均的情况。 例如"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"upstream backend{\n    server 127.0.0.1:9000 weight=5;\n    server backend1.example.com weight=1;\n    server backend2.example.com weight=2;\n}\n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"upstream backend{\n    server 127.0.0.1:9000 weight=5;\n    server backend1.example.com weight=1;\n    server backend2.example.com weight=2;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其他部分与上述的轮询一样，下同"}]},{"type":"element","tag":"h1","props":{"id":"最小连接"},"children":[{"type":"text","value":"最小连接"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"分配到当前连接数最小的服务"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"upstream backend { \n    least_conn;\n    server 127.0.0.1:9000; \n    server backend1.example.com;\n    server backend2.example.com;\n}   \n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"upstream backend { \n    least_conn;\n    server 127.0.0.1:9000; \n    server backend1.example.com;\n    server backend2.example.com;\n}   \n"}]}]},{"type":"element","tag":"h1","props":{"id":"ip_hash"},"children":[{"type":"text","value":"ip_hash"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"每个请求按访问ip的hash值分配，每个访问客户端会固定访问一个后端服务器，可以解决会话Session丢失的问题"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"upstream backend { \n    ip_hash;\n    server 127.0.0.1:9000; \n    server backend1.example.com;\n    server backend2.example.com;\n}   \n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"upstream backend { \n    ip_hash;\n    server 127.0.0.1:9000; \n    server backend1.example.com;\n    server backend2.example.com;\n}   \n"}]}]},{"type":"element","tag":"h1","props":{"id":"nginx分离静态文件请求"},"children":[{"type":"text","value":"Nginx分离静态文件请求"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"将静态文件部分的请求直接使用 nginx 处理，而将 API 接口类的动态处理请求转发给后端的 Go 程序来处理。"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"worker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  web_app;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        # 静态文件请求\n        location ~ .*\\.(gif|jpg|jpeg|png|js|css|eot|ttf|woff|svg|otf)$ {\n            access_log off;\n            expires    1d;\n            root       /data/app/web_app;\n        }\n\n        # index.html页面请求\n        # 因为是单页面应用这里使用 try_files 处理一下，避免刷新页面时出现404的问题\n        location / {\n            root /data/app/web_app/templates;\n            index index.html;\n            try_files $uri $uri/ /index.html;\n        }\n\n        # API请求\n        location /api {\n            # 后端服务的地址\n            proxy_pass                 http://127.0.0.1:9000;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"worker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  web_app;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        # 静态文件请求\n        location ~ .*\\.(gif|jpg|jpeg|png|js|css|eot|ttf|woff|svg|otf)$ {\n            access_log off;\n            expires    1d;\n            root       /data/app/web_app;\n        }\n\n        # index.html页面请求\n        # 因为是单页面应用这里使用 try_files 处理一下，避免刷新页面时出现404的问题\n        location / {\n            root /data/app/web_app/templates;\n            index index.html;\n            try_files $uri $uri/ /index.html;\n        }\n\n        # API请求\n        location /api {\n            # 后端服务的地址\n            proxy_pass                 http://127.0.0.1:9000;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"前后端分离部署"},"children":[{"type":"text","value":"前后端分离部署"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前端和后端分开部署到不同的服务器，我们需要处理跨域问题，关于处理跨域问题请见 "},{"type":"element","tag":"a","props":{"href":""},"children":[{"type":"text","value":"前后端交互"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[{"id":"正向代理","depth":2,"text":"正向代理"},{"id":"反向代理","depth":2,"text":"反向代理"}]}},"_type":"markdown","_id":"content:essay:40.nginx部署.md","_source":"content","_file":"essay/40.nginx部署.md","_stem":"essay/40.nginx部署","_extension":"md"}