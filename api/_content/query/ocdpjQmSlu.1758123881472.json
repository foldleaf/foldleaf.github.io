{"_path":"/essay/20.Go与json","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"Go与json","description":"JSON 是存储和交换文本信息的语法，类似 XML。\nJSON 比 XML 更小、更快，更易解析。\nJSON 易于人阅读和编写。\nC、Python、C++、Java、PHP、Go 等编程语言都支持 JSON。","subtitle":"Go and json","index":20,"date":"2023-03-06 00:00:02","lunar_date":"二月十五","year":"2023","month":"03","month_en":"Mar","day":"01","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/020.jpg","categories":"golang","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"JSON 是存储和交换文本信息的语法，类似 XML。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nJSON 比 XML 更小、更快，更易解析。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nJSON 易于人阅读和编写。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nC、Python、C++、Java、PHP、Go 等编程语言都支持 JSON。"}]},{"type":"element","tag":"h1","props":{"id":"struct-与-json-的序列反序列化"},"children":[{"type":"text","value":"struct 与 json 的序列/反序列化"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"结构体"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type Person struct {\n    Name   string  \n    Age    int     \n    Weight float64 \n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Person struct {\n    Name   string  \n    Age    int     \n    Weight float64 \n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"json"}]},{"type":"element","tag":"pre","props":{"className":["language-json"],"code":"{   \n    \"Name\":\"小明\",\n    \"Age\":18,\n    \"Weight\":66.6\n}\n","language":"json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{   \n    \"Name\":\"小明\",\n    \"Age\":18,\n    \"Weight\":66.6\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"将结构体序列化为json"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"// 将结构体序列化为json\nfunc json.Marshal(v any) ([]byte, error)\n// 将json反序列化为结构体\nfunc json.Unmarshal(data []byte, v any) error\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 将结构体序列化为json\nfunc json.Marshal(v any) ([]byte, error)\n// 将json反序列化为结构体\nfunc json.Unmarshal(data []byte, v any) error\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unmarshal() 接收的是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"[]byte"}]},{"type":"text","value":"类型参数，其他类型需要使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"[]byte()"}]},{"type":"text","value":"进行转换；同样的， Marshal() 输出的也是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"[]byte"}]},{"type":"text","value":"类型"}]},{"type":"element","tag":"h1","props":{"id":"tag-标签"},"children":[{"type":"text","value":"tag 标签"}]},{"type":"element","tag":"h2","props":{"id":"指定字段名"},"children":[{"type":"text","value":"指定字段名"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"将结构体解析后输出的字段名改为标签中的名称，比如go中变量公开要首字母大写，需要将其序列化后的字段为小写。\nfmt格式化输出中的 %s 占位符是自动转换为 string 再输出"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type Person struct {\n    Name   string  `json:\"name\"`\n    Age    int     `json:\"age\"`\n    Weight float64 `json:\"weight\"`\n}\nfunc main{\n   // 结构体转json\n    p1 := Person{\n        Name:   \"小明\",\n        Age:    18,\n        Weight: 0,\n    }\n    b,err:=json.Marshal(p1)\n    if err != nil {\n        fmt.Print(err)\n    }\n    fmt.Printf(\"str:%s\\n\",b)\n\n    // json转结构体\n    var p2 Person\n    err=json.Unmarshal(b,&p2)\n    if err!=nil {\n        fmt.Println(err)\n    }\n    fmt.Printf(\"p2:%#v\\n\",p2)\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Person struct {\n    Name   string  `json:\"name\"`\n    Age    int     `json:\"age\"`\n    Weight float64 `json:\"weight\"`\n}\nfunc main{\n   // 结构体转json\n    p1 := Person{\n        Name:   \"小明\",\n        Age:    18,\n        Weight: 0,\n    }\n    b,err:=json.Marshal(p1)\n    if err != nil {\n        fmt.Print(err)\n    }\n    fmt.Printf(\"str:%s\\n\",b)\n\n    // json转结构体\n    var p2 Person\n    err=json.Unmarshal(b,&p2)\n    if err!=nil {\n        fmt.Println(err)\n    }\n    fmt.Printf(\"p2:%#v\\n\",p2)\n}\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-json"],"code":"{\n    \"name\":\"小明\",\n    \"age\":18,\n    \"weight\":66.6\n}\n","language":"json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"name\":\"小明\",\n    \"age\":18,\n    \"weight\":66.6\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"忽略字段"},"children":[{"type":"text","value":"忽略字段"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"添加tag以忽略某些字段\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"\"-\""}]},{"type":"text","value":":指定json序列化/反序列化时忽略此字段\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"\"omitempty\""}]},{"type":"text","value":":字段值为空时(不是零值，是没有该字段)，序列化/反序列化时忽略此字段"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type Person struct {\n    Name   string  `json:\"name\"`            // 指定序列化/反序列化的字段名\n    Age    int     `json:\"age,omitempty\"`   // 若字段值为空,序列化/反序列化时忽略此字段\n    Weight float64 `json:\"-\"`               // 序列化/反序列化时忽略此字段\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Person struct {\n    Name   string  `json:\"name\"`            // 指定序列化/反序列化的字段名\n    Age    int     `json:\"age,omitempty\"`   // 若字段值为空,序列化/反序列化时忽略此字段\n    Weight float64 `json:\"-\"`               // 序列化/反序列化时忽略此字段\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"嵌套结构体"},"children":[{"type":"text","value":"嵌套结构体"}]},{"type":"element","tag":"h2","props":{"id":"解析为单层json"},"children":[{"type":"text","value":"解析为单层json"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type User struct {\n    Name    string   `json:\"name\"`\n    Email   string   `json:\"email\"`\n    Hobby   []string `json:\"hobby\"`\n    Profile \n}\n\ntype Profile struct {\n    Website string `json:\"site\"`\n    Slogan  string `json:\"slogan\"`\n}\n\nu1 := User{\n        Name:  \"小明\",\n        Hobby: []string{\"足球\", \"篮球\"},\n    }\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type User struct {\n    Name    string   `json:\"name\"`\n    Email   string   `json:\"email\"`\n    Hobby   []string `json:\"hobby\"`\n    Profile \n}\n\ntype Profile struct {\n    Website string `json:\"site\"`\n    Slogan  string `json:\"slogan\"`\n}\n\nu1 := User{\n        Name:  \"小明\",\n        Hobby: []string{\"足球\", \"篮球\"},\n    }\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-json"],"code":"{\n    \"name\":\"小明\",\n    \"email\":\"\",\n    \"hobby\":[\"足球\",\"篮球\"],\n    \"site\":\"\",\n    \"slogan\":\"\"\n}\n","language":"json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"name\":\"小明\",\n    \"email\":\"\",\n    \"hobby\":[\"足球\",\"篮球\"],\n    \"site\":\"\",\n    \"slogan\":\"\"\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"解析为多层嵌套json"},"children":[{"type":"text","value":"解析为多层嵌套json"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"只需要添加给嵌套的字段json标签"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type User struct {\n    Name    string   `json:\"name\"`\n    Email   string   `json:\"email\"`\n    Hobby   []string `json:\"hobby\"`\n    Profile `json:\"profile\"`\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type User struct {\n    Name    string   `json:\"name\"`\n    Email   string   `json:\"email\"`\n    Hobby   []string `json:\"hobby\"`\n    Profile `json:\"profile\"`\n}\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-json"],"code":"{\n    \"name\":\"小明\",\n    \"email\":\"\",\n    \"hobby\":[\"足球\",\"篮球\"],\n    \"profile\":\n        {\n            \"site\":\"\",\n            \"slogan\":\"\"\n        }\n}\n","language":"json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"name\":\"小明\",\n    \"email\":\"\",\n    \"hobby\":[\"足球\",\"篮球\"],\n    \"profile\":\n        {\n            \"site\":\"\",\n            \"slogan\":\"\"\n        }\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"忽略嵌套结构体的空值"},"children":[{"type":"text","value":"忽略嵌套结构体的空值"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"嵌套字段只使用 omitempty 标签是不行的，还需要加指针才能忽略空值情况"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type User struct {\n    Name    string   `json:\"name\"`\n    Email   string   `json:\"email,omitempty\"`\n    Hobby   []string `json:\"hobby,omitempty\"`\n    *Profile `json:\"profile,omitempty\"`\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type User struct {\n    Name    string   `json:\"name\"`\n    Email   string   `json:\"email,omitempty\"`\n    Hobby   []string `json:\"hobby,omitempty\"`\n    *Profile `json:\"profile,omitempty\"`\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"不修改原结构体忽略空值字段"},"children":[{"type":"text","value":"不修改原结构体忽略空值字段"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type User struct {\n    Name     string `json:\"name\"`\n    Password string `json:\"password\"`\n}\n\ntype PublicUser struct {\n    *User             // 匿名嵌套\n    Password *struct{} `json:\"password,omitempty\"`\n}\ntype User struct {\n    Name     string `json:\"name\"`\n    Password string `json:\"password\"`\n}\n\ntype PublicUser struct {\n    *User             // 匿名嵌套\n    Password *struct{} `json:\"password,omitempty\"`\n}\n\nfunc omitPasswordDemo() {\n    u1 := User{\n        Name:     \"七米\",\n        Password: \"123456\",\n    }\n    b, err := json.Marshal(PublicUser{User: &u1})\n    if err != nil {\n        fmt.Printf(\"json.Marshal u1 failed, err:%v\\n\", err)\n        return\n    }\n    fmt.Printf(\"str:%s\\n\", b)  // str:{\"name\":\"七米\"}\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type User struct {\n    Name     string `json:\"name\"`\n    Password string `json:\"password\"`\n}\n\ntype PublicUser struct {\n    *User             // 匿名嵌套\n    Password *struct{} `json:\"password,omitempty\"`\n}\ntype User struct {\n    Name     string `json:\"name\"`\n    Password string `json:\"password\"`\n}\n\ntype PublicUser struct {\n    *User             // 匿名嵌套\n    Password *struct{} `json:\"password,omitempty\"`\n}\n\nfunc omitPasswordDemo() {\n    u1 := User{\n        Name:     \"七米\",\n        Password: \"123456\",\n    }\n    b, err := json.Marshal(PublicUser{User: &u1})\n    if err != nil {\n        fmt.Printf(\"json.Marshal u1 failed, err:%v\\n\", err)\n        return\n    }\n    fmt.Printf(\"str:%s\\n\", b)  // str:{\"name\":\"七米\"}\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"字符串类型的数字解析"},"children":[{"type":"text","value":"字符串类型的数字解析"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因为数据是string类型，所以不能对应相应数据类型的字段。使用string标签。"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type Card struct {\n    ID    int64   `json:\"id,string\"`    // 添加string tag\n    Score float64 `json:\"score,string\"` // 添加string tag\n}\njsonStr1 := `{\"id\": \"1234567\",\"score\": \"88.50\"}`\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Card struct {\n    ID    int64   `json:\"id,string\"`    // 添加string tag\n    Score float64 `json:\"score,string\"` // 添加string tag\n}\njsonStr1 := `{\"id\": \"1234567\",\"score\": \"88.50\"}`\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[{"id":"指定字段名","depth":2,"text":"指定字段名"},{"id":"忽略字段","depth":2,"text":"忽略字段"},{"id":"解析为单层json","depth":2,"text":"解析为单层json"},{"id":"解析为多层嵌套json","depth":2,"text":"解析为多层嵌套json"},{"id":"忽略嵌套结构体的空值","depth":2,"text":"忽略嵌套结构体的空值"},{"id":"不修改原结构体忽略空值字段","depth":2,"text":"不修改原结构体忽略空值字段"},{"id":"字符串类型的数字解析","depth":2,"text":"字符串类型的数字解析"}]}},"_type":"markdown","_id":"content:essay:20.Go与json.md","_source":"content","_file":"essay/20.Go与json.md","_stem":"essay/20.Go与json","_extension":"md"}