{"_path":"/essay/39.docker部署","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"docker部署","description":"","subtitle":"Docker deployment","index":39,"date":"2023-06-15 20:09:52","lunar_date":"四月廿八","year":2023,"month":"06","month_en":"Jun","day":"15","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/039.jpg","categories":"部署","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"基本使用"},"children":[{"type":"text","value":"基本使用"}]},{"type":"element","tag":"h2","props":{"id":"编写-dockerfile"},"children":[{"type":"text","value":"编写 Dockerfile"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在项目根目录下编写Dockerfile(默认使用名称就是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Dockerfile"}]},{"type":"text","value":"，不需要后缀)"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"FROM golang:alpine\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 将我们的代码编译成二进制可执行文件app\nRUN go build -o app .\n\n# 移动到用于存放生成的二进制文件的 /dist 目录\nWORKDIR /dist\n\n# 将二进制文件从 /build 目录复制到这里\nRUN cp /build/app .\n\n# 声明服务端口\nEXPOSE 9000\n\n# 启动容器时运行的命令\nCMD [\"/dist/app\"]\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"FROM golang:alpine\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 将我们的代码编译成二进制可执行文件app\nRUN go build -o app .\n\n# 移动到用于存放生成的二进制文件的 /dist 目录\nWORKDIR /dist\n\n# 将二进制文件从 /build 目录复制到这里\nRUN cp /build/app .\n\n# 声明服务端口\nEXPOSE 9000\n\n# 启动容器时运行的命令\nCMD [\"/dist/app\"]\n"}]}]},{"type":"element","tag":"h2","props":{"id":"构建-docker-镜像"},"children":[{"type":"text","value":"构建 docker 镜像"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"项目根目录下执行，创建镜像并制定镜像名为 web_app"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker build . -t web_app\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker build . -t web_app\n"}]}]},{"type":"element","tag":"h2","props":{"id":"运行镜像"},"children":[{"type":"text","value":"运行镜像"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"指定端口运行镜像"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker run -p 9000:9000 web_app\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker run -p 9000:9000 web_app\n"}]}]},{"type":"element","tag":"h1","props":{"id":"最佳实践"},"children":[{"type":"text","value":"最佳实践"}]},{"type":"element","tag":"h2","props":{"id":"分阶段构建"},"children":[{"type":"text","value":"分阶段构建"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Go 程序编译之后会得到一个可执行的二进制文件，在最终的镜像中是不需要 go 编译器的，但是以上的 dockerfile 会把 go 的编译环境也打包到镜像中。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"分阶段构建的目的是仅打包需要打包的，尽可能地减小镜像的体积"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"###################\n# 1. AS: 构建阶段作为一个镜像,命名为 builder\n###################\nFROM golang:alpine AS builder\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 将我们的代码编译成二进制可执行文件 app\nRUN go build -o app .\n\n###################\n# 2. 创建一个小镜像，scratch 是 docker 中的最小镜像\n###################\nFROM scratch\n\n# 从builder镜像中把/dist/app 拷贝到当前目录\nCOPY --from=builder /build/app /\n\n# 需要运行的命令\nENTRYPOINT [\"/app\"]\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"###################\n# 1. AS: 构建阶段作为一个镜像,命名为 builder\n###################\nFROM golang:alpine AS builder\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 将我们的代码编译成二进制可执行文件 app\nRUN go build -o app .\n\n###################\n# 2. 创建一个小镜像，scratch 是 docker 中的最小镜像\n###################\nFROM scratch\n\n# 从builder镜像中把/dist/app 拷贝到当前目录\nCOPY --from=builder /build/app /\n\n# 需要运行的命令\nENTRYPOINT [\"/app\"]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"将编译环境的部分给忽略掉，只把可执行文件的镜像拷贝到一个最小镜像中"}]},{"type":"element","tag":"h2","props":{"id":"拷贝其他文件"},"children":[{"type":"text","value":"拷贝其他文件"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"除了go还附带其他文件，比如网页的静态文件等等则需要拷贝，一起放在镜像中"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"...\nFROM scratch\n\nCOPY ./templates /templates\nCOPY ./static /static\nCOPY ./conf /conf\n...\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\nFROM scratch\n\nCOPY ./templates /templates\nCOPY ./static /static\nCOPY ./conf /conf\n...\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不过这种是前后端放在一起部署，并非所谓的前后端分离，前后端分离一般会是使用 nginx 来部署，之后再介绍。"}]},{"type":"element","tag":"h1","props":{"id":"多容器"},"children":[{"type":"text","value":"多容器"}]},{"type":"element","tag":"h2","props":{"id":"容器关联"},"children":[{"type":"text","value":"容器关联"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在使用多个容器时会用到，比如在使用 MySQL 时是用的docker容器，容器名为MySQL123。那么在配置文件中修改host项为容器名，如:"}]},{"type":"element","tag":"pre","props":{"className":["language-yaml"],"code":"host: mysql123\n","language":"yaml","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"host: mysql123\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"修改后重新构建镜像"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker build . -t web_app\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker build . -t web_app\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"运行应用容器并与容器"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"mysql123"}]},{"type":"text","value":"关联"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker run --link=mysql123:mysql123 -p 8888:8888 web_app_app\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker run --link=mysql123:mysql123 -p 8888:8888 web_app_app\n"}]}]},{"type":"element","tag":"h2","props":{"id":"docker-compose容器编排"},"children":[{"type":"text","value":"docker compose(容器编排)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"参考于别处"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用Dockerfile定义你的应用环境以便可以在任何地方复制。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"定义组成应用程序的服务，docker-compose.yml 以便它们可以在隔离的环境中一起运行。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"执行 docker-compose up命令来启动并运行整个应用程序。"}]}]},{"type":"element","tag":"h3","props":{"id":"编写docker-composeyml"},"children":[{"type":"text","value":"编写docker-compose.yml"}]},{"type":"element","tag":"pre","props":{"className":["language-yaml"],"code":"文件名:docker-compose.yml\n# yaml 配置\nversion: \"3.7\"\nservices:\n  # mysql容器\n  mysql8019:\n    image: \"mysql:8.0.19\"\n    ports:\n      - \"33061:3306\"\n    command: \"--default-authentication-plugin=mysql_native_password --init-file /data/application/init.sql\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"mysql123\"\n      MYSQL_DATABASE: \"web_app\"\n      MYSQL_PASSWORD: \"mysql123\"\n    volumes:\n      - ./init.sql:/data/application/init.sql # 数据库初始化\n    \n  # redis容器, 参考mysql即可\n  redis:\n    image: \"\"\n    ports:\n      - \"\"\n\n  # 应用程序的容器\n  web_app:\n    build: .\n    command: sh -c \"./wait-for.sh mysql8019:3306 redis:6379 -- ./web_app ./conf/config.ini\"\n    depends_on:\n      - mysql8019\n    ports:\n      - \"9000:9000\"\n","language":"yaml","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"文件名:docker-compose.yml\n# yaml 配置\nversion: \"3.7\"\nservices:\n  # mysql容器\n  mysql8019:\n    image: \"mysql:8.0.19\"\n    ports:\n      - \"33061:3306\"\n    command: \"--default-authentication-plugin=mysql_native_password --init-file /data/application/init.sql\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"mysql123\"\n      MYSQL_DATABASE: \"web_app\"\n      MYSQL_PASSWORD: \"mysql123\"\n    volumes:\n      - ./init.sql:/data/application/init.sql # 数据库初始化\n    \n  # redis容器, 参考mysql即可\n  redis:\n    image: \"\"\n    ports:\n      - \"\"\n\n  # 应用程序的容器\n  web_app:\n    build: .\n    command: sh -c \"./wait-for.sh mysql8019:3306 redis:6379 -- ./web_app ./conf/config.ini\"\n    depends_on:\n      - mysql8019\n    ports:\n      - \"9000:9000\"\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"容器的编排有先后顺序，以上述为例，必须先启动mysql与redis后才能启动应用程序。"}]},{"type":"element","tag":"h3","props":{"id":"编写dockerfile"},"children":[{"type":"text","value":"编写Dockerfile"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"FROM golang:alpine AS builder\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 下载依赖信息\nRUN go mod download\n\n# 将我们的代码编译成二进制可执行文件 web_app\nRUN go build -o web_app .\n\n###################\n# 接下来创建一个小镜像\n###################\nFROM debian:stretch-slim\n\n# 从builder镜像中把脚本拷贝到当前目录\nCOPY ./wait-for.sh /\n\n# 从builder镜像中把静态文件拷贝到当前目录\nCOPY ./templates /templates\nCOPY ./static /static\n\n# 从builder镜像中把配置文件拷贝到当前目录\nCOPY ./conf /conf\n\n\n# 从builder镜像中把/dist/app 拷贝到当前目录\nCOPY --from=builder /build/web_app /\n\nRUN set -eux; \\\n    apt-get update; \\\n    apt-get install -y \\\n        --no-install-recommends \\\n        netcat; \\\n        chmod 755 wait-for.sh\n\n# 不在Dockerfile里运行\n# ENTRYPOINT [\"/web_app\", \"conf/config.ini\"]\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"FROM golang:alpine AS builder\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 下载依赖信息\nRUN go mod download\n\n# 将我们的代码编译成二进制可执行文件 web_app\nRUN go build -o web_app .\n\n###################\n# 接下来创建一个小镜像\n###################\nFROM debian:stretch-slim\n\n# 从builder镜像中把脚本拷贝到当前目录\nCOPY ./wait-for.sh /\n\n# 从builder镜像中把静态文件拷贝到当前目录\nCOPY ./templates /templates\nCOPY ./static /static\n\n# 从builder镜像中把配置文件拷贝到当前目录\nCOPY ./conf /conf\n\n\n# 从builder镜像中把/dist/app 拷贝到当前目录\nCOPY --from=builder /build/web_app /\n\nRUN set -eux; \\\n    apt-get update; \\\n    apt-get install -y \\\n        --no-install-recommends \\\n        netcat; \\\n        chmod 755 wait-for.sh\n\n# 不在Dockerfile里运行\n# ENTRYPOINT [\"/web_app\", \"conf/config.ini\"]\n"}]}]},{"type":"element","tag":"h3","props":{"id":"执行"},"children":[{"type":"text","value":"执行"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker-compose up\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker-compose up\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[{"id":"编写-dockerfile","depth":2,"text":"编写 Dockerfile"},{"id":"构建-docker-镜像","depth":2,"text":"构建 docker 镜像"},{"id":"运行镜像","depth":2,"text":"运行镜像"},{"id":"分阶段构建","depth":2,"text":"分阶段构建"},{"id":"拷贝其他文件","depth":2,"text":"拷贝其他文件"},{"id":"容器关联","depth":2,"text":"容器关联"},{"id":"docker-compose容器编排","depth":2,"text":"docker compose(容器编排)","children":[{"id":"编写docker-composeyml","depth":3,"text":"编写docker-compose.yml"},{"id":"编写dockerfile","depth":3,"text":"编写Dockerfile"},{"id":"执行","depth":3,"text":"执行"}]}]}},"_type":"markdown","_id":"content:essay:39.docker部署.md","_source":"content","_file":"essay/39.docker部署.md","_stem":"essay/39.docker部署","_extension":"md"}