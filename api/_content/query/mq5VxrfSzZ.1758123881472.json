{"_path":"/essay/38.go项目框架及规范","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"go 项目框架及规范","description":"个人觉得比较不错的规范，四处偷师得来的","subtitle":"goプロジェクトの枠組みと規範","index":38,"date":"2023-06-15 10:32:44","lunar_date":"四月廿八","year":2023,"month":"06","month_en":"Jun","day":"15","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/038.jpg","categories":"golang","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"个人觉得比较不错的规范，四处偷师得来的"}]},{"type":"element","tag":"h1","props":{"id":"项目结构与分层"},"children":[{"type":"text","value":"项目结构与分层"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"├─controller\n├─dao\n│  ├─mysql\n│  └─redis\n├─logger\n├─logic\n├─middlewares\n├─models\n├─utils\n│  ├─jwt\n│  └─snowflake\n├─routes\n└─settings\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"├─controller\n├─dao\n│  ├─mysql\n│  └─redis\n├─logger\n├─logic\n├─middlewares\n├─models\n├─utils\n│  ├─jwt\n│  └─snowflake\n├─routes\n└─settings\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"controller"}]},{"type":"text","value":": 请求处理与参数校验\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"logic"}]},{"type":"text","value":": 业务逻辑的实现，也叫 service 层\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"dao"}]},{"type":"text","value":": 对数据库的相关操作"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"model"}]},{"type":"text","value":": 数据模型\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"routes"}]},{"type":"text","value":": 路由接口\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"settings"}]},{"type":"text","value":": 配置的加载\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"middlewares"}]},{"type":"text","value":": 中间件\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"utils"}]},{"type":"text","value":": 自定义功能的工具库，方便调用\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"logger"}]},{"type":"text","value":": 日志库的封装"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/foldleaf/go_web_template","rel":["nofollow"]},"children":[{"type":"text","value":"项目地址"}]}]},{"type":"element","tag":"h1","props":{"id":"配置文件的加载"},"children":[{"type":"text","value":"配置文件的加载"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"示例配置"}]},{"type":"element","tag":"pre","props":{"className":["language-yaml"],"code":"app:\n  name: \"web_app\"\n  mode: \"dev\"\n  port: 8081\n  start_time: \"2023-01-01\"\n  machine_id: 1\n\nlog:\n  # 日志级别\n  level: \"debug\"\n  #文件名\n  filename: \"web_app.log\"\n  # 文件最大大小（M）\n  max_size: 200\n  # 文件最大保存天数\n  max_age: 30\n  # 文件备份数量\n  max_backups: 7\n  \n\nmysql:\n  host: \"127.0.0.1\"\n  port: 3306\n  user: \"root\"\n  password: \"mysql123\"\n  dbname: \"sql_demo\"\n  # 最大连接数\n  max_open_conns: 200\n  # 空闲连接数\n  max_idle_conns: 50\n\n\nredis:\n  host: \"127.0.0.1\"\n  port: 6379\n  password: \"\"\n  db: 0\n  pool_size: 100\n","language":"yaml","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"app:\n  name: \"web_app\"\n  mode: \"dev\"\n  port: 8081\n  start_time: \"2023-01-01\"\n  machine_id: 1\n\nlog:\n  # 日志级别\n  level: \"debug\"\n  #文件名\n  filename: \"web_app.log\"\n  # 文件最大大小（M）\n  max_size: 200\n  # 文件最大保存天数\n  max_age: 30\n  # 文件备份数量\n  max_backups: 7\n  \n\nmysql:\n  host: \"127.0.0.1\"\n  port: 3306\n  user: \"root\"\n  password: \"mysql123\"\n  dbname: \"sql_demo\"\n  # 最大连接数\n  max_open_conns: 200\n  # 空闲连接数\n  max_idle_conns: 50\n\n\nredis:\n  host: \"127.0.0.1\"\n  port: 6379\n  password: \"\"\n  db: 0\n  pool_size: 100\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用viper加载配置"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package settings\n\nimport (\n    \"fmt\"\n    \"github.com/fsnotify/fsnotify\"\n    \"github.com/spf13/viper\"\n)\n\nfunc Init() (err error) {\n    // viper.SetConfigFile(\"config.yaml\")   //指定文件加后缀\n    viper.SetConfigName(\"config\") // 指定配置文件名称，不需要带后缀，会自动识别指定目录下相同的文件名\n    viper.SetConfigType(\"yaml\")   //指定配置文件类型，用于远程获取配置，本地时不生效\n    viper.AddConfigPath(\".\")      //指定查找配置文件的路径（这里用相对路径）\n    err = viper.ReadInConfig()    //读取文件配置\n    if err != nil {\n        // 读取配置信息失败\n        fmt.Println(\"viper.ReadInConfig() 读取配置信息失败:\", err)\n        return\n    }\n\n    viper.WatchConfig()\n    viper.OnConfigChange(func(in fsnotify.Event) {\n        fmt.Println(\"配置文件修改\")\n    })\n    return\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package settings\n\nimport (\n    \"fmt\"\n    \"github.com/fsnotify/fsnotify\"\n    \"github.com/spf13/viper\"\n)\n\nfunc Init() (err error) {\n    // viper.SetConfigFile(\"config.yaml\")   //指定文件加后缀\n    viper.SetConfigName(\"config\") // 指定配置文件名称，不需要带后缀，会自动识别指定目录下相同的文件名\n    viper.SetConfigType(\"yaml\")   //指定配置文件类型，用于远程获取配置，本地时不生效\n    viper.AddConfigPath(\".\")      //指定查找配置文件的路径（这里用相对路径）\n    err = viper.ReadInConfig()    //读取文件配置\n    if err != nil {\n        // 读取配置信息失败\n        fmt.Println(\"viper.ReadInConfig() 读取配置信息失败:\", err)\n        return\n    }\n\n    viper.WatchConfig()\n    viper.OnConfigChange(func(in fsnotify.Event) {\n        fmt.Println(\"配置文件修改\")\n    })\n    return\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此后使用viper.GetString()、viper.GetInt()即可获取配置参数，如"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"viper.GetInt(\"app.port\")\nviper.GetString(\"mysql.user\")\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"viper.GetInt(\"app.port\")\nviper.GetString(\"mysql.user\")\n"}]}]},{"type":"element","tag":"h1","props":{"id":"日志"},"children":[{"type":"text","value":"日志"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用zap日志库"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package logger\n\nimport (\n    \"net\"\n    \"net/http\"\n    \"net/http/httputil\"\n    \"os\"\n    \"runtime/debug\"\n    \"strings\"\n    \"time\"\n\n    \"github.com/gin-gonic/gin\"\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n    \"go.uber.org/zap/zapcore\"\n    \"gopkg.in/natefinch/lumberjack.v2\"\n)\n\n// var lg *zap.Logger\n\n// Init 初始化Logger\nfunc Init() (err error) {\n    writeSyncer := getLogWriter(\n        viper.GetString(\"log.filename\"),\n        viper.GetInt(\"max_size\"),\n        viper.GetInt(\"max_backups\"),\n        viper.GetInt(\"max_age\"),\n    )\n    encoder := getEncoder()\n    var l = new(zapcore.Level)\n    err = l.UnmarshalText([]byte(viper.GetString(\"log.level\")))\n    if err != nil {\n        return\n    }\n    var core zapcore.Core\n    if viper.GetString(\"app.mode\") == \"dev\" {\n        // 开发模式，日志输出到终端\n        consoleEncoder := zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig())\n        core = zapcore.NewTee(\n            zapcore.NewCore(encoder, writeSyncer, l),\n            zapcore.NewCore(consoleEncoder, zapcore.Lock(os.Stdout), zapcore.DebugLevel),\n        )\n    } else {\n        // 非开发模式，日志只输出到文件\n        core = zapcore.NewCore(encoder, writeSyncer, l)\n    }\n\n    lg := zap.New(core, zap.AddCaller())\n    zap.ReplaceGlobals(lg) // 替换zap包中全局的logger实例，后续在其他包中只需使用zap.L()调用即可\n    return\n}\n\nfunc getEncoder() zapcore.Encoder {\n    encoderConfig := zap.NewProductionEncoderConfig()\n    encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder\n    encoderConfig.TimeKey = \"time\"\n    encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder\n    encoderConfig.EncodeDuration = zapcore.SecondsDurationEncoder\n    encoderConfig.EncodeCaller = zapcore.ShortCallerEncoder\n    return zapcore.NewJSONEncoder(encoderConfig)\n}\n\nfunc getLogWriter(filename string, maxSize, maxBackup, maxAge int) zapcore.WriteSyncer {\n    lumberJackLogger := &lumberjack.Logger{\n        Filename:   filename,\n        MaxSize:    maxSize,\n        MaxBackups: maxBackup,\n        MaxAge:     maxAge,\n    }\n    return zapcore.AddSync(lumberJackLogger)\n}\n\n// GinLogger 接收gin框架默认的日志\nfunc GinLogger() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        start := time.Now()\n        path := c.Request.URL.Path\n        query := c.Request.URL.RawQuery\n        c.Next()\n\n        cost := time.Since(start)\n        zap.L().Info(path,\n            zap.Int(\"status\", c.Writer.Status()),\n            zap.String(\"method\", c.Request.Method),\n            zap.String(\"path\", path),\n            zap.String(\"query\", query),\n            zap.String(\"ip\", c.ClientIP()),\n            zap.String(\"user-agent\", c.Request.UserAgent()),\n            zap.String(\"errors\", c.Errors.ByType(gin.ErrorTypePrivate).String()),\n            zap.Duration(\"cost\", cost),\n        )\n    }\n}\n\n// GinRecovery recover掉项目可能出现的panic，并使用zap记录相关日志\nfunc GinRecovery(stack bool) gin.HandlerFunc {\n    return func(c *gin.Context) {\n        defer func() {\n            if err := recover(); err != nil {\n                // Check for a broken connection, as it is not really a\n                // condition that warrants a panic stack trace.\n                var brokenPipe bool\n                if ne, ok := err.(*net.OpError); ok {\n                    if se, ok := ne.Err.(*os.SyscallError); ok {\n                        if strings.Contains(strings.ToLower(se.Error()), \"broken pipe\") || strings.Contains(strings.ToLower(se.Error()), \"connection reset by peer\") {\n                            brokenPipe = true\n                        }\n                    }\n                }\n\n                httpRequest, _ := httputil.DumpRequest(c.Request, false)\n                if brokenPipe {\n                    zap.L().Error(c.Request.URL.Path,\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                    )\n                    // If the connection is dead, we can't write a status to it.\n                    c.Error(err.(error)) // nolint: errcheck\n                    c.Abort()\n                    return\n                }\n\n                if stack {\n                    zap.L().Error(\"[Recovery from panic]\",\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                        zap.String(\"stack\", string(debug.Stack())),\n                    )\n                } else {\n                    zap.L().Error(\"[Recovery from panic]\",\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                    )\n                }\n                c.AbortWithStatus(http.StatusInternalServerError)\n            }\n        }()\n        c.Next()\n    }\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package logger\n\nimport (\n    \"net\"\n    \"net/http\"\n    \"net/http/httputil\"\n    \"os\"\n    \"runtime/debug\"\n    \"strings\"\n    \"time\"\n\n    \"github.com/gin-gonic/gin\"\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n    \"go.uber.org/zap/zapcore\"\n    \"gopkg.in/natefinch/lumberjack.v2\"\n)\n\n// var lg *zap.Logger\n\n// Init 初始化Logger\nfunc Init() (err error) {\n    writeSyncer := getLogWriter(\n        viper.GetString(\"log.filename\"),\n        viper.GetInt(\"max_size\"),\n        viper.GetInt(\"max_backups\"),\n        viper.GetInt(\"max_age\"),\n    )\n    encoder := getEncoder()\n    var l = new(zapcore.Level)\n    err = l.UnmarshalText([]byte(viper.GetString(\"log.level\")))\n    if err != nil {\n        return\n    }\n    var core zapcore.Core\n    if viper.GetString(\"app.mode\") == \"dev\" {\n        // 开发模式，日志输出到终端\n        consoleEncoder := zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig())\n        core = zapcore.NewTee(\n            zapcore.NewCore(encoder, writeSyncer, l),\n            zapcore.NewCore(consoleEncoder, zapcore.Lock(os.Stdout), zapcore.DebugLevel),\n        )\n    } else {\n        // 非开发模式，日志只输出到文件\n        core = zapcore.NewCore(encoder, writeSyncer, l)\n    }\n\n    lg := zap.New(core, zap.AddCaller())\n    zap.ReplaceGlobals(lg) // 替换zap包中全局的logger实例，后续在其他包中只需使用zap.L()调用即可\n    return\n}\n\nfunc getEncoder() zapcore.Encoder {\n    encoderConfig := zap.NewProductionEncoderConfig()\n    encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder\n    encoderConfig.TimeKey = \"time\"\n    encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder\n    encoderConfig.EncodeDuration = zapcore.SecondsDurationEncoder\n    encoderConfig.EncodeCaller = zapcore.ShortCallerEncoder\n    return zapcore.NewJSONEncoder(encoderConfig)\n}\n\nfunc getLogWriter(filename string, maxSize, maxBackup, maxAge int) zapcore.WriteSyncer {\n    lumberJackLogger := &lumberjack.Logger{\n        Filename:   filename,\n        MaxSize:    maxSize,\n        MaxBackups: maxBackup,\n        MaxAge:     maxAge,\n    }\n    return zapcore.AddSync(lumberJackLogger)\n}\n\n// GinLogger 接收gin框架默认的日志\nfunc GinLogger() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        start := time.Now()\n        path := c.Request.URL.Path\n        query := c.Request.URL.RawQuery\n        c.Next()\n\n        cost := time.Since(start)\n        zap.L().Info(path,\n            zap.Int(\"status\", c.Writer.Status()),\n            zap.String(\"method\", c.Request.Method),\n            zap.String(\"path\", path),\n            zap.String(\"query\", query),\n            zap.String(\"ip\", c.ClientIP()),\n            zap.String(\"user-agent\", c.Request.UserAgent()),\n            zap.String(\"errors\", c.Errors.ByType(gin.ErrorTypePrivate).String()),\n            zap.Duration(\"cost\", cost),\n        )\n    }\n}\n\n// GinRecovery recover掉项目可能出现的panic，并使用zap记录相关日志\nfunc GinRecovery(stack bool) gin.HandlerFunc {\n    return func(c *gin.Context) {\n        defer func() {\n            if err := recover(); err != nil {\n                // Check for a broken connection, as it is not really a\n                // condition that warrants a panic stack trace.\n                var brokenPipe bool\n                if ne, ok := err.(*net.OpError); ok {\n                    if se, ok := ne.Err.(*os.SyscallError); ok {\n                        if strings.Contains(strings.ToLower(se.Error()), \"broken pipe\") || strings.Contains(strings.ToLower(se.Error()), \"connection reset by peer\") {\n                            brokenPipe = true\n                        }\n                    }\n                }\n\n                httpRequest, _ := httputil.DumpRequest(c.Request, false)\n                if brokenPipe {\n                    zap.L().Error(c.Request.URL.Path,\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                    )\n                    // If the connection is dead, we can't write a status to it.\n                    c.Error(err.(error)) // nolint: errcheck\n                    c.Abort()\n                    return\n                }\n\n                if stack {\n                    zap.L().Error(\"[Recovery from panic]\",\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                        zap.String(\"stack\", string(debug.Stack())),\n                    )\n                } else {\n                    zap.L().Error(\"[Recovery from panic]\",\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                    )\n                }\n                c.AbortWithStatus(http.StatusInternalServerError)\n            }\n        }()\n        c.Next()\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"比较繁琐，之后使用zap.L().Error()即可打印错误日志信息"}]},{"type":"element","tag":"h1","props":{"id":"数据库初始化"},"children":[{"type":"text","value":"数据库初始化"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用sqlx"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"\nimport (\n    \"fmt\"\n\n    \"github.com/jmoiron/sqlx\"\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nvar db *sqlx.DB\n\nfunc Init() (err error) {\n    // dsn := \"user:password@tcp(127.0.0.1:3306)/sql_test?charset=utf8mb4&parseTime=True\"\n    dsn := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True\",\n        viper.GetString(\"mysql.user\"),\n        viper.GetString(\"mysql.password\"),\n        viper.GetString(\"mysql.host\"),\n        viper.GetString(\"mysql.port\"),\n        viper.GetString(\"mysql.dbname\"),\n    )\n    // 也可以使用MustConnect连接不成功就panic\n    db, err = sqlx.Connect(\"mysql\", dsn)\n    if err != nil {\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n    db.SetMaxOpenConns(viper.GetInt(\"mysql.max_open_conns\"))\n    db.SetMaxIdleConns(viper.GetInt(\"mysql.max_idle_conns\"))\n    return\n}\n\nfunc Close() {\n    _ = db.Close()\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\nimport (\n    \"fmt\"\n\n    \"github.com/jmoiron/sqlx\"\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nvar db *sqlx.DB\n\nfunc Init() (err error) {\n    // dsn := \"user:password@tcp(127.0.0.1:3306)/sql_test?charset=utf8mb4&parseTime=True\"\n    dsn := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True\",\n        viper.GetString(\"mysql.user\"),\n        viper.GetString(\"mysql.password\"),\n        viper.GetString(\"mysql.host\"),\n        viper.GetString(\"mysql.port\"),\n        viper.GetString(\"mysql.dbname\"),\n    )\n    // 也可以使用MustConnect连接不成功就panic\n    db, err = sqlx.Connect(\"mysql\", dsn)\n    if err != nil {\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n    db.SetMaxOpenConns(viper.GetInt(\"mysql.max_open_conns\"))\n    db.SetMaxIdleConns(viper.GetInt(\"mysql.max_idle_conns\"))\n    return\n}\n\nfunc Close() {\n    _ = db.Close()\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用gorm"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"// 全局变量，db和error在其他文件里也需要使用\nvar db  *gorm.DB\n\nfunc Init() (err error){\n    //使用占位符，然后用setting.go里的配置参数来替代\n    dsn := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True\",\n        viper.GetString(\"mysql.user\"),\n        viper.GetString(\"mysql.password\"),\n        viper.GetString(\"mysql.host\"),\n        viper.GetString(\"mysql.port\"),\n        viper.GetString(\"mysql.dbname\"),\n    )\n    db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{\n        //禁用默认表名的复数形式\n        NamingStrategy: schema.NamingStrategy{SingularTable: true},\n    })\n    // if err != nil {\n    //  fmt.Println(\"数据库连接失败，请检查连接参数\", err)\n    // }\n    if err != nil {\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n\n    //\n\n    //数据库自动迁移，括号内的参数为需要构建的数据模型结构体\n    db.AutoMigrate()\n\n    sqlDB, err := db.DB()\n    if err != nil {\n        // fmt.Println(\"数据库连接设置出错，请检查连接参数\", err)\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n    // 以下这些参数可以写到配置文件里，然后使用 viper 来加载\n    // SetMaxIdleConns 设置空闲连接池中连接的最大数量\n    sqlDB.SetMaxIdleConns(50) //50可替换为 viper.GetInt(\"mysql.max_idle_conns\"),下同\n\n    // SetMaxOpenConns 设置打开数据库连接的最大数量。\n    sqlDB.SetMaxOpenConns(200)\n\n    // SetConnMaxLifetime 设置了连接可复用的最大时间。\n    //不能超过 gin 框架的连接超时时间\n    sqlDB.SetConnMaxLifetime(10 * time.Second)\n\n    //sqlDB.Close()\n}\n\nfunc Close() {\n    _ = db.Close()\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 全局变量，db和error在其他文件里也需要使用\nvar db  *gorm.DB\n\nfunc Init() (err error){\n    //使用占位符，然后用setting.go里的配置参数来替代\n    dsn := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True\",\n        viper.GetString(\"mysql.user\"),\n        viper.GetString(\"mysql.password\"),\n        viper.GetString(\"mysql.host\"),\n        viper.GetString(\"mysql.port\"),\n        viper.GetString(\"mysql.dbname\"),\n    )\n    db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{\n        //禁用默认表名的复数形式\n        NamingStrategy: schema.NamingStrategy{SingularTable: true},\n    })\n    // if err != nil {\n    //  fmt.Println(\"数据库连接失败，请检查连接参数\", err)\n    // }\n    if err != nil {\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n\n    //\n\n    //数据库自动迁移，括号内的参数为需要构建的数据模型结构体\n    db.AutoMigrate()\n\n    sqlDB, err := db.DB()\n    if err != nil {\n        // fmt.Println(\"数据库连接设置出错，请检查连接参数\", err)\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n    // 以下这些参数可以写到配置文件里，然后使用 viper 来加载\n    // SetMaxIdleConns 设置空闲连接池中连接的最大数量\n    sqlDB.SetMaxIdleConns(50) //50可替换为 viper.GetInt(\"mysql.max_idle_conns\"),下同\n\n    // SetMaxOpenConns 设置打开数据库连接的最大数量。\n    sqlDB.SetMaxOpenConns(200)\n\n    // SetConnMaxLifetime 设置了连接可复用的最大时间。\n    //不能超过 gin 框架的连接超时时间\n    sqlDB.SetConnMaxLifetime(10 * time.Second)\n\n    //sqlDB.Close()\n}\n\nfunc Close() {\n    _ = db.Close()\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"错误处理约定状态码"},"children":[{"type":"text","value":"错误处理/约定状态码"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"const (\n    SUCCESS = 200\n    ERROR   = 500\n    //约定状态码\n    //code=1000...用户模块错误\n    ERROR_USERNAME_USED  = 1001\n    ERROR_PASSWORD_WRONG = 1002\n    ERROR_USER_NOT_EXIST = 1003\n\n    ERROR_TOKEN_NOT_EXIST = 1004\n    ERROR_TOKEN_OUT_TIME  = 1005\n    ERROR_TOKEN_WRONG     = 1006\n    ERROR_TYPE_WRONG      = 1007\n\n    //code=2000...文章模块错误\n\n    //code=3000...分类模块错误\n\n    // 等等\n)\n\n\nvar codeMsg = map[int]string{\n    SUCCESS:               \"OK\",\n    ERROR:                 \"FAIL\",\n    ERROR_USERNAME_USED:   \"该用户名已存在\",\n    ERROR_PASSWORD_WRONG:  \"密码错误\",\n    ERROR_USER_NOT_EXIST:  \"用户不存在\",\n    ERROR_TOKEN_NOT_EXIST: \"token不存在\",\n    ERROR_TOKEN_OUT_TIME:  \"token已过期\",\n    ERROR_TOKEN_WRONG:     \"token错误\",\n    ERROR_TYPE_WRONG:      \" token格式错误\",\n}\n\n// GetErrMsg 根据状态码获取对应的信息信息\nfunc GetErrMsg(code int) string {\n    return codeMsg[code]\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const (\n    SUCCESS = 200\n    ERROR   = 500\n    //约定状态码\n    //code=1000...用户模块错误\n    ERROR_USERNAME_USED  = 1001\n    ERROR_PASSWORD_WRONG = 1002\n    ERROR_USER_NOT_EXIST = 1003\n\n    ERROR_TOKEN_NOT_EXIST = 1004\n    ERROR_TOKEN_OUT_TIME  = 1005\n    ERROR_TOKEN_WRONG     = 1006\n    ERROR_TYPE_WRONG      = 1007\n\n    //code=2000...文章模块错误\n\n    //code=3000...分类模块错误\n\n    // 等等\n)\n\n\nvar codeMsg = map[int]string{\n    SUCCESS:               \"OK\",\n    ERROR:                 \"FAIL\",\n    ERROR_USERNAME_USED:   \"该用户名已存在\",\n    ERROR_PASSWORD_WRONG:  \"密码错误\",\n    ERROR_USER_NOT_EXIST:  \"用户不存在\",\n    ERROR_TOKEN_NOT_EXIST: \"token不存在\",\n    ERROR_TOKEN_OUT_TIME:  \"token已过期\",\n    ERROR_TOKEN_WRONG:     \"token错误\",\n    ERROR_TYPE_WRONG:      \" token格式错误\",\n}\n\n// GetErrMsg 根据状态码获取对应的信息信息\nfunc GetErrMsg(code int) string {\n    return codeMsg[code]\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"路由接口"},"children":[{"type":"text","value":"路由接口"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 api/v1 创建控制数据模型的接口 user.go、article.go、category.go，以及控制登录的接口 login.go\n以用户模块为例"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"//查询用户是否存在\nfunc UserExist(ctx *gin.Context) {\n\n}\n//查询用户\n//查询用户列表\nfunc GetUsers(ctx *gin.Context) {\n\n}\n//添加用户\nfunc AddUser(ctx *gin.Context) {\n\n}\n//编辑用户\nfunc EditUser(ctx *gin.Context) {\n\n}\n//删除用户\nfunc DeleteUser(ctx *gin.Context) {\n\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"//查询用户是否存在\nfunc UserExist(ctx *gin.Context) {\n\n}\n//查询用户\n//查询用户列表\nfunc GetUsers(ctx *gin.Context) {\n\n}\n//添加用户\nfunc AddUser(ctx *gin.Context) {\n\n}\n//编辑用户\nfunc EditUser(ctx *gin.Context) {\n\n}\n//删除用户\nfunc DeleteUser(ctx *gin.Context) {\n\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 routes/routes.go 的 v1 路由组中创建路由接口"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"router := r.Group(\"api/v1\")\n    {\n        // User 用户模块路由接口\n        router.POST(\"user/add\", v1.AddUser)\n        router.GET(\"users\", v1.GetUsers)\n        router.PUT(\"user/:id\", v1.EditUser)\n        router.DELETE(\"user/:id\", v1.DeleteUser)\n\n        // 其他模块路由接口\n\n        // 其他模块路由接口\n    }\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"router := r.Group(\"api/v1\")\n    {\n        // User 用户模块路由接口\n        router.POST(\"user/add\", v1.AddUser)\n        router.GET(\"users\", v1.GetUsers)\n        router.PUT(\"user/:id\", v1.EditUser)\n        router.DELETE(\"user/:id\", v1.DeleteUser)\n\n        // 其他模块路由接口\n\n        // 其他模块路由接口\n    }\n"}]}]},{"type":"element","tag":"h1","props":{"id":"主函数"},"children":[{"type":"text","value":"主函数"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n\n    \"web_app/dao/mysql\"\n    \"web_app/dao/redis\"\n    \"web_app/logger\"\n    \"web_app/pkg/snowflake\"\n    \"web_app/routes\"\n    \"web_app/settings\"\n\n    // \"web_app/pkg/snowflake\"\n\n    \"context\"\n\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n    \"time\"\n    // \"github.com/gin-gonic/gin\"\n)\n\n// Go Web 开发通用脚手架模板\n\nfunc main() {\n    // 1. 加载配置\n    if err := settings.Init(); err != nil {\n        fmt.Println(\"settings.Init() 加载配置失败:\", err)\n        return\n    }\n    // 2. 初始化日志\n    if err := logger.Init(); err != nil {\n        fmt.Println(\"logger.Init() 初始化日志失败:\", err)\n        return\n    }\n    // 延迟日志\n    defer zap.L().Sync()\n    zap.L().Debug(\"logger init success ...\")\n    // 3. 初始化 MySQL 连接\n    if err := mysql.Init(); err != nil {\n        fmt.Println(\"mysql.Init() 初始化mysql数据库失败:\", err)\n        return\n    }\n    defer mysql.Close()\n\n    // 4. 初始化 Redis 连接\n    if err := redis.Init(); err != nil {\n        fmt.Println(\"redis.Init() 初始化redis数据库失败:\", err)\n        return\n    }\n    defer redis.Close()\n\n    // 5. 注册路由\n    r := routes.Setup()\n    // 6. 启动服务 （优雅关机）\n\n    srv := &http.Server{\n        Addr:    fmt.Sprintf(\":%d\", viper.GetInt(\"app.port\")),\n        Handler: r,\n    }\n\n    go func() {\n        // 开启一个goroutine启动服务\n        if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n            zap.L().Fatal(\"listen: %s\\n\", zap.Error(err))\n        }\n    }()\n\n    // 等待中断信号来优雅地关闭服务器，为关闭服务器操作设置一个5秒的超时\n    quit := make(chan os.Signal, 1) // 创建一个接收信号的通道\n    signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM) // 此处不会阻塞\n    <-quit                                               // 阻塞在此，当接收到上述两种信号时才会往下执行\n    zap.L().Info(\"Shutdown Server ...\")\n    // 创建一个5秒超时的context\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    // 5秒内优雅关闭服务（将未处理完的请求处理完再关闭服务），超过5秒就超时退出\n    if err := srv.Shutdown(ctx); err != nil {\n        zap.L().Fatal(\"Server Shutdown: \", zap.Error(err))\n    }\n\n    zap.L().Info(\"Server exiting\")\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n\n    \"web_app/dao/mysql\"\n    \"web_app/dao/redis\"\n    \"web_app/logger\"\n    \"web_app/pkg/snowflake\"\n    \"web_app/routes\"\n    \"web_app/settings\"\n\n    // \"web_app/pkg/snowflake\"\n\n    \"context\"\n\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n    \"time\"\n    // \"github.com/gin-gonic/gin\"\n)\n\n// Go Web 开发通用脚手架模板\n\nfunc main() {\n    // 1. 加载配置\n    if err := settings.Init(); err != nil {\n        fmt.Println(\"settings.Init() 加载配置失败:\", err)\n        return\n    }\n    // 2. 初始化日志\n    if err := logger.Init(); err != nil {\n        fmt.Println(\"logger.Init() 初始化日志失败:\", err)\n        return\n    }\n    // 延迟日志\n    defer zap.L().Sync()\n    zap.L().Debug(\"logger init success ...\")\n    // 3. 初始化 MySQL 连接\n    if err := mysql.Init(); err != nil {\n        fmt.Println(\"mysql.Init() 初始化mysql数据库失败:\", err)\n        return\n    }\n    defer mysql.Close()\n\n    // 4. 初始化 Redis 连接\n    if err := redis.Init(); err != nil {\n        fmt.Println(\"redis.Init() 初始化redis数据库失败:\", err)\n        return\n    }\n    defer redis.Close()\n\n    // 5. 注册路由\n    r := routes.Setup()\n    // 6. 启动服务 （优雅关机）\n\n    srv := &http.Server{\n        Addr:    fmt.Sprintf(\":%d\", viper.GetInt(\"app.port\")),\n        Handler: r,\n    }\n\n    go func() {\n        // 开启一个goroutine启动服务\n        if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n            zap.L().Fatal(\"listen: %s\\n\", zap.Error(err))\n        }\n    }()\n\n    // 等待中断信号来优雅地关闭服务器，为关闭服务器操作设置一个5秒的超时\n    quit := make(chan os.Signal, 1) // 创建一个接收信号的通道\n    signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM) // 此处不会阻塞\n    <-quit                                               // 阻塞在此，当接收到上述两种信号时才会往下执行\n    zap.L().Info(\"Shutdown Server ...\")\n    // 创建一个5秒超时的context\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    // 5秒内优雅关闭服务（将未处理完的请求处理完再关闭服务），超过5秒就超时退出\n    if err := srv.Shutdown(ctx); err != nil {\n        zap.L().Fatal(\"Server Shutdown: \", zap.Error(err))\n    }\n\n    zap.L().Info(\"Server exiting\")\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[]}},"_type":"markdown","_id":"content:essay:38.go项目框架及规范.md","_source":"content","_file":"essay/38.go项目框架及规范.md","_stem":"essay/38.go项目框架及规范","_extension":"md"}