[{"_path":"/essay/10000.关于本站","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"关于本站","description":"经过多方面的尝试，把hexo、vuepress、hugo、docusaurus等静态博客都搭了一遍，hugo是用go模板语法来写的，但是有点问题就是有些主题的依赖下载有问题，能用的主题又感觉不好看，docusaurus除了默认主题外唯一找到个不错的主题但似乎又因为npm依赖问题而放弃……最终方案是hexo-butterfly","subtitle":"このサイトについて","index":42,"date":"2030-01-30 08:47:26","lunar_date":"正月初九","year":"2023","month":"01","month_en":"Jan","day":"30","tag":"杂谈","tag_en":"RAMBLE","cover":"/img/rabbit/028.jpg","categories":"杂谈","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"经过多方面的尝试，把hexo、vuepress、hugo、docusaurus等静态博客都搭了一遍，hugo是用go模板语法来写的，但是有点问题就是有些主题的依赖下载有问题，能用的主题又感觉不好看，docusaurus除了默认主题外唯一找到个不错的主题但似乎又因为npm依赖问题而放弃……最终方案是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"hexo-butterfly"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用hexo作为主博客，在butterfly、sakura、shoka中最后选择了butterfly主题"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"hexo butterfly","src":"/img/essay/1000.%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/hexo1.PNG"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"hexo butterfly","src":"/img/essay/1000.%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/hexo2.PNG"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"现在自己做了一套设计，用nuxt3编写\n"},{"type":"element","tag":"img","props":{"alt":"leaf","src":"/img/essay/1000.%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/leaf.PNG"},"children":[]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[]}},"_type":"markdown","_id":"content:essay:10000.关于本站.md","_source":"content","_file":"essay/10000.关于本站.md","_stem":"essay/10000.关于本站","_extension":"md"},{"_path":"/essay/41.nuxt-tailwindcss踩坑指南","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"nuxt-tailwindcss 踩坑指南","description":"Nuxt 是基于 Vue.js 全栈 Web 框架;Tailwind CSS 是原子化 CSS 样式库","subtitle":"avoid the pitfalls of nuxt-tailwindcss","index":41,"tag":"技术","tag_en":"TECH","date":"2023/12/24","lunar_date":"冬月廿三","year":2023,"month":12,"month_en":"Jan","day":30,"cover":"/img/rabbit/041.jpg","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"安装nuxt"},"children":[{"type":"text","value":"安装nuxt"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"npx nuxi init nuxt-app\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npx nuxi init nuxt-app\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"安装失败解决方法：\n"},{"type":"element","tag":"a","props":{"href":"https://juejin.cn/post/7154586714416087076","rel":["nofollow"]},"children":[{"type":"text","value":"https://juejin.cn/post/7154586714416087076"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"1、host文件使用管理员权限修改：\nwin+x快捷键，使用powershell管理员权限打开hosts文件"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"notepad C:\\Windows\\System32\\drivers\\etc\\hosts\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"notepad C:\\Windows\\System32\\drivers\\etc\\hosts\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"2、在末尾添加一行"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"185.199.108.133 raw.githubusercontent.com"}]},{"type":"text","value":"，保存即可"}]},{"type":"element","tag":"h1","props":{"id":"安装tailwind-css"},"children":[{"type":"text","value":"安装tailwind css"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"npm install -D @nuxtjs/tailwindcss\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm install -D @nuxtjs/tailwindcss\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"打开 ./nuxt.config.ts 将 @nuxtjs/tailwindcss 模块添加至 modules 设定参数中"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"export default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss'],\n})\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss'],\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"初始化tailwind，会在根目录下生成文件 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"tailwind.config.js"}]}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"npx tailwindcss init\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npx tailwindcss init\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"./tailwind.config.js"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './components/**/*.{js,vue,ts}',\n    './layouts/**/*.vue',\n    './pages/**/*.vue',\n    './plugins/**/*.{js,ts}',\n    './app.vue',\n  ],\n  darkMode: 'class',\n  \n  theme: {\n    extend: {\n      colors: {\n        leaf: {\n          50: \"#5F99F7\",\n          100: \"#5F99F7\",\n        }\n      }\n    },\n  },\n  plugins: [\n    require('@tailwindcss/typography'),\n  ],\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './components/**/*.{js,vue,ts}',\n    './layouts/**/*.vue',\n    './pages/**/*.vue',\n    './plugins/**/*.{js,ts}',\n    './app.vue',\n  ],\n  darkMode: 'class',\n  \n  theme: {\n    extend: {\n      colors: {\n        leaf: {\n          50: \"#5F99F7\",\n          100: \"#5F99F7\",\n        }\n      }\n    },\n  },\n  plugins: [\n    require('@tailwindcss/typography'),\n  ],\n}\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-html"],"code":"<template>\n  <div class=\"\">\n  <!-- <div class=\"dark\"> 更改class名更换为下面 dark 字段的颜色（在tailwindcss配置文件中有定义）-->\n    <h1 class=\"text-red-500 dark:text-leaf-100\">twitter clone</h1>\n  </div>\n</template>\n","language":"html","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <div class=\"\">\n  <!-- <div class=\"dark\"> 更改class名更换为下面 dark 字段的颜色（在tailwindcss配置文件中有定义）-->\n    <h1 class=\"text-red-500 dark:text-leaf-100\">twitter clone</h1>\n  </div>\n</template>\n"}]}]},{"type":"element","tag":"h1","props":{"id":"路由"},"children":[{"type":"text","value":"路由"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"nuxt3通过文件结构约定了路由"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"./pages/\n└── index/\n    ├── blog/\n    │   ├── [...slug].vue\n    │   └── index.vue\n    └── index.vue\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./pages/\n└── index/\n    ├── blog/\n    │   ├── [...slug].vue\n    │   └── index.vue\n    └── index.vue\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在nuxt3中，pages目录下的每一个文件即为一个路由，文件名即为路由名，pages根目录下的index.vue为默认路由。\npages目录可创建子目录。目录的index.vue为对应的路由\n"},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"...slug"}]},{"type":"text","value":".vue官网叫做catch-all route，匹配该路由下的所有子路"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/"}]},{"type":"text","value":"：/pages/index.vue"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/blog"}]},{"type":"text","value":": /pages/blog/index.vue"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/blog/*"}]},{"type":"text","value":": /pages/blog/"},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"...slug"}]},{"type":"text","value":".vue"}]},{"type":"element","tag":"h1","props":{"id":"嵌套路由"},"children":[{"type":"text","value":"嵌套路由"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"关于嵌套路由，在nuxt中也是有约定的，父路由需要创建一个同名的文件夹,然后在其中放入子路由"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"./pages/\n└── index/\n    ├── blog/\n    │   ├── [...slug].vue\n    │   └── index.vue\n    ├── doc/\n    │    └── index.vue\n    └── index.vue\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./pages/\n└── index/\n    ├── blog/\n    │   ├── [...slug].vue\n    │   └── index.vue\n    ├── doc/\n    │    └── index.vue\n    └── index.vue\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"现在有一个两栏的布局："}]},{"type":"element","tag":"pre","props":{"className":["language-html"],"code":"<aside>\n  <NuxtLink to=\"/blog\">这是blog!</NuxtLink>\n  <NuxtLink to=\"/blog/about\">这是about</NuxtLink>\n  <NuxtLink to=\"/doc\">这是doc</NuxtLink>\n</aside>\n\n<main>\n  <NuxtPage/>\n</main>\n","language":"html","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<aside>\n  <NuxtLink to=\"/blog\">这是blog!</NuxtLink>\n  <NuxtLink to=\"/blog/about\">这是about</NuxtLink>\n  <NuxtLink to=\"/doc\">这是doc</NuxtLink>\n</aside>\n\n<main>\n  <NuxtPage/>\n</main>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这里，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/"}]},{"type":"text","value":"即为父路由，点击"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<NuxtLink/>"}]},{"type":"text","value":"，只有"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<NuxtPage/>"}]},{"type":"text","value":"中的内容会根据路由改变而发生变化"}]},{"type":"element","tag":"h1","props":{"id":"nuxt-content-模块"},"children":[{"type":"text","value":"Nuxt content 模块"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先在项目中导入content"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"npm install @nuxt/content\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm install @nuxt/content\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在nuxt.config.ts中添加该模块"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"export default defineNuxtConfig({\n  modules: [\n    '@nuxtjs/tailwindcss',\n    '@nuxt/content',\n  ],\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default defineNuxtConfig({\n  modules: [\n    '@nuxtjs/tailwindcss',\n    '@nuxt/content',\n  ],\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"创建./content目录"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"./content/\n└── blog/\n    ├── about.md\n    └── 001.md\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./content/\n└── blog/\n    ├── about.md\n    └── 001.md\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"创建./content/blog目录，该目录要对应./pages/blog\n然后访问路由，例如/blog/about，因为并没有定义这个路由，所以会匹配"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"[...slug].vue"}]},{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<ContentDoc />"}]},{"type":"text","value":"展示md文件的内容，要渲染内容可以使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<ContentRenderer />"}]}]},{"type":"element","tag":"pre","props":{"className":["language-html"],"code":"<template>\n    <main>\n        <ContentDoc />\n    </main>\n</template>\n","language":"html","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n    <main>\n        <ContentDoc />\n    </main>\n</template>\n"}]}]},{"type":"element","tag":"h1","props":{"id":"contentdoc文字渲染"},"children":[{"type":"text","value":"contentDoc文字渲染"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"安装tailwindcss插件"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"npm i -D @tailwindcss/typography\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i -D @tailwindcss/typography\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在tailwind.config.js中添加配置"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    './components/**/*.{js,vue,ts}',\n    './layouts/**/*.vue',\n    './pages/**/*.vue',\n    './plugins/**/*.{js,ts}',\n    './app.vue',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [\n    require('@tailwindcss/typography'),\n  ],\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    './components/**/*.{js,vue,ts}',\n    './layouts/**/*.vue',\n    './pages/**/*.vue',\n    './plugins/**/*.{js,ts}',\n    './app.vue',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [\n    require('@tailwindcss/typography'),\n  ],\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"[...slug].vue"}]},{"type":"text","value":"中添加样式"}]},{"type":"element","tag":"pre","props":{"className":["language-html"],"code":"<template>\n    <main>\n        <ContentDoc class=\"prose\"/>\n    </main>\n</template>\n","language":"html","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n    <main>\n        <ContentDoc class=\"prose\"/>\n    </main>\n</template>\n"}]}]},{"type":"element","tag":"h1","props":{"id":"content的路由不支持纯中文"},"children":[{"type":"text","value":"content的路由不支持纯中文"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"md文件为纯中文似乎不能解析，但中文混有数字或字母的就可以解析"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"解决方法 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"https://github.com/nuxt/content/issues/1383#issuecomment-1196237686"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"文件:"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"./content/blog/中文.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"markdown"}]},{"type":"text","value":" 的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"format"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"---\n_path: /blog/中文\n---\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"---\n_path: /blog/中文\n---\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"路由:"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/blog/中文"}]}]},{"type":"element","tag":"h1","props":{"id":"contentlist-文章列表加跳转"},"children":[{"type":"text","value":"ContentList 文章列表加跳转"}]},{"type":"element","tag":"pre","props":{"className":["language-html"],"code":"<ContentList path=\"/articles\" v-slot=\"{ list }\">\n    <div v-for=\"article in list\" :key=\"article._path\">\n        <NuxtLink :to=\"article._path\">\n            <h2>{{ article.title }}</h2>\n            <p>{{ article.description }}</p>\n        </NuxtLink>\n  </div>\n</ContentList>\n","language":"html","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<ContentList path=\"/articles\" v-slot=\"{ list }\">\n    <div v-for=\"article in list\" :key=\"article._path\">\n        <NuxtLink :to=\"article._path\">\n            <h2>{{ article.title }}</h2>\n            <p>{{ article.description }}</p>\n        </NuxtLink>\n  </div>\n</ContentList>\n"}]}]},{"type":"element","tag":"h1","props":{"id":"资源路径"},"children":[{"type":"text","value":"资源路径"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"字体、图片资源放在public文件夹下，使用时用/img/imge1.jpg、/fonts/font1.ttf"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\ntailwind.css放在assets文件夹下，如~assests/css/tailwind.css"}]},{"type":"element","tag":"h1","props":{"id":"代码块高亮"},"children":[{"type":"text","value":"代码块高亮"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.boyyang.cn/detail/?id=19","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.boyyang.cn/detail/?id=19"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"安装highlight.js"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"npm i highlight.js\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i highlight.js\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"./plugins文件夹下新建highlight.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"import hljs from 'highlight.js'\nimport {defineNuxtPlugin} from '#app'\nimport 'highlight.js/styles/base16/onedark.css'\nimport bash from 'highlight.js/lib/languages/bash'\n// import html from 'highlight.js/lib/languages/html'\nimport javascript from 'highlight.js/lib/languages/javascript'\nimport css from 'highlight.js/lib/languages/css'\nimport go from 'highlight.js/lib/languages/go'\nimport java from 'highlight.js/lib/languages/java'\nimport python from 'highlight.js/lib/languages/python'\nimport rust from 'highlight.js/lib/languages/rust'\n\nhljs.registerLanguage('bash',bash)\n// hljs.registerLanguage('html',html)\nhljs.registerLanguage('javascript',javascript)\nhljs.registerLanguage('css',css)\nhljs.registerLanguage('go',go)\nhljs.registerLanguage('java',java)\nhljs.registerLanguage('python',python)\nhljs.registerLanguage('rust',rust)\n\nexport default defineNuxtPlugin((nuxtApp) => {\n    nuxtApp.vueApp.directive('highlight',\n        {\n            mounted(el) {\n                let element = el.querySelectorAll('pre code')\n                element.forEach((block: HTMLElement) => {\n                    if (block.dataset.highlighted === 'yes') return\n                    hljs.highlightElement(block)\n                })\n            },\n            updated(el) {\n                let element = el.querySelectorAll('pre code')\n                element.forEach((block: HTMLElement) => {\n                    if (block.dataset.highlighted === 'yes') return\n                    hljs.highlightElement(block)\n                })\n            },\n            getSSRProps(binding, vnode) {\n                // 你可以在这里提供SSR特定的props\n                return {}\n            },\n        },\n    )\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import hljs from 'highlight.js'\nimport {defineNuxtPlugin} from '#app'\nimport 'highlight.js/styles/base16/onedark.css'\nimport bash from 'highlight.js/lib/languages/bash'\n// import html from 'highlight.js/lib/languages/html'\nimport javascript from 'highlight.js/lib/languages/javascript'\nimport css from 'highlight.js/lib/languages/css'\nimport go from 'highlight.js/lib/languages/go'\nimport java from 'highlight.js/lib/languages/java'\nimport python from 'highlight.js/lib/languages/python'\nimport rust from 'highlight.js/lib/languages/rust'\n\nhljs.registerLanguage('bash',bash)\n// hljs.registerLanguage('html',html)\nhljs.registerLanguage('javascript',javascript)\nhljs.registerLanguage('css',css)\nhljs.registerLanguage('go',go)\nhljs.registerLanguage('java',java)\nhljs.registerLanguage('python',python)\nhljs.registerLanguage('rust',rust)\n\nexport default defineNuxtPlugin((nuxtApp) => {\n    nuxtApp.vueApp.directive('highlight',\n        {\n            mounted(el) {\n                let element = el.querySelectorAll('pre code')\n                element.forEach((block: HTMLElement) => {\n                    if (block.dataset.highlighted === 'yes') return\n                    hljs.highlightElement(block)\n                })\n            },\n            updated(el) {\n                let element = el.querySelectorAll('pre code')\n                element.forEach((block: HTMLElement) => {\n                    if (block.dataset.highlighted === 'yes') return\n                    hljs.highlightElement(block)\n                })\n            },\n            getSSRProps(binding, vnode) {\n                // 你可以在这里提供SSR特定的props\n                return {}\n            },\n        },\n    )\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":".nuxt.config.ts配置文件中添加plugins:"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"plugins: [\n        {\n            src: '~/plugins/highlight.ts',\n            mode: 'all',\n        },\n    ],\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"plugins: [\n        {\n            src: '~/plugins/highlight.ts',\n            mode: 'all',\n        },\n    ],\n"}]}]},{"type":"element","tag":"h1","props":{"id":"生产环境资源无法加载"},"children":[{"type":"text","value":"生产环境资源无法加载"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Failed to load resource: the server responded with a status of 404 (Not Found)"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/nuxt/issues/21974","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/nuxt/nuxt/issues/21974"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在./nuxt.config.ts中"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"export default defineNuxtConfig({\n  experimental: {\n    payloadExtraction: false\n  }\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default defineNuxtConfig({\n  experimental: {\n    payloadExtraction: false\n  }\n})\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[]}},"_type":"markdown","_id":"content:essay:41.nuxt-tailwindcss踩坑指南.md","_source":"content","_file":"essay/41.nuxt-tailwindcss踩坑指南.md","_stem":"essay/41.nuxt-tailwindcss踩坑指南","_extension":"md"},{"_path":"/essay/40.nginx部署","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"nginx部署","description":"nginx (\"engine x\") is an HTTP web server, reverse proxy, content cache, load balancer, TCP/UDP proxy server, and mail proxy server. Originally written by Igor Sysoev and distributed under the 2-clause BSD License.","subtitle":"Nginx deployment","index":40,"date":"2023-06-15 20:15:00","lunar_date":"四月廿八","year":2023,"month":"06","month_en":"Jun","day":"15","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/040.jpg","categories":"部署","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"正向代理反向代理"},"children":[{"type":"text","value":"正向代理、反向代理"}]},{"type":"element","tag":"h2","props":{"id":"正向代理"},"children":[{"type":"text","value":"正向代理"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作为客户端的代理，服务端只与客户端的代理进行交互。服务端实际上不会知道与它交互的客户端是哪个，它只与代理接收或发送消息，代理则转发消息给客户端。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"例子"}]},{"type":"text","value":": 魔法上网，服务端不会知道客户端的 ip"}]},{"type":"element","tag":"h2","props":{"id":"反向代理"},"children":[{"type":"text","value":"反向代理"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作为服务端的代理，例如魔法上网，客户端只与服务端的代理进行交互。客户端只与代理接收或发送消息，代理则转发消息给服务端。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"例子"}]},{"type":"text","value":": 公司内网，服务端在局域网内，外网无法直接访问，需要通过网关这个代理来转发请求"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nginx 就属于反向代理"}]},{"type":"element","tag":"h1","props":{"id":"nginx-常见命令"},"children":[{"type":"text","value":"Nginx 常见命令"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"nginx -s stop    # 停止 Nginx 服务\nnginx -s reload  # 重新加载配置文件\nnginx -s quit    # 平滑停止 Nginx 服务\nnginx -t         # 测试配置文件是否正确\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nginx -s stop    # 停止 Nginx 服务\nnginx -s reload  # 重新加载配置文件\nnginx -s quit    # 平滑停止 Nginx 服务\nnginx -t         # 测试配置文件是否正确\n"}]}]},{"type":"element","tag":"h1","props":{"id":"nginx-部署"},"children":[{"type":"text","value":"Nginx 部署"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nginx 相关配置文件目录: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/etc/nginx/"}]},{"type":"text","value":"\n主配置文件为: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/etc/nginx/nginx.conf"}]}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"# 进程\nworker_processes  1;\n\n# 连接数\nevents {\n    worker_connections  1024;\n}\n\n# http 服务\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        location / {\n            proxy_pass                 http://127.0.0.1:8084;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# 进程\nworker_processes  1;\n\n# 连接数\nevents {\n    worker_connections  1024;\n}\n\n# http 服务\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        location / {\n            proxy_pass                 http://127.0.0.1:8084;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行下面的命令检查配置文件语法："}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"nginx -t\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nginx -t\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行下面的命令重新加载配置文件："}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"nginx -s reload\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nginx -s reload\n"}]}]},{"type":"element","tag":"h1","props":{"id":"负载均衡"},"children":[{"type":"text","value":"负载均衡"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"各种地方都说得高大上，但使用起来并不复杂，其中一种就是一套后端代码的服务部署到多个地址"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用 nginx 的 upstream 配置来添加多个服务器地址实现负载均衡。"}]},{"type":"element","tag":"h1","props":{"id":"轮询默认"},"children":[{"type":"text","value":"轮询(默认)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"即按时间顺序逐一分配到不同的后端服务器"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"worker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n    \n    upstream backend {\n      server 127.0.0.1:9000;\n      # 这里需要填真实可用的地址，默认轮询\n      #server backend1.example.com;\n      #server backend2.example.com;\n    }\n\n    server {\n        # nginx 的端口\n        listen       80;\n        server_name  localhost;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        location / {\n            proxy_pass                 http://backend/;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"worker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n    \n    upstream backend {\n      server 127.0.0.1:9000;\n      # 这里需要填真实可用的地址，默认轮询\n      #server backend1.example.com;\n      #server backend2.example.com;\n    }\n\n    server {\n        # nginx 的端口\n        listen       80;\n        server_name  localhost;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        location / {\n            proxy_pass                 http://backend/;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"权重"},"children":[{"type":"text","value":"权重"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"weight 代表权重，默认为1,权重越高被分配的客户端越多"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"weight和访问比率成正比，用于后端服务器性能不均的情况。 例如"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"upstream backend{\n    server 127.0.0.1:9000 weight=5;\n    server backend1.example.com weight=1;\n    server backend2.example.com weight=2;\n}\n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"upstream backend{\n    server 127.0.0.1:9000 weight=5;\n    server backend1.example.com weight=1;\n    server backend2.example.com weight=2;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其他部分与上述的轮询一样，下同"}]},{"type":"element","tag":"h1","props":{"id":"最小连接"},"children":[{"type":"text","value":"最小连接"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"分配到当前连接数最小的服务"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"upstream backend { \n    least_conn;\n    server 127.0.0.1:9000; \n    server backend1.example.com;\n    server backend2.example.com;\n}   \n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"upstream backend { \n    least_conn;\n    server 127.0.0.1:9000; \n    server backend1.example.com;\n    server backend2.example.com;\n}   \n"}]}]},{"type":"element","tag":"h1","props":{"id":"ip_hash"},"children":[{"type":"text","value":"ip_hash"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"每个请求按访问ip的hash值分配，每个访问客户端会固定访问一个后端服务器，可以解决会话Session丢失的问题"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"upstream backend { \n    ip_hash;\n    server 127.0.0.1:9000; \n    server backend1.example.com;\n    server backend2.example.com;\n}   \n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"upstream backend { \n    ip_hash;\n    server 127.0.0.1:9000; \n    server backend1.example.com;\n    server backend2.example.com;\n}   \n"}]}]},{"type":"element","tag":"h1","props":{"id":"nginx分离静态文件请求"},"children":[{"type":"text","value":"Nginx分离静态文件请求"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"将静态文件部分的请求直接使用 nginx 处理，而将 API 接口类的动态处理请求转发给后端的 Go 程序来处理。"}]},{"type":"element","tag":"pre","props":{"className":["language-nginx"],"code":"worker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  web_app;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        # 静态文件请求\n        location ~ .*\\.(gif|jpg|jpeg|png|js|css|eot|ttf|woff|svg|otf)$ {\n            access_log off;\n            expires    1d;\n            root       /data/app/web_app;\n        }\n\n        # index.html页面请求\n        # 因为是单页面应用这里使用 try_files 处理一下，避免刷新页面时出现404的问题\n        location / {\n            root /data/app/web_app/templates;\n            index index.html;\n            try_files $uri $uri/ /index.html;\n        }\n\n        # API请求\n        location /api {\n            # 后端服务的地址\n            proxy_pass                 http://127.0.0.1:9000;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n","language":"nginx","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"worker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  web_app;\n\n        access_log   /var/log/web_app-access.log;\n        error_log    /var/log/web_app-error.log;\n\n        # 静态文件请求\n        location ~ .*\\.(gif|jpg|jpeg|png|js|css|eot|ttf|woff|svg|otf)$ {\n            access_log off;\n            expires    1d;\n            root       /data/app/web_app;\n        }\n\n        # index.html页面请求\n        # 因为是单页面应用这里使用 try_files 处理一下，避免刷新页面时出现404的问题\n        location / {\n            root /data/app/web_app/templates;\n            index index.html;\n            try_files $uri $uri/ /index.html;\n        }\n\n        # API请求\n        location /api {\n            # 后端服务的地址\n            proxy_pass                 http://127.0.0.1:9000;\n            proxy_redirect             off;\n            proxy_set_header           Host             $host;\n            proxy_set_header           X-Real-IP        $remote_addr;\n            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n    }\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"前后端分离部署"},"children":[{"type":"text","value":"前后端分离部署"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前端和后端分开部署到不同的服务器，我们需要处理跨域问题，关于处理跨域问题请见 "},{"type":"element","tag":"a","props":{"href":""},"children":[{"type":"text","value":"前后端交互"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[{"id":"正向代理","depth":2,"text":"正向代理"},{"id":"反向代理","depth":2,"text":"反向代理"}]}},"_type":"markdown","_id":"content:essay:40.nginx部署.md","_source":"content","_file":"essay/40.nginx部署.md","_stem":"essay/40.nginx部署","_extension":"md"},{"_path":"/essay/39.docker部署","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"docker部署","description":"","subtitle":"Docker deployment","index":39,"date":"2023-06-15 20:09:52","lunar_date":"四月廿八","year":2023,"month":"06","month_en":"Jun","day":"15","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/039.jpg","categories":"部署","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"基本使用"},"children":[{"type":"text","value":"基本使用"}]},{"type":"element","tag":"h2","props":{"id":"编写-dockerfile"},"children":[{"type":"text","value":"编写 Dockerfile"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在项目根目录下编写Dockerfile(默认使用名称就是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Dockerfile"}]},{"type":"text","value":"，不需要后缀)"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"FROM golang:alpine\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 将我们的代码编译成二进制可执行文件app\nRUN go build -o app .\n\n# 移动到用于存放生成的二进制文件的 /dist 目录\nWORKDIR /dist\n\n# 将二进制文件从 /build 目录复制到这里\nRUN cp /build/app .\n\n# 声明服务端口\nEXPOSE 9000\n\n# 启动容器时运行的命令\nCMD [\"/dist/app\"]\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"FROM golang:alpine\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 将我们的代码编译成二进制可执行文件app\nRUN go build -o app .\n\n# 移动到用于存放生成的二进制文件的 /dist 目录\nWORKDIR /dist\n\n# 将二进制文件从 /build 目录复制到这里\nRUN cp /build/app .\n\n# 声明服务端口\nEXPOSE 9000\n\n# 启动容器时运行的命令\nCMD [\"/dist/app\"]\n"}]}]},{"type":"element","tag":"h2","props":{"id":"构建-docker-镜像"},"children":[{"type":"text","value":"构建 docker 镜像"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"项目根目录下执行，创建镜像并制定镜像名为 web_app"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker build . -t web_app\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker build . -t web_app\n"}]}]},{"type":"element","tag":"h2","props":{"id":"运行镜像"},"children":[{"type":"text","value":"运行镜像"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"指定端口运行镜像"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker run -p 9000:9000 web_app\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker run -p 9000:9000 web_app\n"}]}]},{"type":"element","tag":"h1","props":{"id":"最佳实践"},"children":[{"type":"text","value":"最佳实践"}]},{"type":"element","tag":"h2","props":{"id":"分阶段构建"},"children":[{"type":"text","value":"分阶段构建"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Go 程序编译之后会得到一个可执行的二进制文件，在最终的镜像中是不需要 go 编译器的，但是以上的 dockerfile 会把 go 的编译环境也打包到镜像中。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"分阶段构建的目的是仅打包需要打包的，尽可能地减小镜像的体积"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"###################\n# 1. AS: 构建阶段作为一个镜像,命名为 builder\n###################\nFROM golang:alpine AS builder\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 将我们的代码编译成二进制可执行文件 app\nRUN go build -o app .\n\n###################\n# 2. 创建一个小镜像，scratch 是 docker 中的最小镜像\n###################\nFROM scratch\n\n# 从builder镜像中把/dist/app 拷贝到当前目录\nCOPY --from=builder /build/app /\n\n# 需要运行的命令\nENTRYPOINT [\"/app\"]\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"###################\n# 1. AS: 构建阶段作为一个镜像,命名为 builder\n###################\nFROM golang:alpine AS builder\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 将我们的代码编译成二进制可执行文件 app\nRUN go build -o app .\n\n###################\n# 2. 创建一个小镜像，scratch 是 docker 中的最小镜像\n###################\nFROM scratch\n\n# 从builder镜像中把/dist/app 拷贝到当前目录\nCOPY --from=builder /build/app /\n\n# 需要运行的命令\nENTRYPOINT [\"/app\"]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"将编译环境的部分给忽略掉，只把可执行文件的镜像拷贝到一个最小镜像中"}]},{"type":"element","tag":"h2","props":{"id":"拷贝其他文件"},"children":[{"type":"text","value":"拷贝其他文件"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"除了go还附带其他文件，比如网页的静态文件等等则需要拷贝，一起放在镜像中"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"...\nFROM scratch\n\nCOPY ./templates /templates\nCOPY ./static /static\nCOPY ./conf /conf\n...\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\nFROM scratch\n\nCOPY ./templates /templates\nCOPY ./static /static\nCOPY ./conf /conf\n...\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不过这种是前后端放在一起部署，并非所谓的前后端分离，前后端分离一般会是使用 nginx 来部署，之后再介绍。"}]},{"type":"element","tag":"h1","props":{"id":"多容器"},"children":[{"type":"text","value":"多容器"}]},{"type":"element","tag":"h2","props":{"id":"容器关联"},"children":[{"type":"text","value":"容器关联"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在使用多个容器时会用到，比如在使用 MySQL 时是用的docker容器，容器名为MySQL123。那么在配置文件中修改host项为容器名，如:"}]},{"type":"element","tag":"pre","props":{"className":["language-yaml"],"code":"host: mysql123\n","language":"yaml","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"host: mysql123\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"修改后重新构建镜像"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker build . -t web_app\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker build . -t web_app\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"运行应用容器并与容器"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"mysql123"}]},{"type":"text","value":"关联"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker run --link=mysql123:mysql123 -p 8888:8888 web_app_app\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker run --link=mysql123:mysql123 -p 8888:8888 web_app_app\n"}]}]},{"type":"element","tag":"h2","props":{"id":"docker-compose容器编排"},"children":[{"type":"text","value":"docker compose(容器编排)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"参考于别处"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用Dockerfile定义你的应用环境以便可以在任何地方复制。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"定义组成应用程序的服务，docker-compose.yml 以便它们可以在隔离的环境中一起运行。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"执行 docker-compose up命令来启动并运行整个应用程序。"}]}]},{"type":"element","tag":"h3","props":{"id":"编写docker-composeyml"},"children":[{"type":"text","value":"编写docker-compose.yml"}]},{"type":"element","tag":"pre","props":{"className":["language-yaml"],"code":"文件名:docker-compose.yml\n# yaml 配置\nversion: \"3.7\"\nservices:\n  # mysql容器\n  mysql8019:\n    image: \"mysql:8.0.19\"\n    ports:\n      - \"33061:3306\"\n    command: \"--default-authentication-plugin=mysql_native_password --init-file /data/application/init.sql\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"mysql123\"\n      MYSQL_DATABASE: \"web_app\"\n      MYSQL_PASSWORD: \"mysql123\"\n    volumes:\n      - ./init.sql:/data/application/init.sql # 数据库初始化\n    \n  # redis容器, 参考mysql即可\n  redis:\n    image: \"\"\n    ports:\n      - \"\"\n\n  # 应用程序的容器\n  web_app:\n    build: .\n    command: sh -c \"./wait-for.sh mysql8019:3306 redis:6379 -- ./web_app ./conf/config.ini\"\n    depends_on:\n      - mysql8019\n    ports:\n      - \"9000:9000\"\n","language":"yaml","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"文件名:docker-compose.yml\n# yaml 配置\nversion: \"3.7\"\nservices:\n  # mysql容器\n  mysql8019:\n    image: \"mysql:8.0.19\"\n    ports:\n      - \"33061:3306\"\n    command: \"--default-authentication-plugin=mysql_native_password --init-file /data/application/init.sql\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"mysql123\"\n      MYSQL_DATABASE: \"web_app\"\n      MYSQL_PASSWORD: \"mysql123\"\n    volumes:\n      - ./init.sql:/data/application/init.sql # 数据库初始化\n    \n  # redis容器, 参考mysql即可\n  redis:\n    image: \"\"\n    ports:\n      - \"\"\n\n  # 应用程序的容器\n  web_app:\n    build: .\n    command: sh -c \"./wait-for.sh mysql8019:3306 redis:6379 -- ./web_app ./conf/config.ini\"\n    depends_on:\n      - mysql8019\n    ports:\n      - \"9000:9000\"\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"容器的编排有先后顺序，以上述为例，必须先启动mysql与redis后才能启动应用程序。"}]},{"type":"element","tag":"h3","props":{"id":"编写dockerfile"},"children":[{"type":"text","value":"编写Dockerfile"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"FROM golang:alpine AS builder\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 下载依赖信息\nRUN go mod download\n\n# 将我们的代码编译成二进制可执行文件 web_app\nRUN go build -o web_app .\n\n###################\n# 接下来创建一个小镜像\n###################\nFROM debian:stretch-slim\n\n# 从builder镜像中把脚本拷贝到当前目录\nCOPY ./wait-for.sh /\n\n# 从builder镜像中把静态文件拷贝到当前目录\nCOPY ./templates /templates\nCOPY ./static /static\n\n# 从builder镜像中把配置文件拷贝到当前目录\nCOPY ./conf /conf\n\n\n# 从builder镜像中把/dist/app 拷贝到当前目录\nCOPY --from=builder /build/web_app /\n\nRUN set -eux; \\\n    apt-get update; \\\n    apt-get install -y \\\n        --no-install-recommends \\\n        netcat; \\\n        chmod 755 wait-for.sh\n\n# 不在Dockerfile里运行\n# ENTRYPOINT [\"/web_app\", \"conf/config.ini\"]\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"FROM golang:alpine AS builder\n\n# 为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\n    GOPROXY=https://goproxy.cn,direct \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# 移动到工作目录：/build\nWORKDIR /build\n\n# 将代码复制到容器中\nCOPY . .\n\n# 下载依赖信息\nRUN go mod download\n\n# 将我们的代码编译成二进制可执行文件 web_app\nRUN go build -o web_app .\n\n###################\n# 接下来创建一个小镜像\n###################\nFROM debian:stretch-slim\n\n# 从builder镜像中把脚本拷贝到当前目录\nCOPY ./wait-for.sh /\n\n# 从builder镜像中把静态文件拷贝到当前目录\nCOPY ./templates /templates\nCOPY ./static /static\n\n# 从builder镜像中把配置文件拷贝到当前目录\nCOPY ./conf /conf\n\n\n# 从builder镜像中把/dist/app 拷贝到当前目录\nCOPY --from=builder /build/web_app /\n\nRUN set -eux; \\\n    apt-get update; \\\n    apt-get install -y \\\n        --no-install-recommends \\\n        netcat; \\\n        chmod 755 wait-for.sh\n\n# 不在Dockerfile里运行\n# ENTRYPOINT [\"/web_app\", \"conf/config.ini\"]\n"}]}]},{"type":"element","tag":"h3","props":{"id":"执行"},"children":[{"type":"text","value":"执行"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker-compose up\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker-compose up\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[{"id":"编写-dockerfile","depth":2,"text":"编写 Dockerfile"},{"id":"构建-docker-镜像","depth":2,"text":"构建 docker 镜像"},{"id":"运行镜像","depth":2,"text":"运行镜像"},{"id":"分阶段构建","depth":2,"text":"分阶段构建"},{"id":"拷贝其他文件","depth":2,"text":"拷贝其他文件"},{"id":"容器关联","depth":2,"text":"容器关联"},{"id":"docker-compose容器编排","depth":2,"text":"docker compose(容器编排)","children":[{"id":"编写docker-composeyml","depth":3,"text":"编写docker-compose.yml"},{"id":"编写dockerfile","depth":3,"text":"编写Dockerfile"},{"id":"执行","depth":3,"text":"执行"}]}]}},"_type":"markdown","_id":"content:essay:39.docker部署.md","_source":"content","_file":"essay/39.docker部署.md","_stem":"essay/39.docker部署","_extension":"md"},{"_path":"/essay/38.go项目框架及规范","_dir":"essay","_draft":false,"_partial":false,"_locale":"","title":"go 项目框架及规范","description":"个人觉得比较不错的规范，四处偷师得来的","subtitle":"goプロジェクトの枠組みと規範","index":38,"date":"2023-06-15 10:32:44","lunar_date":"四月廿八","year":2023,"month":"06","month_en":"Jun","day":"15","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/038.jpg","categories":"golang","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"个人觉得比较不错的规范，四处偷师得来的"}]},{"type":"element","tag":"h1","props":{"id":"项目结构与分层"},"children":[{"type":"text","value":"项目结构与分层"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"├─controller\n├─dao\n│  ├─mysql\n│  └─redis\n├─logger\n├─logic\n├─middlewares\n├─models\n├─utils\n│  ├─jwt\n│  └─snowflake\n├─routes\n└─settings\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"├─controller\n├─dao\n│  ├─mysql\n│  └─redis\n├─logger\n├─logic\n├─middlewares\n├─models\n├─utils\n│  ├─jwt\n│  └─snowflake\n├─routes\n└─settings\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"controller"}]},{"type":"text","value":": 请求处理与参数校验\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"logic"}]},{"type":"text","value":": 业务逻辑的实现，也叫 service 层\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"dao"}]},{"type":"text","value":": 对数据库的相关操作"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"model"}]},{"type":"text","value":": 数据模型\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"routes"}]},{"type":"text","value":": 路由接口\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"settings"}]},{"type":"text","value":": 配置的加载\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"middlewares"}]},{"type":"text","value":": 中间件\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"utils"}]},{"type":"text","value":": 自定义功能的工具库，方便调用\n"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"logger"}]},{"type":"text","value":": 日志库的封装"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/foldleaf/go_web_template","rel":["nofollow"]},"children":[{"type":"text","value":"项目地址"}]}]},{"type":"element","tag":"h1","props":{"id":"配置文件的加载"},"children":[{"type":"text","value":"配置文件的加载"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"示例配置"}]},{"type":"element","tag":"pre","props":{"className":["language-yaml"],"code":"app:\n  name: \"web_app\"\n  mode: \"dev\"\n  port: 8081\n  start_time: \"2023-01-01\"\n  machine_id: 1\n\nlog:\n  # 日志级别\n  level: \"debug\"\n  #文件名\n  filename: \"web_app.log\"\n  # 文件最大大小（M）\n  max_size: 200\n  # 文件最大保存天数\n  max_age: 30\n  # 文件备份数量\n  max_backups: 7\n  \n\nmysql:\n  host: \"127.0.0.1\"\n  port: 3306\n  user: \"root\"\n  password: \"mysql123\"\n  dbname: \"sql_demo\"\n  # 最大连接数\n  max_open_conns: 200\n  # 空闲连接数\n  max_idle_conns: 50\n\n\nredis:\n  host: \"127.0.0.1\"\n  port: 6379\n  password: \"\"\n  db: 0\n  pool_size: 100\n","language":"yaml","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"app:\n  name: \"web_app\"\n  mode: \"dev\"\n  port: 8081\n  start_time: \"2023-01-01\"\n  machine_id: 1\n\nlog:\n  # 日志级别\n  level: \"debug\"\n  #文件名\n  filename: \"web_app.log\"\n  # 文件最大大小（M）\n  max_size: 200\n  # 文件最大保存天数\n  max_age: 30\n  # 文件备份数量\n  max_backups: 7\n  \n\nmysql:\n  host: \"127.0.0.1\"\n  port: 3306\n  user: \"root\"\n  password: \"mysql123\"\n  dbname: \"sql_demo\"\n  # 最大连接数\n  max_open_conns: 200\n  # 空闲连接数\n  max_idle_conns: 50\n\n\nredis:\n  host: \"127.0.0.1\"\n  port: 6379\n  password: \"\"\n  db: 0\n  pool_size: 100\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用viper加载配置"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package settings\n\nimport (\n    \"fmt\"\n    \"github.com/fsnotify/fsnotify\"\n    \"github.com/spf13/viper\"\n)\n\nfunc Init() (err error) {\n    // viper.SetConfigFile(\"config.yaml\")   //指定文件加后缀\n    viper.SetConfigName(\"config\") // 指定配置文件名称，不需要带后缀，会自动识别指定目录下相同的文件名\n    viper.SetConfigType(\"yaml\")   //指定配置文件类型，用于远程获取配置，本地时不生效\n    viper.AddConfigPath(\".\")      //指定查找配置文件的路径（这里用相对路径）\n    err = viper.ReadInConfig()    //读取文件配置\n    if err != nil {\n        // 读取配置信息失败\n        fmt.Println(\"viper.ReadInConfig() 读取配置信息失败:\", err)\n        return\n    }\n\n    viper.WatchConfig()\n    viper.OnConfigChange(func(in fsnotify.Event) {\n        fmt.Println(\"配置文件修改\")\n    })\n    return\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package settings\n\nimport (\n    \"fmt\"\n    \"github.com/fsnotify/fsnotify\"\n    \"github.com/spf13/viper\"\n)\n\nfunc Init() (err error) {\n    // viper.SetConfigFile(\"config.yaml\")   //指定文件加后缀\n    viper.SetConfigName(\"config\") // 指定配置文件名称，不需要带后缀，会自动识别指定目录下相同的文件名\n    viper.SetConfigType(\"yaml\")   //指定配置文件类型，用于远程获取配置，本地时不生效\n    viper.AddConfigPath(\".\")      //指定查找配置文件的路径（这里用相对路径）\n    err = viper.ReadInConfig()    //读取文件配置\n    if err != nil {\n        // 读取配置信息失败\n        fmt.Println(\"viper.ReadInConfig() 读取配置信息失败:\", err)\n        return\n    }\n\n    viper.WatchConfig()\n    viper.OnConfigChange(func(in fsnotify.Event) {\n        fmt.Println(\"配置文件修改\")\n    })\n    return\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此后使用viper.GetString()、viper.GetInt()即可获取配置参数，如"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"viper.GetInt(\"app.port\")\nviper.GetString(\"mysql.user\")\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"viper.GetInt(\"app.port\")\nviper.GetString(\"mysql.user\")\n"}]}]},{"type":"element","tag":"h1","props":{"id":"日志"},"children":[{"type":"text","value":"日志"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用zap日志库"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package logger\n\nimport (\n    \"net\"\n    \"net/http\"\n    \"net/http/httputil\"\n    \"os\"\n    \"runtime/debug\"\n    \"strings\"\n    \"time\"\n\n    \"github.com/gin-gonic/gin\"\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n    \"go.uber.org/zap/zapcore\"\n    \"gopkg.in/natefinch/lumberjack.v2\"\n)\n\n// var lg *zap.Logger\n\n// Init 初始化Logger\nfunc Init() (err error) {\n    writeSyncer := getLogWriter(\n        viper.GetString(\"log.filename\"),\n        viper.GetInt(\"max_size\"),\n        viper.GetInt(\"max_backups\"),\n        viper.GetInt(\"max_age\"),\n    )\n    encoder := getEncoder()\n    var l = new(zapcore.Level)\n    err = l.UnmarshalText([]byte(viper.GetString(\"log.level\")))\n    if err != nil {\n        return\n    }\n    var core zapcore.Core\n    if viper.GetString(\"app.mode\") == \"dev\" {\n        // 开发模式，日志输出到终端\n        consoleEncoder := zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig())\n        core = zapcore.NewTee(\n            zapcore.NewCore(encoder, writeSyncer, l),\n            zapcore.NewCore(consoleEncoder, zapcore.Lock(os.Stdout), zapcore.DebugLevel),\n        )\n    } else {\n        // 非开发模式，日志只输出到文件\n        core = zapcore.NewCore(encoder, writeSyncer, l)\n    }\n\n    lg := zap.New(core, zap.AddCaller())\n    zap.ReplaceGlobals(lg) // 替换zap包中全局的logger实例，后续在其他包中只需使用zap.L()调用即可\n    return\n}\n\nfunc getEncoder() zapcore.Encoder {\n    encoderConfig := zap.NewProductionEncoderConfig()\n    encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder\n    encoderConfig.TimeKey = \"time\"\n    encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder\n    encoderConfig.EncodeDuration = zapcore.SecondsDurationEncoder\n    encoderConfig.EncodeCaller = zapcore.ShortCallerEncoder\n    return zapcore.NewJSONEncoder(encoderConfig)\n}\n\nfunc getLogWriter(filename string, maxSize, maxBackup, maxAge int) zapcore.WriteSyncer {\n    lumberJackLogger := &lumberjack.Logger{\n        Filename:   filename,\n        MaxSize:    maxSize,\n        MaxBackups: maxBackup,\n        MaxAge:     maxAge,\n    }\n    return zapcore.AddSync(lumberJackLogger)\n}\n\n// GinLogger 接收gin框架默认的日志\nfunc GinLogger() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        start := time.Now()\n        path := c.Request.URL.Path\n        query := c.Request.URL.RawQuery\n        c.Next()\n\n        cost := time.Since(start)\n        zap.L().Info(path,\n            zap.Int(\"status\", c.Writer.Status()),\n            zap.String(\"method\", c.Request.Method),\n            zap.String(\"path\", path),\n            zap.String(\"query\", query),\n            zap.String(\"ip\", c.ClientIP()),\n            zap.String(\"user-agent\", c.Request.UserAgent()),\n            zap.String(\"errors\", c.Errors.ByType(gin.ErrorTypePrivate).String()),\n            zap.Duration(\"cost\", cost),\n        )\n    }\n}\n\n// GinRecovery recover掉项目可能出现的panic，并使用zap记录相关日志\nfunc GinRecovery(stack bool) gin.HandlerFunc {\n    return func(c *gin.Context) {\n        defer func() {\n            if err := recover(); err != nil {\n                // Check for a broken connection, as it is not really a\n                // condition that warrants a panic stack trace.\n                var brokenPipe bool\n                if ne, ok := err.(*net.OpError); ok {\n                    if se, ok := ne.Err.(*os.SyscallError); ok {\n                        if strings.Contains(strings.ToLower(se.Error()), \"broken pipe\") || strings.Contains(strings.ToLower(se.Error()), \"connection reset by peer\") {\n                            brokenPipe = true\n                        }\n                    }\n                }\n\n                httpRequest, _ := httputil.DumpRequest(c.Request, false)\n                if brokenPipe {\n                    zap.L().Error(c.Request.URL.Path,\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                    )\n                    // If the connection is dead, we can't write a status to it.\n                    c.Error(err.(error)) // nolint: errcheck\n                    c.Abort()\n                    return\n                }\n\n                if stack {\n                    zap.L().Error(\"[Recovery from panic]\",\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                        zap.String(\"stack\", string(debug.Stack())),\n                    )\n                } else {\n                    zap.L().Error(\"[Recovery from panic]\",\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                    )\n                }\n                c.AbortWithStatus(http.StatusInternalServerError)\n            }\n        }()\n        c.Next()\n    }\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package logger\n\nimport (\n    \"net\"\n    \"net/http\"\n    \"net/http/httputil\"\n    \"os\"\n    \"runtime/debug\"\n    \"strings\"\n    \"time\"\n\n    \"github.com/gin-gonic/gin\"\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n    \"go.uber.org/zap/zapcore\"\n    \"gopkg.in/natefinch/lumberjack.v2\"\n)\n\n// var lg *zap.Logger\n\n// Init 初始化Logger\nfunc Init() (err error) {\n    writeSyncer := getLogWriter(\n        viper.GetString(\"log.filename\"),\n        viper.GetInt(\"max_size\"),\n        viper.GetInt(\"max_backups\"),\n        viper.GetInt(\"max_age\"),\n    )\n    encoder := getEncoder()\n    var l = new(zapcore.Level)\n    err = l.UnmarshalText([]byte(viper.GetString(\"log.level\")))\n    if err != nil {\n        return\n    }\n    var core zapcore.Core\n    if viper.GetString(\"app.mode\") == \"dev\" {\n        // 开发模式，日志输出到终端\n        consoleEncoder := zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig())\n        core = zapcore.NewTee(\n            zapcore.NewCore(encoder, writeSyncer, l),\n            zapcore.NewCore(consoleEncoder, zapcore.Lock(os.Stdout), zapcore.DebugLevel),\n        )\n    } else {\n        // 非开发模式，日志只输出到文件\n        core = zapcore.NewCore(encoder, writeSyncer, l)\n    }\n\n    lg := zap.New(core, zap.AddCaller())\n    zap.ReplaceGlobals(lg) // 替换zap包中全局的logger实例，后续在其他包中只需使用zap.L()调用即可\n    return\n}\n\nfunc getEncoder() zapcore.Encoder {\n    encoderConfig := zap.NewProductionEncoderConfig()\n    encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder\n    encoderConfig.TimeKey = \"time\"\n    encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder\n    encoderConfig.EncodeDuration = zapcore.SecondsDurationEncoder\n    encoderConfig.EncodeCaller = zapcore.ShortCallerEncoder\n    return zapcore.NewJSONEncoder(encoderConfig)\n}\n\nfunc getLogWriter(filename string, maxSize, maxBackup, maxAge int) zapcore.WriteSyncer {\n    lumberJackLogger := &lumberjack.Logger{\n        Filename:   filename,\n        MaxSize:    maxSize,\n        MaxBackups: maxBackup,\n        MaxAge:     maxAge,\n    }\n    return zapcore.AddSync(lumberJackLogger)\n}\n\n// GinLogger 接收gin框架默认的日志\nfunc GinLogger() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        start := time.Now()\n        path := c.Request.URL.Path\n        query := c.Request.URL.RawQuery\n        c.Next()\n\n        cost := time.Since(start)\n        zap.L().Info(path,\n            zap.Int(\"status\", c.Writer.Status()),\n            zap.String(\"method\", c.Request.Method),\n            zap.String(\"path\", path),\n            zap.String(\"query\", query),\n            zap.String(\"ip\", c.ClientIP()),\n            zap.String(\"user-agent\", c.Request.UserAgent()),\n            zap.String(\"errors\", c.Errors.ByType(gin.ErrorTypePrivate).String()),\n            zap.Duration(\"cost\", cost),\n        )\n    }\n}\n\n// GinRecovery recover掉项目可能出现的panic，并使用zap记录相关日志\nfunc GinRecovery(stack bool) gin.HandlerFunc {\n    return func(c *gin.Context) {\n        defer func() {\n            if err := recover(); err != nil {\n                // Check for a broken connection, as it is not really a\n                // condition that warrants a panic stack trace.\n                var brokenPipe bool\n                if ne, ok := err.(*net.OpError); ok {\n                    if se, ok := ne.Err.(*os.SyscallError); ok {\n                        if strings.Contains(strings.ToLower(se.Error()), \"broken pipe\") || strings.Contains(strings.ToLower(se.Error()), \"connection reset by peer\") {\n                            brokenPipe = true\n                        }\n                    }\n                }\n\n                httpRequest, _ := httputil.DumpRequest(c.Request, false)\n                if brokenPipe {\n                    zap.L().Error(c.Request.URL.Path,\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                    )\n                    // If the connection is dead, we can't write a status to it.\n                    c.Error(err.(error)) // nolint: errcheck\n                    c.Abort()\n                    return\n                }\n\n                if stack {\n                    zap.L().Error(\"[Recovery from panic]\",\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                        zap.String(\"stack\", string(debug.Stack())),\n                    )\n                } else {\n                    zap.L().Error(\"[Recovery from panic]\",\n                        zap.Any(\"error\", err),\n                        zap.String(\"request\", string(httpRequest)),\n                    )\n                }\n                c.AbortWithStatus(http.StatusInternalServerError)\n            }\n        }()\n        c.Next()\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"比较繁琐，之后使用zap.L().Error()即可打印错误日志信息"}]},{"type":"element","tag":"h1","props":{"id":"数据库初始化"},"children":[{"type":"text","value":"数据库初始化"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用sqlx"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"\nimport (\n    \"fmt\"\n\n    \"github.com/jmoiron/sqlx\"\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nvar db *sqlx.DB\n\nfunc Init() (err error) {\n    // dsn := \"user:password@tcp(127.0.0.1:3306)/sql_test?charset=utf8mb4&parseTime=True\"\n    dsn := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True\",\n        viper.GetString(\"mysql.user\"),\n        viper.GetString(\"mysql.password\"),\n        viper.GetString(\"mysql.host\"),\n        viper.GetString(\"mysql.port\"),\n        viper.GetString(\"mysql.dbname\"),\n    )\n    // 也可以使用MustConnect连接不成功就panic\n    db, err = sqlx.Connect(\"mysql\", dsn)\n    if err != nil {\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n    db.SetMaxOpenConns(viper.GetInt(\"mysql.max_open_conns\"))\n    db.SetMaxIdleConns(viper.GetInt(\"mysql.max_idle_conns\"))\n    return\n}\n\nfunc Close() {\n    _ = db.Close()\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\nimport (\n    \"fmt\"\n\n    \"github.com/jmoiron/sqlx\"\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nvar db *sqlx.DB\n\nfunc Init() (err error) {\n    // dsn := \"user:password@tcp(127.0.0.1:3306)/sql_test?charset=utf8mb4&parseTime=True\"\n    dsn := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True\",\n        viper.GetString(\"mysql.user\"),\n        viper.GetString(\"mysql.password\"),\n        viper.GetString(\"mysql.host\"),\n        viper.GetString(\"mysql.port\"),\n        viper.GetString(\"mysql.dbname\"),\n    )\n    // 也可以使用MustConnect连接不成功就panic\n    db, err = sqlx.Connect(\"mysql\", dsn)\n    if err != nil {\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n    db.SetMaxOpenConns(viper.GetInt(\"mysql.max_open_conns\"))\n    db.SetMaxIdleConns(viper.GetInt(\"mysql.max_idle_conns\"))\n    return\n}\n\nfunc Close() {\n    _ = db.Close()\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用gorm"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"// 全局变量，db和error在其他文件里也需要使用\nvar db  *gorm.DB\n\nfunc Init() (err error){\n    //使用占位符，然后用setting.go里的配置参数来替代\n    dsn := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True\",\n        viper.GetString(\"mysql.user\"),\n        viper.GetString(\"mysql.password\"),\n        viper.GetString(\"mysql.host\"),\n        viper.GetString(\"mysql.port\"),\n        viper.GetString(\"mysql.dbname\"),\n    )\n    db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{\n        //禁用默认表名的复数形式\n        NamingStrategy: schema.NamingStrategy{SingularTable: true},\n    })\n    // if err != nil {\n    //  fmt.Println(\"数据库连接失败，请检查连接参数\", err)\n    // }\n    if err != nil {\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n\n    //\n\n    //数据库自动迁移，括号内的参数为需要构建的数据模型结构体\n    db.AutoMigrate()\n\n    sqlDB, err := db.DB()\n    if err != nil {\n        // fmt.Println(\"数据库连接设置出错，请检查连接参数\", err)\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n    // 以下这些参数可以写到配置文件里，然后使用 viper 来加载\n    // SetMaxIdleConns 设置空闲连接池中连接的最大数量\n    sqlDB.SetMaxIdleConns(50) //50可替换为 viper.GetInt(\"mysql.max_idle_conns\"),下同\n\n    // SetMaxOpenConns 设置打开数据库连接的最大数量。\n    sqlDB.SetMaxOpenConns(200)\n\n    // SetConnMaxLifetime 设置了连接可复用的最大时间。\n    //不能超过 gin 框架的连接超时时间\n    sqlDB.SetConnMaxLifetime(10 * time.Second)\n\n    //sqlDB.Close()\n}\n\nfunc Close() {\n    _ = db.Close()\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 全局变量，db和error在其他文件里也需要使用\nvar db  *gorm.DB\n\nfunc Init() (err error){\n    //使用占位符，然后用setting.go里的配置参数来替代\n    dsn := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True\",\n        viper.GetString(\"mysql.user\"),\n        viper.GetString(\"mysql.password\"),\n        viper.GetString(\"mysql.host\"),\n        viper.GetString(\"mysql.port\"),\n        viper.GetString(\"mysql.dbname\"),\n    )\n    db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{\n        //禁用默认表名的复数形式\n        NamingStrategy: schema.NamingStrategy{SingularTable: true},\n    })\n    // if err != nil {\n    //  fmt.Println(\"数据库连接失败，请检查连接参数\", err)\n    // }\n    if err != nil {\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n\n    //\n\n    //数据库自动迁移，括号内的参数为需要构建的数据模型结构体\n    db.AutoMigrate()\n\n    sqlDB, err := db.DB()\n    if err != nil {\n        // fmt.Println(\"数据库连接设置出错，请检查连接参数\", err)\n        zap.L().Error(\"connect DB failed\", zap.Error(err))\n        return\n    }\n    // 以下这些参数可以写到配置文件里，然后使用 viper 来加载\n    // SetMaxIdleConns 设置空闲连接池中连接的最大数量\n    sqlDB.SetMaxIdleConns(50) //50可替换为 viper.GetInt(\"mysql.max_idle_conns\"),下同\n\n    // SetMaxOpenConns 设置打开数据库连接的最大数量。\n    sqlDB.SetMaxOpenConns(200)\n\n    // SetConnMaxLifetime 设置了连接可复用的最大时间。\n    //不能超过 gin 框架的连接超时时间\n    sqlDB.SetConnMaxLifetime(10 * time.Second)\n\n    //sqlDB.Close()\n}\n\nfunc Close() {\n    _ = db.Close()\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"错误处理约定状态码"},"children":[{"type":"text","value":"错误处理/约定状态码"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"const (\n    SUCCESS = 200\n    ERROR   = 500\n    //约定状态码\n    //code=1000...用户模块错误\n    ERROR_USERNAME_USED  = 1001\n    ERROR_PASSWORD_WRONG = 1002\n    ERROR_USER_NOT_EXIST = 1003\n\n    ERROR_TOKEN_NOT_EXIST = 1004\n    ERROR_TOKEN_OUT_TIME  = 1005\n    ERROR_TOKEN_WRONG     = 1006\n    ERROR_TYPE_WRONG      = 1007\n\n    //code=2000...文章模块错误\n\n    //code=3000...分类模块错误\n\n    // 等等\n)\n\n\nvar codeMsg = map[int]string{\n    SUCCESS:               \"OK\",\n    ERROR:                 \"FAIL\",\n    ERROR_USERNAME_USED:   \"该用户名已存在\",\n    ERROR_PASSWORD_WRONG:  \"密码错误\",\n    ERROR_USER_NOT_EXIST:  \"用户不存在\",\n    ERROR_TOKEN_NOT_EXIST: \"token不存在\",\n    ERROR_TOKEN_OUT_TIME:  \"token已过期\",\n    ERROR_TOKEN_WRONG:     \"token错误\",\n    ERROR_TYPE_WRONG:      \" token格式错误\",\n}\n\n// GetErrMsg 根据状态码获取对应的信息信息\nfunc GetErrMsg(code int) string {\n    return codeMsg[code]\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const (\n    SUCCESS = 200\n    ERROR   = 500\n    //约定状态码\n    //code=1000...用户模块错误\n    ERROR_USERNAME_USED  = 1001\n    ERROR_PASSWORD_WRONG = 1002\n    ERROR_USER_NOT_EXIST = 1003\n\n    ERROR_TOKEN_NOT_EXIST = 1004\n    ERROR_TOKEN_OUT_TIME  = 1005\n    ERROR_TOKEN_WRONG     = 1006\n    ERROR_TYPE_WRONG      = 1007\n\n    //code=2000...文章模块错误\n\n    //code=3000...分类模块错误\n\n    // 等等\n)\n\n\nvar codeMsg = map[int]string{\n    SUCCESS:               \"OK\",\n    ERROR:                 \"FAIL\",\n    ERROR_USERNAME_USED:   \"该用户名已存在\",\n    ERROR_PASSWORD_WRONG:  \"密码错误\",\n    ERROR_USER_NOT_EXIST:  \"用户不存在\",\n    ERROR_TOKEN_NOT_EXIST: \"token不存在\",\n    ERROR_TOKEN_OUT_TIME:  \"token已过期\",\n    ERROR_TOKEN_WRONG:     \"token错误\",\n    ERROR_TYPE_WRONG:      \" token格式错误\",\n}\n\n// GetErrMsg 根据状态码获取对应的信息信息\nfunc GetErrMsg(code int) string {\n    return codeMsg[code]\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"路由接口"},"children":[{"type":"text","value":"路由接口"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 api/v1 创建控制数据模型的接口 user.go、article.go、category.go，以及控制登录的接口 login.go\n以用户模块为例"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"//查询用户是否存在\nfunc UserExist(ctx *gin.Context) {\n\n}\n//查询用户\n//查询用户列表\nfunc GetUsers(ctx *gin.Context) {\n\n}\n//添加用户\nfunc AddUser(ctx *gin.Context) {\n\n}\n//编辑用户\nfunc EditUser(ctx *gin.Context) {\n\n}\n//删除用户\nfunc DeleteUser(ctx *gin.Context) {\n\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"//查询用户是否存在\nfunc UserExist(ctx *gin.Context) {\n\n}\n//查询用户\n//查询用户列表\nfunc GetUsers(ctx *gin.Context) {\n\n}\n//添加用户\nfunc AddUser(ctx *gin.Context) {\n\n}\n//编辑用户\nfunc EditUser(ctx *gin.Context) {\n\n}\n//删除用户\nfunc DeleteUser(ctx *gin.Context) {\n\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 routes/routes.go 的 v1 路由组中创建路由接口"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"router := r.Group(\"api/v1\")\n    {\n        // User 用户模块路由接口\n        router.POST(\"user/add\", v1.AddUser)\n        router.GET(\"users\", v1.GetUsers)\n        router.PUT(\"user/:id\", v1.EditUser)\n        router.DELETE(\"user/:id\", v1.DeleteUser)\n\n        // 其他模块路由接口\n\n        // 其他模块路由接口\n    }\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"router := r.Group(\"api/v1\")\n    {\n        // User 用户模块路由接口\n        router.POST(\"user/add\", v1.AddUser)\n        router.GET(\"users\", v1.GetUsers)\n        router.PUT(\"user/:id\", v1.EditUser)\n        router.DELETE(\"user/:id\", v1.DeleteUser)\n\n        // 其他模块路由接口\n\n        // 其他模块路由接口\n    }\n"}]}]},{"type":"element","tag":"h1","props":{"id":"主函数"},"children":[{"type":"text","value":"主函数"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n\n    \"web_app/dao/mysql\"\n    \"web_app/dao/redis\"\n    \"web_app/logger\"\n    \"web_app/pkg/snowflake\"\n    \"web_app/routes\"\n    \"web_app/settings\"\n\n    // \"web_app/pkg/snowflake\"\n\n    \"context\"\n\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n    \"time\"\n    // \"github.com/gin-gonic/gin\"\n)\n\n// Go Web 开发通用脚手架模板\n\nfunc main() {\n    // 1. 加载配置\n    if err := settings.Init(); err != nil {\n        fmt.Println(\"settings.Init() 加载配置失败:\", err)\n        return\n    }\n    // 2. 初始化日志\n    if err := logger.Init(); err != nil {\n        fmt.Println(\"logger.Init() 初始化日志失败:\", err)\n        return\n    }\n    // 延迟日志\n    defer zap.L().Sync()\n    zap.L().Debug(\"logger init success ...\")\n    // 3. 初始化 MySQL 连接\n    if err := mysql.Init(); err != nil {\n        fmt.Println(\"mysql.Init() 初始化mysql数据库失败:\", err)\n        return\n    }\n    defer mysql.Close()\n\n    // 4. 初始化 Redis 连接\n    if err := redis.Init(); err != nil {\n        fmt.Println(\"redis.Init() 初始化redis数据库失败:\", err)\n        return\n    }\n    defer redis.Close()\n\n    // 5. 注册路由\n    r := routes.Setup()\n    // 6. 启动服务 （优雅关机）\n\n    srv := &http.Server{\n        Addr:    fmt.Sprintf(\":%d\", viper.GetInt(\"app.port\")),\n        Handler: r,\n    }\n\n    go func() {\n        // 开启一个goroutine启动服务\n        if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n            zap.L().Fatal(\"listen: %s\\n\", zap.Error(err))\n        }\n    }()\n\n    // 等待中断信号来优雅地关闭服务器，为关闭服务器操作设置一个5秒的超时\n    quit := make(chan os.Signal, 1) // 创建一个接收信号的通道\n    signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM) // 此处不会阻塞\n    <-quit                                               // 阻塞在此，当接收到上述两种信号时才会往下执行\n    zap.L().Info(\"Shutdown Server ...\")\n    // 创建一个5秒超时的context\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    // 5秒内优雅关闭服务（将未处理完的请求处理完再关闭服务），超过5秒就超时退出\n    if err := srv.Shutdown(ctx); err != nil {\n        zap.L().Fatal(\"Server Shutdown: \", zap.Error(err))\n    }\n\n    zap.L().Info(\"Server exiting\")\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n\n    \"web_app/dao/mysql\"\n    \"web_app/dao/redis\"\n    \"web_app/logger\"\n    \"web_app/pkg/snowflake\"\n    \"web_app/routes\"\n    \"web_app/settings\"\n\n    // \"web_app/pkg/snowflake\"\n\n    \"context\"\n\n    \"github.com/spf13/viper\"\n    \"go.uber.org/zap\"\n\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n    \"time\"\n    // \"github.com/gin-gonic/gin\"\n)\n\n// Go Web 开发通用脚手架模板\n\nfunc main() {\n    // 1. 加载配置\n    if err := settings.Init(); err != nil {\n        fmt.Println(\"settings.Init() 加载配置失败:\", err)\n        return\n    }\n    // 2. 初始化日志\n    if err := logger.Init(); err != nil {\n        fmt.Println(\"logger.Init() 初始化日志失败:\", err)\n        return\n    }\n    // 延迟日志\n    defer zap.L().Sync()\n    zap.L().Debug(\"logger init success ...\")\n    // 3. 初始化 MySQL 连接\n    if err := mysql.Init(); err != nil {\n        fmt.Println(\"mysql.Init() 初始化mysql数据库失败:\", err)\n        return\n    }\n    defer mysql.Close()\n\n    // 4. 初始化 Redis 连接\n    if err := redis.Init(); err != nil {\n        fmt.Println(\"redis.Init() 初始化redis数据库失败:\", err)\n        return\n    }\n    defer redis.Close()\n\n    // 5. 注册路由\n    r := routes.Setup()\n    // 6. 启动服务 （优雅关机）\n\n    srv := &http.Server{\n        Addr:    fmt.Sprintf(\":%d\", viper.GetInt(\"app.port\")),\n        Handler: r,\n    }\n\n    go func() {\n        // 开启一个goroutine启动服务\n        if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n            zap.L().Fatal(\"listen: %s\\n\", zap.Error(err))\n        }\n    }()\n\n    // 等待中断信号来优雅地关闭服务器，为关闭服务器操作设置一个5秒的超时\n    quit := make(chan os.Signal, 1) // 创建一个接收信号的通道\n    signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM) // 此处不会阻塞\n    <-quit                                               // 阻塞在此，当接收到上述两种信号时才会往下执行\n    zap.L().Info(\"Shutdown Server ...\")\n    // 创建一个5秒超时的context\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    // 5秒内优雅关闭服务（将未处理完的请求处理完再关闭服务），超过5秒就超时退出\n    if err := srv.Shutdown(ctx); err != nil {\n        zap.L().Fatal(\"Server Shutdown: \", zap.Error(err))\n    }\n\n    zap.L().Info(\"Server exiting\")\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[]}},"_type":"markdown","_id":"content:essay:38.go项目框架及规范.md","_source":"content","_file":"essay/38.go项目框架及规范.md","_stem":"essay/38.go项目框架及规范","_extension":"md"}]