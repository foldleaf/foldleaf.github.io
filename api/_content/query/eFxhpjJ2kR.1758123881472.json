{"_path":"/essay/3.前后端交互","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"前后端交互","description":"一、后端写好需要调用的函数\n二、前端使用axios进行调用\n三、跨域问题与同源策略","subtitle":"Communication between Frontend and Backend","index":3,"date":"2023-01-30 00:00:00","lunar_date":"正月初九","year":"2023","month":"01","month_en":"Jan","day":"30","tag":"技术","tag_en":"TECH","cover":"/img/rabbit/003.jpg","categories":"vue","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一、后端写好需要调用的函数"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n二、前端使用axios进行调用"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n三、跨域问题与同源策略"}]},{"type":"element","tag":"h1","props":{"id":"一后端写好需要调用的函数"},"children":[{"type":"text","value":"一、后端写好需要调用的函数"}]},{"type":"element","tag":"pre","props":{"code":"package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n//定义函数NewConnection\n//http.Response：后端返回给前端的响应\n// *http.Request：前端传给后端的请求\nfunc NewConnection(response http.ResponseWriter,request *http.Request){\n    str:=\"asdfghjkl\"\n    //写入需要返回响应的内容，[]byte类型\n    response.Write([]byte(str))\n}\nfunc main() {\n    //注册路由，即定义访问的路径及其调用的函数\n    http.HandleFunc(\"/connect\",NewConnection)\n    //启动服务并指定监听端口\n    err:=http.ListenAndServe(\":9090\",nil)\n    if err!=nil{\n        fmt.Println(\"启动服务失败:\",err)\n        return\n    }\n}\n//执行 go run main.go 启动服务\n//在浏览器访问localhost:9090/connect\n//可以看到 asdfghjkl字符串\n","language":"go","meta":"","className":["language-go"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n//定义函数NewConnection\n//http.Response：后端返回给前端的响应\n// *http.Request：前端传给后端的请求\nfunc NewConnection(response http.ResponseWriter,request *http.Request){\n    str:=\"asdfghjkl\"\n    //写入需要返回响应的内容，[]byte类型\n    response.Write([]byte(str))\n}\nfunc main() {\n    //注册路由，即定义访问的路径及其调用的函数\n    http.HandleFunc(\"/connect\",NewConnection)\n    //启动服务并指定监听端口\n    err:=http.ListenAndServe(\":9090\",nil)\n    if err!=nil{\n        fmt.Println(\"启动服务失败:\",err)\n        return\n    }\n}\n//执行 go run main.go 启动服务\n//在浏览器访问localhost:9090/connect\n//可以看到 asdfghjkl字符串\n"}]}]},{"type":"element","tag":"h1","props":{"id":"二前端使用axios进行调用"},"children":[{"type":"text","value":"二、前端使用axios进行调用"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下载axios"}]},{"type":"element","tag":"pre","props":{"code":"npm i axios\n","language":"bash","meta":"","className":["language-bash"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i axios\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"import导入"}]},{"type":"element","tag":"pre","props":{"code":"import axios from 'axios'\n","language":"js","meta":"","className":["language-js"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import axios from 'axios'\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用axios"}]},{"type":"element","tag":"pre","props":{"code":"function newConnection(){\n    msg.body=\"2\",\n    reply.body=\"2\"\n    alert(\"1111111\")\n    axios.get(\"http://127.0.0.1:9090/connect\").then(res=>{\n        console.log(\"222222\")\n        alert(\"000000\")\n        reply.body=string(res)\n    })\n}\n","language":"js","meta":"","className":["language-js"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function newConnection(){\n    msg.body=\"2\",\n    reply.body=\"2\"\n    alert(\"1111111\")\n    axios.get(\"http://127.0.0.1:9090/connect\").then(res=>{\n        console.log(\"222222\")\n        alert(\"000000\")\n        reply.body=string(res)\n    })\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"点击连接按钮，newConnection没有弹窗，F12查看控制台发现报错"}]},{"type":"element","tag":"pre","props":{"code":" GET http://127.0.0.1:9090/connect net::ERR_FAILED 200\n","language":"bash","meta":"","className":["language-bash"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" GET http://127.0.0.1:9090/connect net::ERR_FAILED 200\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但是后端控制台成功打印"}]},{"type":"element","tag":"pre","props":{"code":"请求：&{GET /connect HTTP/1.1 1 1 map[Accept:[application/json, text/plain, */*] Accept-Encoding:[gzip, \ndeflate, br] Accept-Language:[zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6] Cache-Control:[no-cache] Connection:[keep-alive] Origin:[http://127.0.0.1:5173] Pragma:[no-cache] Referer:[http://127.0.0.1:5173/] Sec-Ch-Ua:[\"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"108\", \"Microsoft Edge\";v=\"108\"] Sec-Ch-Ua-Mobile:[?0] Sec-Ch-Ua-Platform:[\"Windows\"] Sec-Fetch-Dest:[empty] Sec-Fetch-Mode:[cors] Sec-Fetch-Site:[same-site] User-Agent:[Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.76]] {} <nil> 0 [] false 127.0.0.1:9090 map[] map[] <nil> map[] 127.0.0.1:52006 /connect <nil> <nil> <nil> 0xc0001042c0}     \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"请求：&{GET /connect HTTP/1.1 1 1 map[Accept:[application/json, text/plain, */*] Accept-Encoding:[gzip, \ndeflate, br] Accept-Language:[zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6] Cache-Control:[no-cache] Connection:[keep-alive] Origin:[http://127.0.0.1:5173] Pragma:[no-cache] Referer:[http://127.0.0.1:5173/] Sec-Ch-Ua:[\"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"108\", \"Microsoft Edge\";v=\"108\"] Sec-Ch-Ua-Mobile:[?0] Sec-Ch-Ua-Platform:[\"Windows\"] Sec-Fetch-Dest:[empty] Sec-Fetch-Mode:[cors] Sec-Fetch-Site:[same-site] User-Agent:[Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.76]] {} <nil> 0 [] false 127.0.0.1:9090 map[] map[] <nil> map[] 127.0.0.1:52006 /connect <nil> <nil> <nil> 0xc0001042c0}     \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"通过对代码以及报错信息分析，问题出现在跨域请求上。"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"跨域是指浏览器不允许当前所在的源请求去访问另一个不一样的源请求，源是指请求协议、域名、端口号，这三个如果有一个不一致就是跨域请求。请自行搜索关键词:跨域请求，同源策略"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用spring boot的时候应该是加注解后自动处理了，但无法知晓原理，不过现在遇到这个问题可以深入了解一下"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先将发送请求的前端作为客户端，接收请求的作为服务端，\n而从我们上面的测试已经可以看出，跨域是客户端单方面拒绝响应，服务端是接收请求并处理了的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"spring boot后端处理：\n在 每个 Controller 类上加入 @CrossOrigin 注解,\n或者在 Controller的基类中加上 @CrossOrigin 注解然后其他 Controller 类就有了这个 @Controller,\n此时跨域访问就不会报错了。"}]},{"type":"element","tag":"h1","props":{"id":"三跨域问题与同源策略"},"children":[{"type":"text","value":"三、跨域问题与同源策略"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"三种方法：JSONP、cors、代理，本文使用代理方法解决"}]},{"type":"element","tag":"h2","props":{"id":"_1jsonp"},"children":[{"type":"text","value":"1.JSONP"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"JSONP 是一种非官方的跨域数据交互协议\n原理：利用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<script>"}]},{"type":"text","value":" "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<img>"}]},{"type":"text","value":" "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<iframe> "}]},{"type":"text","value":"等标签可以引入不同域资源的特性，将需要发送的请求的路径作为src参数,告知服务端回调函数的函数名\n例如："}]},{"type":"element","tag":"pre","props":{"code":"<script src=\"http://example.com/data.php?callback=dosomething\"></script>\n","language":"js","meta":"","className":["language-js"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script src=\"http://example.com/data.php?callback=dosomething\"></script>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求,现在一般不用，不需要浪费时间去学"}]},{"type":"element","tag":"h2","props":{"id":"_2cors"},"children":[{"type":"text","value":"2.cors"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Cross-origin resource sharing 跨域资源共享。\n它是一个新的 W3C 标准，它新增的一组HTTP首部字段，允许服务端其声明哪些源站有权限访问哪些资源"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"后端允许跨域："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/guoer9973/article/details/54341637","rel":["nofollow"]},"children":[{"type":"text","value":"https://blog.csdn.net/guoer9973/article/details/54341637"}]}]},{"type":"element","tag":"pre","props":{"code":"func LDNS(w http.ResponseWriter, req *http.Request) {\n\n    if origin := req.Header.Get(\"Origin\"); origin != \"\" {\n        w.Header().Set(\"Access-Control-Allow-Origin\", origin)\n        w.Header().Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\n        w.Header().Set(\"Access-Control-Allow-Headers\",\n            \"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization\")\n    }\n    if req.Method == \"OPTIONS\" {\n        return\n    }\n    // 响应http code\n    w.WriteHeader(200)\n    query := strings.Split(req.Host, \".\")\n    value, err := ldns.RAMDBMgr.Get(query[0])\n    fmt.Println(\"Access-Control-Allow-Origin\", \"*\")\n    if err != nil {\n        io.WriteString(w, `{\"message\": \"\"}`)\n        return\n    }\n\n    io.WriteString(w, value)\n}\n//本人没测试过，只是拿来了解原理用的\n","language":"go","meta":"","className":["language-go"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"func LDNS(w http.ResponseWriter, req *http.Request) {\n\n    if origin := req.Header.Get(\"Origin\"); origin != \"\" {\n        w.Header().Set(\"Access-Control-Allow-Origin\", origin)\n        w.Header().Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\n        w.Header().Set(\"Access-Control-Allow-Headers\",\n            \"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization\")\n    }\n    if req.Method == \"OPTIONS\" {\n        return\n    }\n    // 响应http code\n    w.WriteHeader(200)\n    query := strings.Split(req.Host, \".\")\n    value, err := ldns.RAMDBMgr.Get(query[0])\n    fmt.Println(\"Access-Control-Allow-Origin\", \"*\")\n    if err != nil {\n        io.WriteString(w, `{\"message\": \"\"}`)\n        return\n    }\n\n    io.WriteString(w, value)\n}\n//本人没测试过，只是拿来了解原理用的\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"go的跨域有现成的库可以使用"}]},{"type":"element","tag":"pre","props":{"code":"go get github.com/gin-contrib/cors\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go get github.com/gin-contrib/cors\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"go的多线程-实时数据采集"}]},{"type":"text","value":"的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"路由设置"}]},{"type":"text","value":"里有使用"}]},{"type":"element","tag":"pre","props":{"code":"@Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        req.setAttribute(\"org.apache.catalina.ASYNC_SUPPORTED\", true);\n        HttpServletResponse response = (HttpServletResponse) res;\n        response.setHeader(\"Access-Control-Allow-Origin\", ((HttpServletRequest) req).getHeader(\"Origin\"));\n        response.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, DELETE,PUT\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Disposition,Origin, X-Requested-With, Content-Type, Accept,Authorization,id_token\");\n        response.setHeader(\"Access-Control-Allow-Credentials\",\"true\");\n        response.setHeader(\"Content-Security-Policy\", \"default-src 'self' 'unsafe-inline'; script-src 'self'; frame-ancestors 'self'; object-src 'none'\");\n        response.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n        response.setHeader(\"X-XSS-Protection\", \"1; mode=block\");\n        chain.doFilter(req, res);\n    }\n    //本人没测试过，只是拿来了解原理用的\n","language":"java","meta":"","className":["language-java"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"@Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        req.setAttribute(\"org.apache.catalina.ASYNC_SUPPORTED\", true);\n        HttpServletResponse response = (HttpServletResponse) res;\n        response.setHeader(\"Access-Control-Allow-Origin\", ((HttpServletRequest) req).getHeader(\"Origin\"));\n        response.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, DELETE,PUT\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Disposition,Origin, X-Requested-With, Content-Type, Accept,Authorization,id_token\");\n        response.setHeader(\"Access-Control-Allow-Credentials\",\"true\");\n        response.setHeader(\"Content-Security-Policy\", \"default-src 'self' 'unsafe-inline'; script-src 'self'; frame-ancestors 'self'; object-src 'none'\");\n        response.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n        response.setHeader(\"X-XSS-Protection\", \"1; mode=block\");\n        chain.doFilter(req, res);\n    }\n    //本人没测试过，只是拿来了解原理用的\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"请参考"},{"type":"element","tag":"a","props":{"href":"https://www.jianshu.com/p/26d88431dc1b","rel":["nofollow"]},"children":[{"type":"text","value":"这篇文章"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"需要设置请求返回的响应头Header,详细设置内容讲解可以见"},{"type":"element","tag":"a","props":{"href":"https://www.jianshu.com/p/f880878c1398","rel":["nofollow"]},"children":[{"type":"text","value":"这篇文章"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前端设置跨域并允许携带cookie："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前端请求库一般有两种：流行框架下react或者vue使用axios、fetch这两者都可以，设置允许跨域的方式有点不一样。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"原生fetch"}]},{"type":"element","tag":"pre","props":{"code":"fetch('localhost:3000',{\n      /*允许携带cookies，默认情况没写这个是不会携带的*/\n      credentials: 'include',\n      /*允许跨域**/\n      mode: 'cors'\n})\n","language":"js","meta":"","className":["language-js"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"fetch('localhost:3000',{\n      /*允许携带cookies，默认情况没写这个是不会携带的*/\n      credentials: 'include',\n      /*允许跨域**/\n      mode: 'cors'\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"axios"}]},{"type":"element","tag":"pre","props":{"code":"import axios from 'axios'\n// 对所有 axios 请求允许携带cookie\naxios.defaults.withCredentials = true;\n\n// 对单独的 axios 请求允许携带cookie\n axios.get('localhost:3000', {\n  withCredentials: true    \n})\n","language":"js","meta":"","className":["language-js"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import axios from 'axios'\n// 对所有 axios 请求允许携带cookie\naxios.defaults.withCredentials = true;\n\n// 对单独的 axios 请求允许携带cookie\n axios.get('localhost:3000', {\n  withCredentials: true    \n})\n"}]}]},{"type":"element","tag":"h2","props":{"id":"_3使用代理本文使用的方法"},"children":[{"type":"text","value":"3.使用代理(本文使用的方法)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://juejin.cn/post/7112373669594136612","rel":["nofollow"]},"children":[{"type":"text","value":"https://juejin.cn/post/7112373669594136612"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"已知："}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"同源策略"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"跨域是请求方单方面拒绝响应，接收方是接收请求并处理了。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"代理服务器不是浏览器,它没有同源策略的限制"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以使用代理的解决方法是："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"1）请求方发送请求给代理服务器，代理成功接收请求"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n2）代理将请求做了一点修改，把请求方的域名换装成与接收方同源的域名，然后再发送请求给接收方"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n3）接收方成功接收并处理数据，返回响应给代理，代理成功接收响应"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n4）代理将响应做了一点修改，把接收方的域名换装成与请求方同源的域名，然后再发送给请求方"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n5）请求方成功接收响应"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"vue配置代理的方法："},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/qq_45787691/article/details/128074655","rel":["nofollow"]},"children":[{"type":"text","value":"https://blog.csdn.net/qq_45787691/article/details/128074655"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这里我使用vite构建的项目，故使用vite配置代理"}]},{"type":"element","tag":"pre","props":{"code":"import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()],\n  //以上为其他配置\n  //代理配置\n  server:{\n    proxy:{\n        '/api':{\n            //https: true, // 默认是false, 默认就是http协议，true将http协议转换为https协议\n            // 配置需要代理的路径 --> 这里的意思是代理 http://localhost:默认端口/api/后的所有路由\n            target:'http://127.0.0.1:9090',//目标服务器地址\n            changeOrigin:true,//允许跨域\n            ws:true,//允许websocket跨域\n            // 把路径中的 /api都替换为空的字符串\n            // 因为服务端地址里面是没有api字段的，api只是为了区别需要代理的路径，如果服务端有api字段则不需要替换    \n            rewrite:(path)=>path.replace(/^\\/api/,\"\")\n        }\n    }\n  }\n})\n","language":"js","meta":"","className":["language-js"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()],\n  //以上为其他配置\n  //代理配置\n  server:{\n    proxy:{\n        '/api':{\n            //https: true, // 默认是false, 默认就是http协议，true将http协议转换为https协议\n            // 配置需要代理的路径 --> 这里的意思是代理 http://localhost:默认端口/api/后的所有路由\n            target:'http://127.0.0.1:9090',//目标服务器地址\n            changeOrigin:true,//允许跨域\n            ws:true,//允许websocket跨域\n            // 把路径中的 /api都替换为空的字符串\n            // 因为服务端地址里面是没有api字段的，api只是为了区别需要代理的路径，如果服务端有api字段则不需要替换    \n            rewrite:(path)=>path.replace(/^\\/api/,\"\")\n        }\n    }\n  }\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用代理与axios"}]},{"type":"element","tag":"pre","props":{"code":"function newConnection() {\n    msg.body = \"2\",\n        reply.body = \"2\"\n    alert(\"1111111\")\n    axios.get(\"/api/connect\").then(res => {\n        //console.log(\"222222\")\n        //alert(\"000000\")\n        reply.body = JSON.stringify(res)\n    })\n}\n","language":"js","meta":"","className":["language-js"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function newConnection() {\n    msg.body = \"2\",\n        reply.body = \"2\"\n    alert(\"1111111\")\n    axios.get(\"/api/connect\").then(res => {\n        //console.log(\"222222\")\n        //alert(\"000000\")\n        reply.body = JSON.stringify(res)\n    })\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"成功了，注意res是一个对象，我们用JSON.stringify将它转换为字符串"}]},{"type":"element","tag":"pre","props":{"code":"{\"data\":\"asdfghjkl\",\"status\":200,\"statusText\":\"OK\",\"headers\":{\"access-control-allow-origin\":\"*\",\"connection\":\"close\",\"content-length\":\"9\",\"content-type\":\"text/plain; charset=utf-8\",\"date\":\"Mon, 09 Jan 2023 08:41:30 GMT\"},\"config\":{\"transitional\":{\"silentJSONParsing\":true,\"forcedJSONParsing\":true,\"clarifyTimeoutError\":false},\"adapter\":[\"xhr\",\"http\"],\"transformRequest\":[null],\"transformResponse\":[null],\"timeout\":0,\"xsrfCookieName\":\"XSRF-TOKEN\",\"xsrfHeaderName\":\"X-XSRF-TOKEN\",\"maxContentLength\":-1,\"maxBodyLength\":-1,\"env\":{},\"headers\":{\"Accept\":\"application/json, text/plain, */*\"},\"method\":\"get\",\"url\":\"/api/connect\"},\"request\":{}}\n","language":"json","meta":"","className":["language-json"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\"data\":\"asdfghjkl\",\"status\":200,\"statusText\":\"OK\",\"headers\":{\"access-control-allow-origin\":\"*\",\"connection\":\"close\",\"content-length\":\"9\",\"content-type\":\"text/plain; charset=utf-8\",\"date\":\"Mon, 09 Jan 2023 08:41:30 GMT\"},\"config\":{\"transitional\":{\"silentJSONParsing\":true,\"forcedJSONParsing\":true,\"clarifyTimeoutError\":false},\"adapter\":[\"xhr\",\"http\"],\"transformRequest\":[null],\"transformResponse\":[null],\"timeout\":0,\"xsrfCookieName\":\"XSRF-TOKEN\",\"xsrfHeaderName\":\"X-XSRF-TOKEN\",\"maxContentLength\":-1,\"maxBodyLength\":-1,\"env\":{},\"headers\":{\"Accept\":\"application/json, text/plain, */*\"},\"method\":\"get\",\"url\":\"/api/connect\"},\"request\":{}}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这个返回是完整的http响应，我们只需要响应的数据data即可"}]},{"type":"element","tag":"pre","props":{"code":"reply.body = res.data\n","language":"js","meta":"","className":["language-js"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"reply.body = res.data\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"同样后端只需要请求的内容"}]},{"type":"element","tag":"pre","props":{"code":"fmt.Printf(\"请求：%v\", request.Body)\n","language":"go","meta":"","className":["language-go"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"fmt.Printf(\"请求：%v\", request.Body)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当然我们只是调用了方法，请求内容为空，控制台打印"}]},{"type":"element","tag":"pre","props":{"code":"{}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":3,"links":[{"id":"_1jsonp","depth":2,"text":"1.JSONP"},{"id":"_2cors","depth":2,"text":"2.cors"},{"id":"_3使用代理本文使用的方法","depth":2,"text":"3.使用代理(本文使用的方法)"}]}},"_type":"markdown","_id":"content:essay:3.前后端交互.md","_source":"content","_file":"essay/3.前后端交互.md","_stem":"essay/3.前后端交互","_extension":"md"}